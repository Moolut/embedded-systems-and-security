
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034a8  08000000  0c000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020438  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020438  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020438  2**0
                  CONTENTS
  5 .data         00000438  20000000  0c0034a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000090  20000438  0c0038e0  00020438  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020438  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  00020438  2**0
                  CONTENTS
 10 .debug_aranges 00000650  00000000  00000000  00020438  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00009463  00000000  00000000  00020a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000117e  00000000  00000000  00029eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002a00  00000000  00000000  0002b069  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b3c  00000000  00000000  0002da6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0007bc90  00000000  00000000  0002f5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000037ec  00000000  00000000  000ab238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005c0  00000000  00000000  000aea24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .build_attributes 00000230  00000000  00000000  000aefe4  2**0
                  CONTENTS, READONLY
 19 .debug_macro  000197fa  00000000  00000000  000af214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	c1 03 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0034a8 	.word	0x0c0034a8
 800024c:	20000000 	.word	0x20000000
 8000250:	00000438 	.word	0x00000438
 8000254:	0c0038e0 	.word	0x0c0038e0
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0034a8 	.word	0x0c0034a8
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0034a8 	.word	0x0c0034a8
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000438 	.word	0x20000438
 800027c:	0000008c 	.word	0x0000008c
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	08003049 	.word	0x08003049
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	08003451 	.word	0x08003451
    ldr  r0, =main
 80002ac:	08000395 	.word	0x08000395

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	db0a      	blt.n	80002de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <__NVIC_SetPriority+0x4c>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002dc:	e00a      	b.n	80002f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4908      	ldr	r1, [pc, #32]	; (8000304 <__NVIC_SetPriority+0x50>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	3b04      	subs	r3, #4
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	440b      	add	r3, r1
 80002f2:	761a      	strb	r2, [r3, #24]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000318:	d301      	bcc.n	800031e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2301      	movs	r3, #1
 800031c:	e00f      	b.n	800033e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <SysTick_Config+0x40>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3b01      	subs	r3, #1
 8000324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000326:	213f      	movs	r1, #63	; 0x3f
 8000328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800032c:	f7ff ffc2 	bl	80002b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_Config+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Config+0x40>)
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010

0800034c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2201      	movs	r2, #1
 800035c:	409a      	lsls	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	460b      	mov	r3, r1
 8000378:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000380:	409a      	lsls	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
	...

08000394 <main>:
XMC_GPIO_CONFIG_t led_config = {
    .mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL,
    .output_level = XMC_GPIO_OUTPUT_LEVEL_LOW};

int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  // Initialize the XMC Peripheral Library and other necessary peripherals

  XMC_GPIO_Init(XMC_GPIO_PORT1, LED_PIN, &led_config);
 8000398:	4a06      	ldr	r2, [pc, #24]	; (80003b4 <main+0x20>)
 800039a:	2100      	movs	r1, #0
 800039c:	4806      	ldr	r0, [pc, #24]	; (80003b8 <main+0x24>)
 800039e:	f002 f81b 	bl	80023d8 <XMC_GPIO_Init>

  while (1)
  {
    output_morse_code("i can morse");
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <main+0x28>)
 80003a4:	f000 f882 	bl	80004ac <output_morse_code>
    delay_ms(5000);
 80003a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80003ac:	f000 f816 	bl	80003dc <delay_ms>
    output_morse_code("i can morse");
 80003b0:	e7f7      	b.n	80003a2 <main+0xe>
 80003b2:	bf00      	nop
 80003b4:	20000000 	.word	0x20000000
 80003b8:	48028100 	.word	0x48028100
 80003bc:	08003498 	.word	0x08003498

080003c0 <SysTick_Handler>:

  return 0;
}

void SysTick_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  system_ticks++;
 80003c4:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <SysTick_Handler+0x18>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3301      	adds	r3, #1
 80003ca:	4a03      	ldr	r2, [pc, #12]	; (80003d8 <SysTick_Handler+0x18>)
 80003cc:	6013      	str	r3, [r2, #0]
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	20000438 	.word	0x20000438

080003dc <delay_ms>:

void delay_ms(uint32_t delay_val)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  // Configure SysTick
  SysTick_Config(SystemCoreClock / 1000); // Generate interrupt every 1 ms
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <delay_ms+0x48>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a0f      	ldr	r2, [pc, #60]	; (8000428 <delay_ms+0x4c>)
 80003ea:	fba2 2303 	umull	r2, r3, r2, r3
 80003ee:	099b      	lsrs	r3, r3, #6
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff ff89 	bl	8000308 <SysTick_Config>

  // Get the current system tick count
  uint32_t start_ticks = system_ticks;
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <delay_ms+0x50>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	60fb      	str	r3, [r7, #12]

  // Calculate the number of ticks required for the delay
  uint32_t delay_ticks = delay_val;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	60bb      	str	r3, [r7, #8]

  // Wait until the required delay has elapsed
  while ((system_ticks - start_ticks) < delay_ticks)
 8000400:	bf00      	nop
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <delay_ms+0x50>)
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	68ba      	ldr	r2, [r7, #8]
 800040c:	429a      	cmp	r2, r3
 800040e:	d8f8      	bhi.n	8000402 <delay_ms+0x26>
  {
  }

  // Disable SysTick timer
  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <delay_ms+0x54>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a06      	ldr	r2, [pc, #24]	; (8000430 <delay_ms+0x54>)
 8000416:	f023 0301 	bic.w	r3, r3, #1
 800041a:	6013      	str	r3, [r2, #0]
}
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	2000ffc0 	.word	0x2000ffc0
 8000428:	10624dd3 	.word	0x10624dd3
 800042c:	20000438 	.word	0x20000438
 8000430:	e000e010 	.word	0xe000e010

08000434 <dot_LED>:

void dot_LED(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, LED_PIN); // Turn on the LED
 8000438:	2100      	movs	r1, #0
 800043a:	4806      	ldr	r0, [pc, #24]	; (8000454 <dot_LED+0x20>)
 800043c:	f7ff ff86 	bl	800034c <XMC_GPIO_SetOutputHigh>
  delay_ms(100);                                   // Delay for 100 milliseconds
 8000440:	2064      	movs	r0, #100	; 0x64
 8000442:	f7ff ffcb 	bl	80003dc <delay_ms>
  XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, LED_PIN);  // Turn off the LED
 8000446:	2100      	movs	r1, #0
 8000448:	4802      	ldr	r0, [pc, #8]	; (8000454 <dot_LED+0x20>)
 800044a:	f7ff ff90 	bl	800036e <XMC_GPIO_SetOutputLow>
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	48028100 	.word	0x48028100

08000458 <dash_LED>:

void dash_LED(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, LED_PIN); // Turn on the LED
 800045c:	2100      	movs	r1, #0
 800045e:	4806      	ldr	r0, [pc, #24]	; (8000478 <dash_LED+0x20>)
 8000460:	f7ff ff74 	bl	800034c <XMC_GPIO_SetOutputHigh>
  delay_ms(300);                                   // Delay for 300 milliseconds
 8000464:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000468:	f7ff ffb8 	bl	80003dc <delay_ms>
  XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, LED_PIN);  // Turn off the LED
 800046c:	2100      	movs	r1, #0
 800046e:	4802      	ldr	r0, [pc, #8]	; (8000478 <dash_LED+0x20>)
 8000470:	f7ff ff7d 	bl	800036e <XMC_GPIO_SetOutputLow>
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	48028100 	.word	0x48028100

0800047c <space_symbol>:

void space_symbol(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  delay_ms(100); // Delay for 100 milliseconds
 8000480:	2064      	movs	r0, #100	; 0x64
 8000482:	f7ff ffab 	bl	80003dc <delay_ms>
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}

0800048a <space_letter>:

void space_letter(void)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	af00      	add	r7, sp, #0
  delay_ms(300); // Delay for 300 milliseconds
 800048e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000492:	f7ff ffa3 	bl	80003dc <delay_ms>
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}

0800049a <space_word>:

void space_word(void)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	af00      	add	r7, sp, #0
  delay_ms(700); // Delay for 700 milliseconds
 800049e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80004a2:	f7ff ff9b 	bl	80003dc <delay_ms>
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <output_morse_code>:

void output_morse_code(char *string)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  int i = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  while (string[i] != '\0')
 80004b8:	e2c2      	b.n	8000a40 <output_morse_code+0x594>
  {
    switch (string[i])
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	4413      	add	r3, r2
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	3b20      	subs	r3, #32
 80004c4:	2b5a      	cmp	r3, #90	; 0x5a
 80004c6:	f200 82a8 	bhi.w	8000a1a <output_morse_code+0x56e>
 80004ca:	a201      	add	r2, pc, #4	; (adr r2, 80004d0 <output_morse_code+0x24>)
 80004cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d0:	08000a15 	.word	0x08000a15
 80004d4:	08000a1b 	.word	0x08000a1b
 80004d8:	08000a1b 	.word	0x08000a1b
 80004dc:	08000a1b 	.word	0x08000a1b
 80004e0:	08000a1b 	.word	0x08000a1b
 80004e4:	08000a1b 	.word	0x08000a1b
 80004e8:	08000a1b 	.word	0x08000a1b
 80004ec:	08000a1b 	.word	0x08000a1b
 80004f0:	08000a1b 	.word	0x08000a1b
 80004f4:	08000a1b 	.word	0x08000a1b
 80004f8:	08000a1b 	.word	0x08000a1b
 80004fc:	08000a1b 	.word	0x08000a1b
 8000500:	08000a1b 	.word	0x08000a1b
 8000504:	08000a1b 	.word	0x08000a1b
 8000508:	08000a1b 	.word	0x08000a1b
 800050c:	08000a1b 	.word	0x08000a1b
 8000510:	08000899 	.word	0x08000899
 8000514:	080008bf 	.word	0x080008bf
 8000518:	080008e5 	.word	0x080008e5
 800051c:	0800090b 	.word	0x0800090b
 8000520:	08000931 	.word	0x08000931
 8000524:	08000957 	.word	0x08000957
 8000528:	0800097d 	.word	0x0800097d
 800052c:	080009a3 	.word	0x080009a3
 8000530:	080009c9 	.word	0x080009c9
 8000534:	080009ef 	.word	0x080009ef
 8000538:	08000a1b 	.word	0x08000a1b
 800053c:	08000a1b 	.word	0x08000a1b
 8000540:	08000a1b 	.word	0x08000a1b
 8000544:	08000a1b 	.word	0x08000a1b
 8000548:	08000a1b 	.word	0x08000a1b
 800054c:	08000a1b 	.word	0x08000a1b
 8000550:	08000a1b 	.word	0x08000a1b
 8000554:	08000a1b 	.word	0x08000a1b
 8000558:	08000a1b 	.word	0x08000a1b
 800055c:	08000a1b 	.word	0x08000a1b
 8000560:	08000a1b 	.word	0x08000a1b
 8000564:	08000a1b 	.word	0x08000a1b
 8000568:	08000a1b 	.word	0x08000a1b
 800056c:	08000a1b 	.word	0x08000a1b
 8000570:	08000a1b 	.word	0x08000a1b
 8000574:	08000a1b 	.word	0x08000a1b
 8000578:	08000a1b 	.word	0x08000a1b
 800057c:	08000a1b 	.word	0x08000a1b
 8000580:	08000a1b 	.word	0x08000a1b
 8000584:	08000a1b 	.word	0x08000a1b
 8000588:	08000a1b 	.word	0x08000a1b
 800058c:	08000a1b 	.word	0x08000a1b
 8000590:	08000a1b 	.word	0x08000a1b
 8000594:	08000a1b 	.word	0x08000a1b
 8000598:	08000a1b 	.word	0x08000a1b
 800059c:	08000a1b 	.word	0x08000a1b
 80005a0:	08000a1b 	.word	0x08000a1b
 80005a4:	08000a1b 	.word	0x08000a1b
 80005a8:	08000a1b 	.word	0x08000a1b
 80005ac:	08000a1b 	.word	0x08000a1b
 80005b0:	08000a1b 	.word	0x08000a1b
 80005b4:	08000a1b 	.word	0x08000a1b
 80005b8:	08000a1b 	.word	0x08000a1b
 80005bc:	08000a1b 	.word	0x08000a1b
 80005c0:	08000a1b 	.word	0x08000a1b
 80005c4:	08000a1b 	.word	0x08000a1b
 80005c8:	08000a1b 	.word	0x08000a1b
 80005cc:	08000a1b 	.word	0x08000a1b
 80005d0:	08000a1b 	.word	0x08000a1b
 80005d4:	0800063d 	.word	0x0800063d
 80005d8:	0800064b 	.word	0x0800064b
 80005dc:	08000669 	.word	0x08000669
 80005e0:	08000687 	.word	0x08000687
 80005e4:	0800069d 	.word	0x0800069d
 80005e8:	080006a3 	.word	0x080006a3
 80005ec:	080006c1 	.word	0x080006c1
 80005f0:	080006d7 	.word	0x080006d7
 80005f4:	080006f5 	.word	0x080006f5
 80005f8:	08000703 	.word	0x08000703
 80005fc:	08000721 	.word	0x08000721
 8000600:	08000737 	.word	0x08000737
 8000604:	08000755 	.word	0x08000755
 8000608:	08000763 	.word	0x08000763
 800060c:	08000771 	.word	0x08000771
 8000610:	08000787 	.word	0x08000787
 8000614:	080007a5 	.word	0x080007a5
 8000618:	080007c3 	.word	0x080007c3
 800061c:	080007d9 	.word	0x080007d9
 8000620:	080007ef 	.word	0x080007ef
 8000624:	080007f5 	.word	0x080007f5
 8000628:	0800080b 	.word	0x0800080b
 800062c:	08000829 	.word	0x08000829
 8000630:	0800083f 	.word	0x0800083f
 8000634:	0800085d 	.word	0x0800085d
 8000638:	0800087b 	.word	0x0800087b
    {
    case 'a':
      dot_LED();
 800063c:	f7ff fefa 	bl	8000434 <dot_LED>
      space_symbol();
 8000640:	f7ff ff1c 	bl	800047c <space_symbol>
      dash_LED();
 8000644:	f7ff ff08 	bl	8000458 <dash_LED>
      break;
 8000648:	e1e8      	b.n	8000a1c <output_morse_code+0x570>
    case 'b':
      dash_LED();
 800064a:	f7ff ff05 	bl	8000458 <dash_LED>
      space_symbol();
 800064e:	f7ff ff15 	bl	800047c <space_symbol>
      dot_LED();
 8000652:	f7ff feef 	bl	8000434 <dot_LED>
      space_symbol();
 8000656:	f7ff ff11 	bl	800047c <space_symbol>
      dot_LED();
 800065a:	f7ff feeb 	bl	8000434 <dot_LED>
      space_symbol();
 800065e:	f7ff ff0d 	bl	800047c <space_symbol>
      dot_LED();
 8000662:	f7ff fee7 	bl	8000434 <dot_LED>
      break;
 8000666:	e1d9      	b.n	8000a1c <output_morse_code+0x570>
    case 'c':
      dash_LED();
 8000668:	f7ff fef6 	bl	8000458 <dash_LED>
      space_symbol();
 800066c:	f7ff ff06 	bl	800047c <space_symbol>
      dot_LED();
 8000670:	f7ff fee0 	bl	8000434 <dot_LED>
      space_symbol();
 8000674:	f7ff ff02 	bl	800047c <space_symbol>
      dash_LED();
 8000678:	f7ff feee 	bl	8000458 <dash_LED>
      space_symbol();
 800067c:	f7ff fefe 	bl	800047c <space_symbol>
      dot_LED();
 8000680:	f7ff fed8 	bl	8000434 <dot_LED>
      break;
 8000684:	e1ca      	b.n	8000a1c <output_morse_code+0x570>
    case 'd':
      dash_LED();
 8000686:	f7ff fee7 	bl	8000458 <dash_LED>
      space_symbol();
 800068a:	f7ff fef7 	bl	800047c <space_symbol>
      dot_LED();
 800068e:	f7ff fed1 	bl	8000434 <dot_LED>
      space_symbol();
 8000692:	f7ff fef3 	bl	800047c <space_symbol>
      dot_LED();
 8000696:	f7ff fecd 	bl	8000434 <dot_LED>
      break;
 800069a:	e1bf      	b.n	8000a1c <output_morse_code+0x570>
    case 'e':
      dot_LED();
 800069c:	f7ff feca 	bl	8000434 <dot_LED>
      break;
 80006a0:	e1bc      	b.n	8000a1c <output_morse_code+0x570>
    case 'f':
      dot_LED();
 80006a2:	f7ff fec7 	bl	8000434 <dot_LED>
      space_symbol();
 80006a6:	f7ff fee9 	bl	800047c <space_symbol>
      dot_LED();
 80006aa:	f7ff fec3 	bl	8000434 <dot_LED>
      space_symbol();
 80006ae:	f7ff fee5 	bl	800047c <space_symbol>
      dash_LED();
 80006b2:	f7ff fed1 	bl	8000458 <dash_LED>
      space_symbol();
 80006b6:	f7ff fee1 	bl	800047c <space_symbol>
      dot_LED();
 80006ba:	f7ff febb 	bl	8000434 <dot_LED>
      break;
 80006be:	e1ad      	b.n	8000a1c <output_morse_code+0x570>
    case 'g':
      dash_LED();
 80006c0:	f7ff feca 	bl	8000458 <dash_LED>
      space_symbol();
 80006c4:	f7ff feda 	bl	800047c <space_symbol>
      dash_LED();
 80006c8:	f7ff fec6 	bl	8000458 <dash_LED>
      space_symbol();
 80006cc:	f7ff fed6 	bl	800047c <space_symbol>
      dot_LED();
 80006d0:	f7ff feb0 	bl	8000434 <dot_LED>
      break;
 80006d4:	e1a2      	b.n	8000a1c <output_morse_code+0x570>
    case 'h':
      dot_LED();
 80006d6:	f7ff fead 	bl	8000434 <dot_LED>
      space_symbol();
 80006da:	f7ff fecf 	bl	800047c <space_symbol>
      dot_LED();
 80006de:	f7ff fea9 	bl	8000434 <dot_LED>
      space_symbol();
 80006e2:	f7ff fecb 	bl	800047c <space_symbol>
      dot_LED();
 80006e6:	f7ff fea5 	bl	8000434 <dot_LED>
      space_symbol();
 80006ea:	f7ff fec7 	bl	800047c <space_symbol>
      dot_LED();
 80006ee:	f7ff fea1 	bl	8000434 <dot_LED>
      break;
 80006f2:	e193      	b.n	8000a1c <output_morse_code+0x570>
    case 'i':
      dot_LED();
 80006f4:	f7ff fe9e 	bl	8000434 <dot_LED>
      space_symbol();
 80006f8:	f7ff fec0 	bl	800047c <space_symbol>
      dot_LED();
 80006fc:	f7ff fe9a 	bl	8000434 <dot_LED>
      break;
 8000700:	e18c      	b.n	8000a1c <output_morse_code+0x570>
    case 'j':
      dot_LED();
 8000702:	f7ff fe97 	bl	8000434 <dot_LED>
      space_symbol();
 8000706:	f7ff feb9 	bl	800047c <space_symbol>
      dash_LED();
 800070a:	f7ff fea5 	bl	8000458 <dash_LED>
      space_symbol();
 800070e:	f7ff feb5 	bl	800047c <space_symbol>
      dash_LED();
 8000712:	f7ff fea1 	bl	8000458 <dash_LED>
      space_symbol();
 8000716:	f7ff feb1 	bl	800047c <space_symbol>
      dash_LED();
 800071a:	f7ff fe9d 	bl	8000458 <dash_LED>
      break;
 800071e:	e17d      	b.n	8000a1c <output_morse_code+0x570>
    case 'k':
      dash_LED();
 8000720:	f7ff fe9a 	bl	8000458 <dash_LED>
      space_symbol();
 8000724:	f7ff feaa 	bl	800047c <space_symbol>
      dot_LED();
 8000728:	f7ff fe84 	bl	8000434 <dot_LED>
      space_symbol();
 800072c:	f7ff fea6 	bl	800047c <space_symbol>
      dash_LED();
 8000730:	f7ff fe92 	bl	8000458 <dash_LED>
      break;
 8000734:	e172      	b.n	8000a1c <output_morse_code+0x570>
    case 'l':
      dot_LED();
 8000736:	f7ff fe7d 	bl	8000434 <dot_LED>
      space_symbol();
 800073a:	f7ff fe9f 	bl	800047c <space_symbol>
      dash_LED();
 800073e:	f7ff fe8b 	bl	8000458 <dash_LED>
      space_symbol();
 8000742:	f7ff fe9b 	bl	800047c <space_symbol>
      dot_LED();
 8000746:	f7ff fe75 	bl	8000434 <dot_LED>
      space_symbol();
 800074a:	f7ff fe97 	bl	800047c <space_symbol>
      dot_LED();
 800074e:	f7ff fe71 	bl	8000434 <dot_LED>
      break;
 8000752:	e163      	b.n	8000a1c <output_morse_code+0x570>
    case 'm':
      dash_LED();
 8000754:	f7ff fe80 	bl	8000458 <dash_LED>
      space_symbol();
 8000758:	f7ff fe90 	bl	800047c <space_symbol>
      dash_LED();
 800075c:	f7ff fe7c 	bl	8000458 <dash_LED>
      break;
 8000760:	e15c      	b.n	8000a1c <output_morse_code+0x570>
    case 'n':
      dash_LED();
 8000762:	f7ff fe79 	bl	8000458 <dash_LED>
      space_symbol();
 8000766:	f7ff fe89 	bl	800047c <space_symbol>
      dot_LED();
 800076a:	f7ff fe63 	bl	8000434 <dot_LED>
      break;
 800076e:	e155      	b.n	8000a1c <output_morse_code+0x570>
    case 'o':
      dash_LED();
 8000770:	f7ff fe72 	bl	8000458 <dash_LED>
      space_symbol();
 8000774:	f7ff fe82 	bl	800047c <space_symbol>
      dash_LED();
 8000778:	f7ff fe6e 	bl	8000458 <dash_LED>
      space_symbol();
 800077c:	f7ff fe7e 	bl	800047c <space_symbol>
      dash_LED();
 8000780:	f7ff fe6a 	bl	8000458 <dash_LED>
      break;
 8000784:	e14a      	b.n	8000a1c <output_morse_code+0x570>
    case 'p':
      dot_LED();
 8000786:	f7ff fe55 	bl	8000434 <dot_LED>
      space_symbol();
 800078a:	f7ff fe77 	bl	800047c <space_symbol>
      dash_LED();
 800078e:	f7ff fe63 	bl	8000458 <dash_LED>
      space_symbol();
 8000792:	f7ff fe73 	bl	800047c <space_symbol>
      dash_LED();
 8000796:	f7ff fe5f 	bl	8000458 <dash_LED>
      space_symbol();
 800079a:	f7ff fe6f 	bl	800047c <space_symbol>
      dot_LED();
 800079e:	f7ff fe49 	bl	8000434 <dot_LED>
      break;
 80007a2:	e13b      	b.n	8000a1c <output_morse_code+0x570>
    case 'q':
      dash_LED();
 80007a4:	f7ff fe58 	bl	8000458 <dash_LED>
      space_symbol();
 80007a8:	f7ff fe68 	bl	800047c <space_symbol>
      dash_LED();
 80007ac:	f7ff fe54 	bl	8000458 <dash_LED>
      space_symbol();
 80007b0:	f7ff fe64 	bl	800047c <space_symbol>
      dot_LED();
 80007b4:	f7ff fe3e 	bl	8000434 <dot_LED>
      space_symbol();
 80007b8:	f7ff fe60 	bl	800047c <space_symbol>
      dash_LED();
 80007bc:	f7ff fe4c 	bl	8000458 <dash_LED>
      break;
 80007c0:	e12c      	b.n	8000a1c <output_morse_code+0x570>
    case 'r':
      dot_LED();
 80007c2:	f7ff fe37 	bl	8000434 <dot_LED>
      space_symbol();
 80007c6:	f7ff fe59 	bl	800047c <space_symbol>
      dash_LED();
 80007ca:	f7ff fe45 	bl	8000458 <dash_LED>
      space_symbol();
 80007ce:	f7ff fe55 	bl	800047c <space_symbol>
      dot_LED();
 80007d2:	f7ff fe2f 	bl	8000434 <dot_LED>
      break;
 80007d6:	e121      	b.n	8000a1c <output_morse_code+0x570>
    case 's':
      dot_LED();
 80007d8:	f7ff fe2c 	bl	8000434 <dot_LED>
      space_symbol();
 80007dc:	f7ff fe4e 	bl	800047c <space_symbol>
      dot_LED();
 80007e0:	f7ff fe28 	bl	8000434 <dot_LED>
      space_symbol();
 80007e4:	f7ff fe4a 	bl	800047c <space_symbol>
      dot_LED();
 80007e8:	f7ff fe24 	bl	8000434 <dot_LED>
      break;
 80007ec:	e116      	b.n	8000a1c <output_morse_code+0x570>
    case 't':
      dash_LED();
 80007ee:	f7ff fe33 	bl	8000458 <dash_LED>
      break;
 80007f2:	e113      	b.n	8000a1c <output_morse_code+0x570>
    case 'u':
      dot_LED();
 80007f4:	f7ff fe1e 	bl	8000434 <dot_LED>
      space_symbol();
 80007f8:	f7ff fe40 	bl	800047c <space_symbol>
      dot_LED();
 80007fc:	f7ff fe1a 	bl	8000434 <dot_LED>
      space_symbol();
 8000800:	f7ff fe3c 	bl	800047c <space_symbol>
      dash_LED();
 8000804:	f7ff fe28 	bl	8000458 <dash_LED>
      break;
 8000808:	e108      	b.n	8000a1c <output_morse_code+0x570>
    case 'v':
      dot_LED();
 800080a:	f7ff fe13 	bl	8000434 <dot_LED>
      space_symbol();
 800080e:	f7ff fe35 	bl	800047c <space_symbol>
      dot_LED();
 8000812:	f7ff fe0f 	bl	8000434 <dot_LED>
      space_symbol();
 8000816:	f7ff fe31 	bl	800047c <space_symbol>
      dot_LED();
 800081a:	f7ff fe0b 	bl	8000434 <dot_LED>
      space_symbol();
 800081e:	f7ff fe2d 	bl	800047c <space_symbol>
      dash_LED();
 8000822:	f7ff fe19 	bl	8000458 <dash_LED>
      break;
 8000826:	e0f9      	b.n	8000a1c <output_morse_code+0x570>
    case 'w':
      dot_LED();
 8000828:	f7ff fe04 	bl	8000434 <dot_LED>
      space_symbol();
 800082c:	f7ff fe26 	bl	800047c <space_symbol>
      dash_LED();
 8000830:	f7ff fe12 	bl	8000458 <dash_LED>
      space_symbol();
 8000834:	f7ff fe22 	bl	800047c <space_symbol>
      dash_LED();
 8000838:	f7ff fe0e 	bl	8000458 <dash_LED>
      break;
 800083c:	e0ee      	b.n	8000a1c <output_morse_code+0x570>
    case 'x':
      dash_LED();
 800083e:	f7ff fe0b 	bl	8000458 <dash_LED>
      space_symbol();
 8000842:	f7ff fe1b 	bl	800047c <space_symbol>
      dot_LED();
 8000846:	f7ff fdf5 	bl	8000434 <dot_LED>
      space_symbol();
 800084a:	f7ff fe17 	bl	800047c <space_symbol>
      dot_LED();
 800084e:	f7ff fdf1 	bl	8000434 <dot_LED>
      space_symbol();
 8000852:	f7ff fe13 	bl	800047c <space_symbol>
      dash_LED();
 8000856:	f7ff fdff 	bl	8000458 <dash_LED>
      break;
 800085a:	e0df      	b.n	8000a1c <output_morse_code+0x570>
    case 'y':
      dash_LED();
 800085c:	f7ff fdfc 	bl	8000458 <dash_LED>
      space_symbol();
 8000860:	f7ff fe0c 	bl	800047c <space_symbol>
      dot_LED();
 8000864:	f7ff fde6 	bl	8000434 <dot_LED>
      space_symbol();
 8000868:	f7ff fe08 	bl	800047c <space_symbol>
      dash_LED();
 800086c:	f7ff fdf4 	bl	8000458 <dash_LED>
      space_symbol();
 8000870:	f7ff fe04 	bl	800047c <space_symbol>
      dash_LED();
 8000874:	f7ff fdf0 	bl	8000458 <dash_LED>
      break;
 8000878:	e0d0      	b.n	8000a1c <output_morse_code+0x570>
    case 'z':
      dash_LED();
 800087a:	f7ff fded 	bl	8000458 <dash_LED>
      space_symbol();
 800087e:	f7ff fdfd 	bl	800047c <space_symbol>
      dash_LED();
 8000882:	f7ff fde9 	bl	8000458 <dash_LED>
      space_symbol();
 8000886:	f7ff fdf9 	bl	800047c <space_symbol>
      dot_LED();
 800088a:	f7ff fdd3 	bl	8000434 <dot_LED>
      space_symbol();
 800088e:	f7ff fdf5 	bl	800047c <space_symbol>
      dot_LED();
 8000892:	f7ff fdcf 	bl	8000434 <dot_LED>
      break;
 8000896:	e0c1      	b.n	8000a1c <output_morse_code+0x570>
    case '0':
      dash_LED();
 8000898:	f7ff fdde 	bl	8000458 <dash_LED>
      space_symbol();
 800089c:	f7ff fdee 	bl	800047c <space_symbol>
      dash_LED();
 80008a0:	f7ff fdda 	bl	8000458 <dash_LED>
      space_symbol();
 80008a4:	f7ff fdea 	bl	800047c <space_symbol>
      dash_LED();
 80008a8:	f7ff fdd6 	bl	8000458 <dash_LED>
      space_symbol();
 80008ac:	f7ff fde6 	bl	800047c <space_symbol>
      dash_LED();
 80008b0:	f7ff fdd2 	bl	8000458 <dash_LED>
      space_symbol();
 80008b4:	f7ff fde2 	bl	800047c <space_symbol>
      dash_LED();
 80008b8:	f7ff fdce 	bl	8000458 <dash_LED>
      break;
 80008bc:	e0ae      	b.n	8000a1c <output_morse_code+0x570>
    case '1':
      dot_LED();
 80008be:	f7ff fdb9 	bl	8000434 <dot_LED>
      space_symbol();
 80008c2:	f7ff fddb 	bl	800047c <space_symbol>
      dash_LED();
 80008c6:	f7ff fdc7 	bl	8000458 <dash_LED>
      space_symbol();
 80008ca:	f7ff fdd7 	bl	800047c <space_symbol>
      dash_LED();
 80008ce:	f7ff fdc3 	bl	8000458 <dash_LED>
      space_symbol();
 80008d2:	f7ff fdd3 	bl	800047c <space_symbol>
      dash_LED();
 80008d6:	f7ff fdbf 	bl	8000458 <dash_LED>
      space_symbol();
 80008da:	f7ff fdcf 	bl	800047c <space_symbol>
      dash_LED();
 80008de:	f7ff fdbb 	bl	8000458 <dash_LED>
      break;
 80008e2:	e09b      	b.n	8000a1c <output_morse_code+0x570>
    case '2':
      dot_LED();
 80008e4:	f7ff fda6 	bl	8000434 <dot_LED>
      space_symbol();
 80008e8:	f7ff fdc8 	bl	800047c <space_symbol>
      dot_LED();
 80008ec:	f7ff fda2 	bl	8000434 <dot_LED>
      space_symbol();
 80008f0:	f7ff fdc4 	bl	800047c <space_symbol>
      dash_LED();
 80008f4:	f7ff fdb0 	bl	8000458 <dash_LED>
      space_symbol();
 80008f8:	f7ff fdc0 	bl	800047c <space_symbol>
      dash_LED();
 80008fc:	f7ff fdac 	bl	8000458 <dash_LED>
      space_symbol();
 8000900:	f7ff fdbc 	bl	800047c <space_symbol>
      dash_LED();
 8000904:	f7ff fda8 	bl	8000458 <dash_LED>
      break;
 8000908:	e088      	b.n	8000a1c <output_morse_code+0x570>
    case '3':
      dot_LED();
 800090a:	f7ff fd93 	bl	8000434 <dot_LED>
      space_symbol();
 800090e:	f7ff fdb5 	bl	800047c <space_symbol>
      dot_LED();
 8000912:	f7ff fd8f 	bl	8000434 <dot_LED>
      space_symbol();
 8000916:	f7ff fdb1 	bl	800047c <space_symbol>
      dot_LED();
 800091a:	f7ff fd8b 	bl	8000434 <dot_LED>
      space_symbol();
 800091e:	f7ff fdad 	bl	800047c <space_symbol>
      dash_LED();
 8000922:	f7ff fd99 	bl	8000458 <dash_LED>
      space_symbol();
 8000926:	f7ff fda9 	bl	800047c <space_symbol>
      dash_LED();
 800092a:	f7ff fd95 	bl	8000458 <dash_LED>
      break;
 800092e:	e075      	b.n	8000a1c <output_morse_code+0x570>
    case '4':
      dot_LED();
 8000930:	f7ff fd80 	bl	8000434 <dot_LED>
      space_symbol();
 8000934:	f7ff fda2 	bl	800047c <space_symbol>
      dot_LED();
 8000938:	f7ff fd7c 	bl	8000434 <dot_LED>
      space_symbol();
 800093c:	f7ff fd9e 	bl	800047c <space_symbol>
      dot_LED();
 8000940:	f7ff fd78 	bl	8000434 <dot_LED>
      space_symbol();
 8000944:	f7ff fd9a 	bl	800047c <space_symbol>
      dot_LED();
 8000948:	f7ff fd74 	bl	8000434 <dot_LED>
      space_symbol();
 800094c:	f7ff fd96 	bl	800047c <space_symbol>
      dash_LED();
 8000950:	f7ff fd82 	bl	8000458 <dash_LED>
      break;
 8000954:	e062      	b.n	8000a1c <output_morse_code+0x570>
    case '5':
      dot_LED();
 8000956:	f7ff fd6d 	bl	8000434 <dot_LED>
      space_symbol();
 800095a:	f7ff fd8f 	bl	800047c <space_symbol>
      dot_LED();
 800095e:	f7ff fd69 	bl	8000434 <dot_LED>
      space_symbol();
 8000962:	f7ff fd8b 	bl	800047c <space_symbol>
      dot_LED();
 8000966:	f7ff fd65 	bl	8000434 <dot_LED>
      space_symbol();
 800096a:	f7ff fd87 	bl	800047c <space_symbol>
      dot_LED();
 800096e:	f7ff fd61 	bl	8000434 <dot_LED>
      space_symbol();
 8000972:	f7ff fd83 	bl	800047c <space_symbol>
      dot_LED();
 8000976:	f7ff fd5d 	bl	8000434 <dot_LED>
      break;
 800097a:	e04f      	b.n	8000a1c <output_morse_code+0x570>
    case '6':
      dash_LED();
 800097c:	f7ff fd6c 	bl	8000458 <dash_LED>
      space_symbol();
 8000980:	f7ff fd7c 	bl	800047c <space_symbol>
      dot_LED();
 8000984:	f7ff fd56 	bl	8000434 <dot_LED>
      space_symbol();
 8000988:	f7ff fd78 	bl	800047c <space_symbol>
      dot_LED();
 800098c:	f7ff fd52 	bl	8000434 <dot_LED>
      space_symbol();
 8000990:	f7ff fd74 	bl	800047c <space_symbol>
      dot_LED();
 8000994:	f7ff fd4e 	bl	8000434 <dot_LED>
      space_symbol();
 8000998:	f7ff fd70 	bl	800047c <space_symbol>
      dot_LED();
 800099c:	f7ff fd4a 	bl	8000434 <dot_LED>
      break;
 80009a0:	e03c      	b.n	8000a1c <output_morse_code+0x570>
    case '7':
      dash_LED();
 80009a2:	f7ff fd59 	bl	8000458 <dash_LED>
      space_symbol();
 80009a6:	f7ff fd69 	bl	800047c <space_symbol>
      dash_LED();
 80009aa:	f7ff fd55 	bl	8000458 <dash_LED>
      space_symbol();
 80009ae:	f7ff fd65 	bl	800047c <space_symbol>
      dot_LED();
 80009b2:	f7ff fd3f 	bl	8000434 <dot_LED>
      space_symbol();
 80009b6:	f7ff fd61 	bl	800047c <space_symbol>
      dot_LED();
 80009ba:	f7ff fd3b 	bl	8000434 <dot_LED>
      space_symbol();
 80009be:	f7ff fd5d 	bl	800047c <space_symbol>
      dot_LED();
 80009c2:	f7ff fd37 	bl	8000434 <dot_LED>
      break;
 80009c6:	e029      	b.n	8000a1c <output_morse_code+0x570>
    case '8':
      dash_LED();
 80009c8:	f7ff fd46 	bl	8000458 <dash_LED>
      space_symbol();
 80009cc:	f7ff fd56 	bl	800047c <space_symbol>
      dash_LED();
 80009d0:	f7ff fd42 	bl	8000458 <dash_LED>
      space_symbol();
 80009d4:	f7ff fd52 	bl	800047c <space_symbol>
      dash_LED();
 80009d8:	f7ff fd3e 	bl	8000458 <dash_LED>
      space_symbol();
 80009dc:	f7ff fd4e 	bl	800047c <space_symbol>
      dot_LED();
 80009e0:	f7ff fd28 	bl	8000434 <dot_LED>
      space_symbol();
 80009e4:	f7ff fd4a 	bl	800047c <space_symbol>
      dot_LED();
 80009e8:	f7ff fd24 	bl	8000434 <dot_LED>
      break;
 80009ec:	e016      	b.n	8000a1c <output_morse_code+0x570>
    case '9':
      dash_LED();
 80009ee:	f7ff fd33 	bl	8000458 <dash_LED>
      space_symbol();
 80009f2:	f7ff fd43 	bl	800047c <space_symbol>
      dash_LED();
 80009f6:	f7ff fd2f 	bl	8000458 <dash_LED>
      space_symbol();
 80009fa:	f7ff fd3f 	bl	800047c <space_symbol>
      dash_LED();
 80009fe:	f7ff fd2b 	bl	8000458 <dash_LED>
      space_symbol();
 8000a02:	f7ff fd3b 	bl	800047c <space_symbol>
      dash_LED();
 8000a06:	f7ff fd27 	bl	8000458 <dash_LED>
      space_symbol();
 8000a0a:	f7ff fd37 	bl	800047c <space_symbol>
      dot_LED();
 8000a0e:	f7ff fd11 	bl	8000434 <dot_LED>
      break;
 8000a12:	e003      	b.n	8000a1c <output_morse_code+0x570>
    case ' ':
      space_word();
 8000a14:	f7ff fd41 	bl	800049a <space_word>
      break;
 8000a18:	e000      	b.n	8000a1c <output_morse_code+0x570>
    default:
      break;
 8000a1a:	bf00      	nop
    }
    if (string[i] != ' ' && string[i + 1] != ' ')
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b20      	cmp	r3, #32
 8000a26:	d008      	beq.n	8000a3a <output_morse_code+0x58e>
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	4413      	add	r3, r2
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b20      	cmp	r3, #32
 8000a34:	d001      	beq.n	8000a3a <output_morse_code+0x58e>
    {
      space_letter();
 8000a36:	f7ff fd28 	bl	800048a <space_letter>
    }

    i++;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
  while (string[i] != '\0')
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	f47f ad36 	bne.w	80004ba <output_morse_code+0xe>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop

08000a58 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	70fb      	strb	r3, [r7, #3]
 8000a64:	4613      	mov	r3, r2
 8000a66:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	089b      	lsrs	r3, r3, #2
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3204      	adds	r2, #4
 8000a74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a78:	78fb      	ldrb	r3, [r7, #3]
 8000a7a:	f003 0303 	and.w	r3, r3, #3
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	21f8      	movs	r1, #248	; 0xf8
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	78f9      	ldrb	r1, [r7, #3]
 8000a8a:	0889      	lsrs	r1, r1, #2
 8000a8c:	b2c9      	uxtb	r1, r1
 8000a8e:	4608      	mov	r0, r1
 8000a90:	ea02 0103 	and.w	r1, r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	1d02      	adds	r2, r0, #4
 8000a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3204      	adds	r2, #4
 8000aa8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000aac:	78b9      	ldrb	r1, [r7, #2]
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	f003 0303 	and.w	r3, r3, #3
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	78f9      	ldrb	r1, [r7, #3]
 8000abc:	0889      	lsrs	r1, r1, #2
 8000abe:	b2c9      	uxtb	r1, r1
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	ea42 0103 	orr.w	r1, r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	1d02      	adds	r2, r0, #4
 8000aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	70fb      	strb	r3, [r7, #3]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000aee:	78fb      	ldrb	r3, [r7, #3]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	2103      	movs	r1, #3
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	401a      	ands	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000b04:	78b9      	ldrb	r1, [r7, #2]
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	50004600 	.word	0x50004600

08000b3c <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 8000b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	50004600 	.word	0x50004600

08000b58 <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	b2db      	uxtb	r3, r3
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	50004600 	.word	0x50004600

08000b78 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	2000ffc0 	.word	0x2000ffc0
 8000b9c:	50004600 	.word	0x50004600

08000ba0 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2000ffc0 	.word	0x2000ffc0

08000bb8 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <XMC_SCU_GetMirrorStatus+0x14>)
 8000bbe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	50004000 	.word	0x50004000

08000bd0 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000bd8:	f002 fb84 	bl	80032e4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <XMC_SCU_lDelay+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <XMC_SCU_lDelay+0x44>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	0c9a      	lsrs	r2, r3, #18
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	fb02 f303 	mul.w	r3, r2, r3
 8000bee:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	e003      	b.n	8000bfe <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000bf6:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d3f7      	bcc.n	8000bf6 <XMC_SCU_lDelay+0x26>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000ffc0 	.word	0x2000ffc0
 8000c14:	431bde83 	.word	0x431bde83

08000c18 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	4904      	ldr	r1, [pc, #16]	; (8000c38 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	608b      	str	r3, [r1, #8]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	50004074 	.word	0x50004074

08000c3c <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	4904      	ldr	r1, [pc, #16]	; (8000c60 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8000c4e:	4013      	ands	r3, r2
 8000c50:	608b      	str	r3, [r1, #8]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	50004074 	.word	0x50004074

08000c64 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	4904      	ldr	r1, [pc, #16]	; (8000c84 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	610b      	str	r3, [r1, #16]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	50004074 	.word	0x50004074

08000c88 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	50004074 	.word	0x50004074

08000ca0 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60d3      	str	r3, [r2, #12]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	50004074 	.word	0x50004074

08000cc0 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <XMC_SCU_GetBootMode+0x18>)
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	50004000 	.word	0x50004000

08000cdc <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <XMC_SCU_SetBootMode+0x1c>)
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	6113      	str	r3, [r2, #16]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	50004000 	.word	0x50004000

08000cfc <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 8000d04:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <XMC_SCU_ReadGPR+0x20>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	330a      	adds	r3, #10
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	685b      	ldr	r3, [r3, #4]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	50004000 	.word	0x50004000

08000d20 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 8000d2a:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <XMC_SCU_WriteGPR+0x24>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	330a      	adds	r3, #10
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	605a      	str	r2, [r3, #4]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	50004000 	.word	0x50004000

08000d48 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3328      	adds	r3, #40	; 0x28
 8000d58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	4905      	ldr	r1, [pc, #20]	; (8000d7c <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8000d66:	431a      	orrs	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3328      	adds	r3, #40	; 0x28
 8000d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	50004000 	.word	0x50004000

08000d80 <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3328      	adds	r3, #40	; 0x28
 8000d90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d94:	2101      	movs	r1, #1
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4906      	ldr	r1, [pc, #24]	; (8000db8 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8000da0:	401a      	ands	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3328      	adds	r3, #40	; 0x28
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	50004000 	.word	0x50004000

08000dbc <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8000dd2:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000dd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	50004000 	.word	0x50004000

08000dec <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <XMC_SCU_EnableTemperatureSensor+0x20>)
 8000df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <XMC_SCU_EnableTemperatureSensor+0x20>)
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	50004000 	.word	0x50004000

08000e10 <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <XMC_SCU_DisableTemperatureSensor+0x20>)
 8000e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <XMC_SCU_DisableTemperatureSensor+0x20>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	50004000 	.word	0x50004000

08000e34 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 8000e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf0c      	ite	eq
 8000e46:	2301      	moveq	r3, #1
 8000e48:	2300      	movne	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	50004000 	.word	0x50004000

08000e5c <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <XMC_SCU_IsTemperatureSensorReady+0x24>)
 8000e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bf14      	ite	ne
 8000e6e:	2301      	movne	r3, #1
 8000e70:	2300      	moveq	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	50004000 	.word	0x50004000

08000e84 <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8000e8e:	f7ff ffd1 	bl	8000e34 <XMC_SCU_IsTemperatureSensorEnabled>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f083 0301 	eor.w	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8000ea2:	f000 f831 	bl	8000f08 <XMC_SCU_IsTemperatureSensorBusy>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 8000eac:	2302      	movs	r3, #2
 8000eae:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8000eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	50004000 	.word	0x50004000

08000ed0 <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8000ed6:	f7ff ffad 	bl	8000e34 <XMC_SCU_IsTemperatureSensorEnabled>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f083 0301 	eor.w	r3, r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 8000ee6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	e005      	b.n	8000efa <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <XMC_SCU_GetTemperatureMeasurement+0x34>)
 8000ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ef8:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 8000efa:	687b      	ldr	r3, [r7, #4]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	50004000 	.word	0x50004000

08000f08 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 8000f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	50004000 	.word	0x50004000

08000f30 <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	041b      	lsls	r3, r3, #16
 8000f3e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f42:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8000f54:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8000f5c:	bf00      	nop
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8000f60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f8      	bne.n	8000f5e <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	50004000 	.word	0x50004000

08000f7c <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	041b      	lsls	r3, r3, #16
 8000f88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f8c:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8000f9e:	bf00      	nop
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8000fa2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000fa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f8      	bne.n	8000fa0 <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8000fb0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	50004000 	.word	0x50004000

08000fc4 <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 faf1 	bl	80015b4 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000fd2:	f000 fd7f 	bl	8001ad4 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	79db      	ldrb	r3, [r3, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00a      	beq.n	8000ff4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000fde:	f000 ff77 	bl	8001ed0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000fe2:	bf00      	nop
 8000fe4:	f000 ff62 	bl	8001eac <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f083 0301 	eor.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f7      	bne.n	8000fe4 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7a5b      	ldrb	r3, [r3, #9]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fb6f 	bl	80016dc <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000ffe:	bf00      	nop
 8001000:	f7ff fdda 	bl	8000bb8 <XMC_SCU_GetMirrorStatus>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1fa      	bne.n	8001000 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7a1b      	ldrb	r3, [r3, #8]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fd0c 	bl	8001a2c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7c1b      	ldrb	r3, [r3, #16]
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fb7f 	bl	800171c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7c5b      	ldrb	r3, [r3, #17]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fba6 	bl	8001774 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7c9b      	ldrb	r3, [r3, #18]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fb8b 	bl	8001748 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7cdb      	ldrb	r3, [r3, #19]
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fbb2 	bl	80017a0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	799b      	ldrb	r3, [r3, #6]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00a      	beq.n	800105a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8001044:	f000 ffd8 	bl	8001ff8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8001048:	bf00      	nop
 800104a:	f000 fffd 	bl	8002048 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800104e:	4603      	mov	r3, r0
 8001050:	f083 0301 	eor.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f7      	bne.n	800104a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	78db      	ldrb	r3, [r3, #3]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8001062:	f001 f855 	bl	8002110 <XMC_SCU_CLOCK_DisableSystemPll>
 8001066:	e011      	b.n	800108c <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8001068:	f001 f840 	bl	80020ec <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	8898      	ldrh	r0, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001078:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800107e:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	4623      	mov	r3, r4
 8001088:	f001 f854 	bl	8002134 <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001094:	d103      	bne.n	800109e <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8001096:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800109a:	f000 fa8b 	bl	80015b4 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800109e:	f002 f921 	bl	80032e4 <SystemCoreClockUpdate>
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
	...

080010ac <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <XMC_SCU_TRAP_Enable+0x24>)
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	4904      	ldr	r1, [pc, #16]	; (80010d0 <XMC_SCU_TRAP_Enable+0x24>)
 80010be:	4013      	ands	r3, r2
 80010c0:	608b      	str	r3, [r1, #8]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	50004160 	.word	0x50004160

080010d4 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <XMC_SCU_TRAP_Disable+0x20>)
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	4904      	ldr	r1, [pc, #16]	; (80010f4 <XMC_SCU_TRAP_Disable+0x20>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	608b      	str	r3, [r1, #8]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	50004160 	.word	0x50004160

080010f8 <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <XMC_SCU_TRAP_GetStatus+0x14>)
 80010fe:	685b      	ldr	r3, [r3, #4]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	50004160 	.word	0x50004160

08001110 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <XMC_SCU_TRAP_Trigger+0x1c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6113      	str	r3, [r2, #16]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	50004160 	.word	0x50004160

08001130 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <XMC_SCU_TRAP_ClearStatus+0x1c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60d3      	str	r3, [r2, #12]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	50004160 	.word	0x50004160

08001150 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <XMC_SCU_PARITY_ClearStatus+0x20>)
 800115a:	695a      	ldr	r2, [r3, #20]
 800115c:	4904      	ldr	r1, [pc, #16]	; (8001170 <XMC_SCU_PARITY_ClearStatus+0x20>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4313      	orrs	r3, r2
 8001162:	614b      	str	r3, [r1, #20]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	5000413c 	.word	0x5000413c

08001174 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <XMC_SCU_PARITY_GetStatus+0x14>)
 800117a:	695b      	ldr	r3, [r3, #20]
} 
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	5000413c 	.word	0x5000413c

0800118c <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <XMC_SCU_PARITY_Enable+0x20>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4904      	ldr	r1, [pc, #16]	; (80011ac <XMC_SCU_PARITY_Enable+0x20>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	5000413c 	.word	0x5000413c

080011b0 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <XMC_SCU_PARITY_Disable+0x24>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	43db      	mvns	r3, r3
 80011c0:	4904      	ldr	r1, [pc, #16]	; (80011d4 <XMC_SCU_PARITY_Disable+0x24>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	5000413c 	.word	0x5000413c

080011d8 <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	4904      	ldr	r1, [pc, #16]	; (80011f8 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	608b      	str	r3, [r1, #8]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	5000413c 	.word	0x5000413c

080011fc <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	43db      	mvns	r3, r3
 800120c:	4904      	ldr	r1, [pc, #16]	; (8001220 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 800120e:	4013      	ands	r3, r2
 8001210:	608b      	str	r3, [r1, #8]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	5000413c 	.word	0x5000413c

08001224 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 800122e:	695a      	ldr	r2, [r3, #20]
 8001230:	4904      	ldr	r1, [pc, #16]	; (8001244 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4313      	orrs	r3, r2
 8001236:	614b      	str	r3, [r1, #20]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	50004074 	.word	0x50004074

08001248 <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8001252:	695a      	ldr	r2, [r3, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	43db      	mvns	r3, r3
 8001258:	4904      	ldr	r1, [pc, #16]	; (800126c <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 800125a:	4013      	ands	r3, r2
 800125c:	614b      	str	r3, [r1, #20]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	50004074 	.word	0x50004074

08001270 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	0f1b      	lsrs	r3, r3, #28
 800127c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001284:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	461a      	mov	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 8001294:	4413      	add	r3, r2
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	601a      	str	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	50004410 	.word	0x50004410

080012ac <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	0f1b      	lsrs	r3, r3, #28
 80012b8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80012c0:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 80012d0:	4413      	add	r3, r2
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	601a      	str	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	50004414 	.word	0x50004414

080012e8 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	0f1b      	lsrs	r3, r3, #28
 80012f4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80012fc:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	461a      	mov	r2, r3
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 800130c:	4413      	add	r3, r2
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf14      	ite	ne
 8001318:	2301      	movne	r3, #1
 800131a:	2300      	moveq	r3, #0
 800131c:	b2db      	uxtb	r3, r3
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	5000440c 	.word	0x5000440c

08001330 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 8001336:	f000 f839 	bl	80013ac <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 800133a:	60f8      	str	r0, [r7, #12]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d009      	beq.n	800135c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001350:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	e01f      	b.n	800139c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	0e1b      	lsrs	r3, r3, #24
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3301      	adds	r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001374:	3301      	adds	r3, #1
 8001376:	607b      	str	r3, [r7, #4]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	0c1b      	lsrs	r3, r3, #16
 800137e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001382:	3301      	adds	r3, #1
 8001384:	603b      	str	r3, [r7, #0]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	fb02 f203 	mul.w	r2, r2, r3
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	6839      	ldr	r1, [r7, #0]
 8001392:	fb01 f303 	mul.w	r3, r1, r3
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	60fb      	str	r3, [r7, #12]
  }

  return (clock_frequency);
 800139c:	68fb      	ldr	r3, [r7, #12]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	50004710 	.word	0x50004710

080013ac <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d103      	bne.n	80013c6 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 80013be:	f001 fffb 	bl	80033b8 <OSCHP_GetFrequency>
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	e001      	b.n	80013ca <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 80013c8:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 80013ca:	687b      	ldr	r3, [r7, #4]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	50004710 	.word	0x50004710
 80013d8:	016e3600 	.word	0x016e3600

080013dc <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 80013e2:	f001 ffe9 	bl	80033b8 <OSCHP_GetFrequency>
 80013e6:	60f8      	str	r0, [r7, #12]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d116      	bne.n	8001422 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013fe:	3301      	adds	r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	0e1b      	lsrs	r3, r3, #24
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	3301      	adds	r3, #1
 800140e:	607b      	str	r3, [r7, #4]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	fb02 f203 	mul.w	r2, r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001420:	60fb      	str	r3, [r7, #12]
  }
  return (clock_frequency);
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	50004710 	.word	0x50004710

08001430 <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 800143a:	f7ff fb9d 	bl	8000b78 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 800143e:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	50004600 	.word	0x50004600

0800145c <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 8001466:	f7ff fb5b 	bl	8000b20 <XMC_SCU_CLOCK_GetUsbClockSource>
 800146a:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001472:	d103      	bne.n	800147c <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001474:	f7ff ff5c 	bl	8001330 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	e005      	b.n	8001488 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001482:	f7ff ffab 	bl	80013dc <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001486:	6078      	str	r0, [r7, #4]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8001490:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	50004600 	.word	0x50004600

080014a4 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80014aa:	f7ff ff41 	bl	8001330 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80014ae:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 80014b8:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	50004600 	.word	0x50004600

080014cc <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 80014d6:	f7ff fb31 	bl	8000b3c <XMC_SCU_CLOCK_GetWdtClockSource>
 80014da:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014e2:	d103      	bne.n	80014ec <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80014e4:	f7ff ff24 	bl	8001330 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	e00c      	b.n	8001506 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	e006      	b.n	8001506 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fe:	d102      	bne.n	8001506 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 8001500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001504:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 800150c:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	016e3600 	.word	0x016e3600
 8001520:	50004600 	.word	0x50004600

08001524 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 800152e:	f7ff fb13 	bl	8000b58 <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 8001532:	4603      	mov	r3, r0
 8001534:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d10d      	bne.n	8001558 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 800153c:	f7ff fef8 	bl	8001330 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001540:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	0c1b      	lsrs	r3, r3, #16
 8001548:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 800154c:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	fbb2 f3f3 	udiv	r3, r2, r3
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	e016      	b.n	8001586 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d103      	bne.n	8001566 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 800155e:	f7ff fb0b 	bl	8000b78 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	e00f      	b.n	8001586 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d10c      	bne.n	8001586 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 800156c:	f7ff ff36 	bl	80013dc <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001570:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	0c1b      	lsrs	r3, r3, #16
 8001578:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 800157c:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	fbb2 f3f3 	udiv	r3, r2, r3
 8001584:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 8001586:	687b      	ldr	r3, [r7, #4]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	50004600 	.word	0x50004600

08001594 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001598:	f7ff fb02 	bl	8000ba0 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 800159c:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80015a6:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	50004600 	.word	0x50004600

080015b4 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80015c4:	4904      	ldr	r1, [pc, #16]	; (80015d8 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	50004600 	.word	0x50004600

080015dc <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80015ec:	4904      	ldr	r1, [pc, #16]	; (8001600 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	50004600 	.word	0x50004600

08001604 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001614:	4904      	ldr	r1, [pc, #16]	; (8001628 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4313      	orrs	r3, r2
 800161a:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	50004600 	.word	0x50004600

0800162c <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 800163e:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001640:	4904      	ldr	r1, [pc, #16]	; (8001654 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001642:	4313      	orrs	r3, r2
 8001644:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	50004600 	.word	0x50004600

08001658 <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d108      	bne.n	800167a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 800166e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 8001678:	e007      	b.n	800168a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	4a06      	ldr	r2, [pc, #24]	; (8001698 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	60d3      	str	r3, [r2, #12]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	50004710 	.word	0x50004710

0800169c <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80016a6:	bf00      	nop
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80016aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f8      	bne.n	80016a8 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80016be:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80016c0:	4905      	ldr	r1, [pc, #20]	; (80016d8 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	60cb      	str	r3, [r1, #12]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	50004000 	.word	0x50004000
 80016d8:	50004300 	.word	0x50004300

080016dc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80016e6:	bf00      	nop
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80016ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f8      	bne.n	80016e8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8001700:	4905      	ldr	r1, [pc, #20]	; (8001718 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 8001702:	4313      	orrs	r3, r2
 8001704:	60cb      	str	r3, [r1, #12]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	50004000 	.word	0x50004000
 8001718:	50004300 	.word	0x50004300

0800171c <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001730:	4904      	ldr	r1, [pc, #16]	; (8001744 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8001732:	4313      	orrs	r3, r2
 8001734:	60cb      	str	r3, [r1, #12]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	50004600 	.word	0x50004600

08001748 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800175c:	4904      	ldr	r1, [pc, #16]	; (8001770 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 800175e:	4313      	orrs	r3, r2
 8001760:	620b      	str	r3, [r1, #32]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	50004600 	.word	0x50004600

08001774 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001788:	4904      	ldr	r1, [pc, #16]	; (800179c <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 800178a:	4313      	orrs	r3, r2
 800178c:	610b      	str	r3, [r1, #16]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	50004600 	.word	0x50004600

080017a0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80017b4:	4904      	ldr	r1, [pc, #16]	; (80017c8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	614b      	str	r3, [r1, #20]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	50004600 	.word	0x50004600

080017cc <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80017e0:	4904      	ldr	r1, [pc, #16]	; (80017f4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	618b      	str	r3, [r1, #24]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	50004600 	.word	0x50004600

080017f8 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800180c:	4904      	ldr	r1, [pc, #16]	; (8001820 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 800180e:	4313      	orrs	r3, r2
 8001810:	61cb      	str	r3, [r1, #28]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	50004600 	.word	0x50004600

08001824 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001838:	4904      	ldr	r1, [pc, #16]	; (800184c <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 800183a:	4313      	orrs	r3, r2
 800183c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	50004600 	.word	0x50004600

08001850 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	3a01      	subs	r2, #1
 8001868:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 800186a:	4904      	ldr	r1, [pc, #16]	; (800187c <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 800186c:	4313      	orrs	r3, r2
 800186e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	50004600 	.word	0x50004600

08001880 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	6053      	str	r3, [r2, #4]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	50004600 	.word	0x50004600

080018a0 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <XMC_SCU_CLOCK_DisableClock+0x1c>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	6093      	str	r3, [r2, #8]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	50004600 	.word	0x50004600

080018c0 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf14      	ite	ne
 80018d6:	2301      	movne	r3, #1
 80018d8:	2300      	moveq	r3, #0
 80018da:	b2db      	uxtb	r3, r3
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	50004600 	.word	0x50004600

080018ec <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018fe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001918 <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 8001902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001906:	ee17 3a90 	vmov	r3, s15
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	50004200 	.word	0x50004200
 8001918:	3bbe0ded 	.word	0x3bbe0ded

0800191c <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	b2db      	uxtb	r3, r3
 8001928:	ee07 3a90 	vmov	s15, r3
 800192c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001930:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800194c <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 8001934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001938:	ee17 3a90 	vmov	r3, s15
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	50004200 	.word	0x50004200
 800194c:	3cb851ec 	.word	0x3cb851ec

08001950 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	4a05      	ldr	r2, [pc, #20]	; (8001970 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 800195a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195e:	f023 0302 	bic.w	r3, r3, #2
 8001962:	6153      	str	r3, [r2, #20]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	50004710 	.word	0x50004710

08001974 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	4a05      	ldr	r2, [pc, #20]	; (8001994 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 800197e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	6153      	str	r3, [r2, #20]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	50004710 	.word	0x50004710

08001998 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80019b4:	f043 0310 	orr.w	r3, r3, #16
 80019b8:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	3b01      	subs	r3, #1
 80019be:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80019c6:	4911      	ldr	r1, [pc, #68]	; (8001a0c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80019d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d6:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80019de:	f023 0310 	bic.w	r3, r3, #16
 80019e2:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80019ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ee:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80019f0:	bf00      	nop
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f9      	beq.n	80019f2 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	50004710 	.word	0x50004710

08001a10 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 8001a18:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	50004710 	.word	0x50004710
 8001a28:	00010003 	.word	0x00010003

08001a2c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a40:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d10e      	bne.n	8001a66 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001a4e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a52:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8001a54:	2064      	movs	r0, #100	; 0x64
 8001a56:	f7ff f8bb 	bl	8000bd0 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001a60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a64:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8001a66:	2064      	movs	r0, #100	; 0x64
 8001a68:	f7ff f8b2 	bl	8000bd0 <XMC_SCU_lDelay>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	50004710 	.word	0x50004710

08001a78 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <XMC_SCU_POWER_EnableUsb+0x18>)
 8001a7e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a82:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	50004200 	.word	0x50004200

08001a94 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <XMC_SCU_POWER_DisableUsb+0x18>)
 8001a9a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a9e:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	50004200 	.word	0x50004200

08001ab0 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf14      	ite	ne
 8001ac0:	2301      	movne	r3, #1
 8001ac2:	2300      	moveq	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	50004710 	.word	0x50004710

08001ad4 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001aea:	bf00      	nop
 8001aec:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f9      	beq.n	8001aec <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00a      	beq.n	8001b1a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0a:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8001b0c:	bf00      	nop
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f9      	bne.n	8001b0e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	50004200 	.word	0x50004200
 8001b28:	50004400 	.word	0x50004400

08001b2c <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 8001b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3c:	605a      	str	r2, [r3, #4]
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	50004200 	.word	0x50004200
 8001b4c:	50004400 	.word	0x50004400

08001b50 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8001b70:	2300      	movs	r3, #0
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	50004200 	.word	0x50004200
 8001b88:	50004400 	.word	0x50004400

08001b8c <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8001b90:	bf00      	nop
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 8001b94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f8      	bne.n	8001b92 <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	6153      	str	r3, [r2, #20]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	50004000 	.word	0x50004000
 8001bbc:	50004300 	.word	0x50004300

08001bc0 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8001bc4:	bf00      	nop
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 8001bc8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f8      	bne.n	8001bc6 <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6153      	str	r3, [r2, #20]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	50004000 	.word	0x50004000
 8001bf0:	50004300 	.word	0x50004300

08001bf4 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8001bfc:	bf00      	nop
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 8001c00:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f8      	bne.n	8001bfe <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 8001c0c:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <XMC_SCU_HIB_ClearEventStatus+0x30>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6053      	str	r3, [r2, #4]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	50004000 	.word	0x50004000
 8001c24:	50004300 	.word	0x50004300

08001c28 <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8001c30:	bf00      	nop
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <XMC_SCU_HIB_TriggerEvent+0x2c>)
 8001c34:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f8      	bne.n	8001c32 <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8001c40:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <XMC_SCU_HIB_TriggerEvent+0x30>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6093      	str	r3, [r2, #8]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	50004000 	.word	0x50004000
 8001c58:	50004300 	.word	0x50004300

08001c5c <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001c64:	bf00      	nop
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <XMC_SCU_HIB_EnableEvent+0x30>)
 8001c68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f8      	bne.n	8001c66 <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <XMC_SCU_HIB_EnableEvent+0x34>)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4905      	ldr	r1, [pc, #20]	; (8001c90 <XMC_SCU_HIB_EnableEvent+0x34>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	50004000 	.word	0x50004000
 8001c90:	50004300 	.word	0x50004300

08001c94 <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001c9c:	bf00      	nop
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <XMC_SCU_HIB_DisableEvent+0x34>)
 8001ca0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f8      	bne.n	8001c9e <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <XMC_SCU_HIB_DisableEvent+0x38>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	43d2      	mvns	r2, r2
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <XMC_SCU_HIB_DisableEvent+0x38>)
 8001cb8:	400b      	ands	r3, r1
 8001cba:	60d3      	str	r3, [r2, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	50004000 	.word	0x50004000
 8001ccc:	50004300 	.word	0x50004300

08001cd0 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001cd4:	bf00      	nop
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 8001cd8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f8      	bne.n	8001cd6 <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8001cea:	f043 0310 	orr.w	r3, r3, #16
 8001cee:	60d3      	str	r3, [r2, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	50004000 	.word	0x50004000
 8001d00:	50004300 	.word	0x50004300

08001d04 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 8001d14:	f7ff ffdc 	bl	8001cd0 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001d2a:	bf00      	nop
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 8001d2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f8      	bne.n	8001d2c <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d106      	bne.n	8001d4e <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 8001d4c:	e005      	b.n	8001d5a <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	4a06      	ldr	r2, [pc, #24]	; (8001d6c <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d58:	60d3      	str	r3, [r2, #12]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	50004000 	.word	0x50004000
 8001d6c:	50004300 	.word	0x50004300

08001d70 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001d7c:	bf00      	nop
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <XMC_SCU_HIB_SetPinMode+0x4c>)
 8001d80:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f8      	bne.n	8001d7e <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <XMC_SCU_HIB_SetPinMode+0x50>)
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8001daa:	4905      	ldr	r1, [pc, #20]	; (8001dc0 <XMC_SCU_HIB_SetPinMode+0x50>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	50004000 	.word	0x50004000
 8001dc0:	50004300 	.word	0x50004300

08001dc4 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	460a      	mov	r2, r1
 8001dce:	71fb      	strb	r3, [r7, #7]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001dd4:	bf00      	nop
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 8001dd8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f8      	bne.n	8001dd6 <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	4013      	ands	r3, r2
                        (level << pin);
 8001df6:	88b9      	ldrh	r1, [r7, #4]
 8001df8:	79fa      	ldrb	r2, [r7, #7]
 8001dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfe:	4611      	mov	r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8001e00:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8001e02:	430b      	orrs	r3, r1
 8001e04:	60d3      	str	r3, [r2, #12]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	50004000 	.word	0x50004000
 8001e18:	50004300 	.word	0x50004300

08001e1c <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e26:	bf00      	nop
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <XMC_SCU_HIB_SetInput0+0x48>)
 8001e2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f8      	bne.n	8001e28 <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d106      	bne.n	8001e4a <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e46:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 8001e48:	e005      	b.n	8001e56 <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	4a06      	ldr	r2, [pc, #24]	; (8001e68 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001e50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e54:	60d3      	str	r3, [r2, #12]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	50004000 	.word	0x50004000
 8001e68:	50004300 	.word	0x50004300

08001e6c <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e76:	bf00      	nop
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <XMC_SCU_HIB_SetSR0Input+0x38>)
 8001e7a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f8      	bne.n	8001e78 <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	4905      	ldr	r1, [pc, #20]	; (8001ea8 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	50004000 	.word	0x50004000
 8001ea8:	50004300 	.word	0x50004300

08001eac <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	50004300 	.word	0x50004300

08001ed0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8001ed4:	bf00      	nop
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8001ed8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f8      	bne.n	8001ed6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001eea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001eee:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001ef0:	bf00      	nop
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8001ef4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f8      	bne.n	8001ef2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8001f0c:	bf00      	nop
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8001f10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f8      	bne.n	8001f0e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001f1e:	2208      	movs	r2, #8
 8001f20:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8001f22:	bf00      	nop
 8001f24:	f7fe fe48 	bl	8000bb8 <XMC_SCU_GetMirrorStatus>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1fa      	bne.n	8001f24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	50004000 	.word	0x50004000
 8001f38:	50004300 	.word	0x50004300

08001f3c <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8001f40:	bf00      	nop
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 8001f44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f8      	bne.n	8001f42 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8001f56:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001f5a:	61d3      	str	r3, [r2, #28]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	50004000 	.word	0x50004000
 8001f6c:	50004300 	.word	0x50004300

08001f70 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8001f74:	bf00      	nop
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 8001f78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f8      	bne.n	8001f76 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8001f8a:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8001f8e:	61d3      	str	r3, [r2, #28]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	50004000 	.word	0x50004000
 8001fa0:	50004300 	.word	0x50004300

08001fa4 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8001fa8:	bf00      	nop
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8001fac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f8      	bne.n	8001faa <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 8001fc0:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 8001fc2:	f043 0320 	orr.w	r3, r3, #32
 8001fc6:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	50004000 	.word	0x50004000
 8001fd8:	50004300 	.word	0x50004300

08001fdc <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	50004300 	.word	0x50004300

08001ff8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8001ff8:	b598      	push	{r3, r4, r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a0e      	ldr	r2, [pc, #56]	; (800203c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8002010:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8002014:	f001 f9d0 	bl	80033b8 <OSCHP_GetFrequency>
 8002018:	4602      	mov	r2, r0
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 800201c:	fba3 2302 	umull	r2, r3, r3, r2
 8002020:	0d1b      	lsrs	r3, r3, #20
 8002022:	3b01      	subs	r3, #1
 8002024:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002026:	4a06      	ldr	r2, [pc, #24]	; (8002040 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8002028:	4323      	orrs	r3, r4
 800202a:	6053      	str	r3, [r2, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a02      	ldr	r2, [pc, #8]	; (800203c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002032:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002036:	6053      	str	r3, [r2, #4]
}
 8002038:	bf00      	nop
 800203a:	bd98      	pop	{r3, r4, r7, pc}
 800203c:	50004710 	.word	0x50004710
 8002040:	50004700 	.word	0x50004700
 8002044:	6b5fca6b 	.word	0x6b5fca6b

08002048 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002054:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002058:	bf0c      	ite	eq
 800205a:	2301      	moveq	r3, #1
 800205c:	2300      	movne	r3, #0
 800205e:	b2db      	uxtb	r3, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	50004710 	.word	0x50004710

08002070 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 800207a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800207e:	6053      	str	r3, [r2, #4]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	50004700 	.word	0x50004700

08002090 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6053      	str	r3, [r2, #4]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	50004700 	.word	0x50004700

080020b0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6053      	str	r3, [r2, #4]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	50004700 	.word	0x50004700

080020d0 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0301 	and.w	r3, r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	50004700 	.word	0x50004700

080020ec <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a05      	ldr	r2, [pc, #20]	; (800210c <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80020f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fa:	f023 0302 	bic.w	r3, r3, #2
 80020fe:	6053      	str	r3, [r2, #4]
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	50004710 	.word	0x50004710

08002110 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a05      	ldr	r2, [pc, #20]	; (8002130 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 800211a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	6053      	str	r3, [r2, #4]
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	50004710 	.word	0x50004710

08002134 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60ba      	str	r2, [r7, #8]
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	4603      	mov	r3, r0
 8002140:	81fb      	strh	r3, [r7, #14]
 8002142:	460b      	mov	r3, r1
 8002144:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8002146:	89fb      	ldrh	r3, [r7, #14]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fa85 	bl	8001658 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 800214e:	7b7b      	ldrb	r3, [r7, #13]
 8002150:	2b01      	cmp	r3, #1
 8002152:	f040 8084 	bne.w	800225e <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8002156:	89fb      	ldrh	r3, [r7, #14]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 800215c:	f001 f92c 	bl	80033b8 <OSCHP_GetFrequency>
 8002160:	4602      	mov	r2, r0
 8002162:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8002164:	fba3 2302 	umull	r2, r3, r3, r2
 8002168:	0c9b      	lsrs	r3, r3, #18
 800216a:	059b      	lsls	r3, r3, #22
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e002      	b.n	8002176 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8002170:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002174:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	fb02 f203 	mul.w	r2, r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	4a43      	ldr	r2, [pc, #268]	; (8002298 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	0d9b      	lsrs	r3, r3, #22
 8002192:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002194:	4b41      	ldr	r3, [pc, #260]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a40      	ldr	r2, [pc, #256]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 80021a0:	4b3e      	ldr	r3, [pc, #248]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a3d      	ldr	r2, [pc, #244]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80021a6:	f043 0310 	orr.w	r3, r3, #16
 80021aa:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80021ac:	4b3b      	ldr	r3, [pc, #236]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 80021b2:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	3a01      	subs	r2, #1
 80021b8:	0212      	lsls	r2, r2, #8
 80021ba:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	3b01      	subs	r3, #1
 80021c0:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80021c2:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80021ca:	4934      	ldr	r1, [pc, #208]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80021d0:	4b32      	ldr	r3, [pc, #200]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a31      	ldr	r2, [pc, #196]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80021d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021da:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4a2e      	ldr	r2, [pc, #184]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80021e2:	f023 0310 	bic.w	r3, r3, #16
 80021e6:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80021e8:	4b2c      	ldr	r3, [pc, #176]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a2b      	ldr	r2, [pc, #172]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80021ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f2:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80021f4:	bf00      	nop
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f9      	beq.n	80021f6 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4a25      	ldr	r2, [pc, #148]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800220e:	bf00      	nop
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f9      	bne.n	8002210 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	0d9b      	lsrs	r3, r3, #22
 8002228:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 800222a:	6a3a      	ldr	r2, [r7, #32]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	429a      	cmp	r2, r3
 8002230:	d202      	bcs.n	8002238 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002232:	6938      	ldr	r0, [r7, #16]
 8002234:	f000 f84a 	bl	80022cc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	085b      	lsrs	r3, r3, #1
 800223c:	4a1a      	ldr	r2, [pc, #104]	; (80022a8 <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	0d9b      	lsrs	r3, r3, #22
 8002246:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002248:	6a3a      	ldr	r2, [r7, #32]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d202      	bcs.n	8002256 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002250:	6938      	ldr	r0, [r7, #16]
 8002252:	f000 f83b 	bl	80022cc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8002256:	6a38      	ldr	r0, [r7, #32]
 8002258:	f000 f838 	bl	80022cc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 800225c:	e015      	b.n	800228a <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800226a:	490c      	ldr	r1, [pc, #48]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a09      	ldr	r2, [pc, #36]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 800227c:	bf00      	nop
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f9      	beq.n	800227e <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	431bde83 	.word	0x431bde83
 8002298:	aaaaaaab 	.word	0xaaaaaaab
 800229c:	50004710 	.word	0x50004710
 80022a0:	f08080ff 	.word	0xf08080ff
 80022a4:	88888889 	.word	0x88888889
 80022a8:	b60b60b7 	.word	0xb60b60b7

080022ac <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 80022b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ba:	6053      	str	r3, [r2, #4]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	50004710 	.word	0x50004710

080022cc <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80022e2:	4905      	ldr	r1, [pc, #20]	; (80022f8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 80022e8:	2032      	movs	r0, #50	; 0x32
 80022ea:	f7fe fc71 	bl	8000bd0 <XMC_SCU_lDelay>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	50004710 	.word	0x50004710

080022fc <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2db      	uxtb	r3, r3
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	50004710 	.word	0x50004710

08002320 <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 800232e:	e002      	b.n	8002336 <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3301      	adds	r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	fa22 f303 	lsr.w	r3, r2, r3
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b1f      	cmp	r3, #31
 800234a:	d9f1      	bls.n	8002330 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b20      	cmp	r3, #32
 8002350:	d102      	bne.n	8002358 <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	72fb      	strb	r3, [r7, #11]
 8002356:	e006      	b.n	8002366 <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 8002358:	4906      	ldr	r1, [pc, #24]	; (8002374 <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 8002362:	2300      	movs	r3, #0
 8002364:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 8002366:	7afb      	ldrb	r3, [r7, #11]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	20000444 	.word	0x20000444

08002378 <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 8002384:	f7fe fc80 	bl	8000c88 <XMC_SCU_INTERUPT_GetEventStatus>
 8002388:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 800238a:	e01c      	b.n	80023c6 <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d011      	beq.n	80023c0 <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 800239c:	4a0d      	ldr	r2, [pc, #52]	; (80023d4 <XMC_SCU_IRQHandler+0x5c>)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a4:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 80023b0:	2201      	movs	r2, #1
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe fc71 	bl	8000ca0 <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 80023be:	e005      	b.n	80023cc <XMC_SCU_IRQHandler+0x54>
    }   
    index++;    
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	3301      	adds	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b1f      	cmp	r3, #31
 80023ca:	d9df      	bls.n	800238c <XMC_SCU_IRQHandler+0x14>
  }
}
 80023cc:	bf00      	nop
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000444 	.word	0x20000444

080023d8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	460b      	mov	r3, r1
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80023e6:	7afb      	ldrb	r3, [r7, #11]
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3204      	adds	r2, #4
 80023f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023f6:	7afb      	ldrb	r3, [r7, #11]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	21f8      	movs	r1, #248	; 0xf8
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	7af9      	ldrb	r1, [r7, #11]
 8002408:	0889      	lsrs	r1, r1, #2
 800240a:	b2c9      	uxtb	r1, r1
 800240c:	4608      	mov	r0, r1
 800240e:	ea02 0103 	and.w	r1, r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1d02      	adds	r2, r0, #4
 8002416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800241e:	7afb      	ldrb	r3, [r7, #11]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2103      	movs	r1, #3
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	401a      	ands	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a38      	ldr	r2, [pc, #224]	; (8002514 <XMC_GPIO_Init+0x13c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d003      	beq.n	8002440 <XMC_GPIO_Init+0x68>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4a37      	ldr	r2, [pc, #220]	; (8002518 <XMC_GPIO_Init+0x140>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d10a      	bne.n	8002456 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002444:	7afb      	ldrb	r3, [r7, #11]
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	401a      	ands	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	661a      	str	r2, [r3, #96]	; 0x60
 8002454:	e03c      	b.n	80024d0 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	7afb      	ldrb	r3, [r7, #11]
 800245c:	409a      	lsls	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8002462:	7afb      	ldrb	r3, [r7, #11]
 8002464:	08db      	lsrs	r3, r3, #3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	3210      	adds	r2, #16
 800246e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002472:	7afb      	ldrb	r3, [r7, #11]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	2107      	movs	r1, #7
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	7af9      	ldrb	r1, [r7, #11]
 8002484:	08c9      	lsrs	r1, r1, #3
 8002486:	b2c9      	uxtb	r1, r1
 8002488:	4608      	mov	r0, r1
 800248a:	ea02 0103 	and.w	r1, r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f100 0210 	add.w	r2, r0, #16
 8002494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8002498:	7afb      	ldrb	r3, [r7, #11]
 800249a:	08db      	lsrs	r3, r3, #3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	3210      	adds	r2, #16
 80024a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7a1b      	ldrb	r3, [r3, #8]
 80024ac:	4619      	mov	r1, r3
 80024ae:	7afb      	ldrb	r3, [r7, #11]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	7af9      	ldrb	r1, [r7, #11]
 80024bc:	08c9      	lsrs	r1, r1, #3
 80024be:	b2c9      	uxtb	r1, r1
 80024c0:	4608      	mov	r0, r1
 80024c2:	ea42 0103 	orr.w	r1, r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f100 0210 	add.w	r2, r0, #16
 80024cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80024d0:	7afb      	ldrb	r3, [r7, #11]
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3204      	adds	r2, #4
 80024dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	7afb      	ldrb	r3, [r7, #11]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	7af9      	ldrb	r1, [r7, #11]
 80024f4:	0889      	lsrs	r1, r1, #2
 80024f6:	b2c9      	uxtb	r1, r1
 80024f8:	4608      	mov	r0, r1
 80024fa:	ea42 0103 	orr.w	r1, r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1d02      	adds	r2, r0, #4
 8002502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	48028e00 	.word	0x48028e00
 8002518:	48028f00 	.word	0x48028f00

0800251c <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	70fb      	strb	r3, [r7, #3]
 8002528:	4613      	mov	r3, r2
 800252a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	08db      	lsrs	r3, r3, #3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3210      	adds	r2, #16
 8002538:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	2107      	movs	r1, #7
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	78f9      	ldrb	r1, [r7, #3]
 800254e:	08c9      	lsrs	r1, r1, #3
 8002550:	b2c9      	uxtb	r1, r1
 8002552:	4608      	mov	r0, r1
 8002554:	ea02 0103 	and.w	r1, r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f100 0210 	add.w	r2, r0, #16
 800255e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	08db      	lsrs	r3, r3, #3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3210      	adds	r2, #16
 800256e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002572:	78b9      	ldrb	r1, [r7, #2]
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	78f9      	ldrb	r1, [r7, #3]
 8002582:	08c9      	lsrs	r1, r1, #3
 8002584:	b2c9      	uxtb	r1, r1
 8002586:	4608      	mov	r0, r1
 8002588:	ea42 0103 	orr.w	r1, r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f100 0210 	add.w	r2, r0, #16
 8002592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60da      	str	r2, [r3, #12]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <XMC_CCU4_SLICE_SetDitherCompareValue>:
 *
  * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableDithering().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetDitherCompareValue(XMC_CCU4_SLICE_t *const slice, const uint8_t comp_val)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->DITS = comp_val;
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	621a      	str	r2, [r3, #32]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <XMC_CCU4_lAssertReset>:
/*********************************************************************************************************************
 * LOCAL ROUTINES
 ********************************************************************************************************************/
#if defined(PERIPHERAL_RESET_SUPPORTED)
__STATIC_INLINE void XMC_CCU4_lAssertReset(const XMC_CCU4_MODULE_t *const module)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a11      	ldr	r2, [pc, #68]	; (8002630 <XMC_CCU4_lAssertReset+0x50>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d103      	bne.n	80025f8 <XMC_CCU4_lAssertReset+0x18>
  {
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80025f0:	2004      	movs	r0, #4
 80025f2:	f7fe fe3d 	bl	8001270 <XMC_SCU_RESET_AssertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}
 80025f6:	e016      	b.n	8002626 <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU41)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <XMC_CCU4_lAssertReset+0x54>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d103      	bne.n	8002608 <XMC_CCU4_lAssertReset+0x28>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8002600:	2008      	movs	r0, #8
 8002602:	f7fe fe35 	bl	8001270 <XMC_SCU_RESET_AssertPeripheralReset>
}
 8002606:	e00e      	b.n	8002626 <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU42)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <XMC_CCU4_lAssertReset+0x58>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d103      	bne.n	8002618 <XMC_CCU4_lAssertReset+0x38>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8002610:	2010      	movs	r0, #16
 8002612:	f7fe fe2d 	bl	8001270 <XMC_SCU_RESET_AssertPeripheralReset>
}
 8002616:	e006      	b.n	8002626 <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU43)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a08      	ldr	r2, [pc, #32]	; (800263c <XMC_CCU4_lAssertReset+0x5c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d102      	bne.n	8002626 <XMC_CCU4_lAssertReset+0x46>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8002620:	4807      	ldr	r0, [pc, #28]	; (8002640 <XMC_CCU4_lAssertReset+0x60>)
 8002622:	f7fe fe25 	bl	8001270 <XMC_SCU_RESET_AssertPeripheralReset>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	4000c000 	.word	0x4000c000
 8002634:	40010000 	.word	0x40010000
 8002638:	40014000 	.word	0x40014000
 800263c:	48004000 	.word	0x48004000
 8002640:	10000001 	.word	0x10000001

08002644 <XMC_CCU4_lDeassertReset>:

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a11      	ldr	r2, [pc, #68]	; (8002694 <XMC_CCU4_lDeassertReset+0x50>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d103      	bne.n	800265c <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8002654:	2004      	movs	r0, #4
 8002656:	f7fe fe29 	bl	80012ac <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 800265a:	e016      	b.n	800268a <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU41)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <XMC_CCU4_lDeassertReset+0x54>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d103      	bne.n	800266c <XMC_CCU4_lDeassertReset+0x28>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8002664:	2008      	movs	r0, #8
 8002666:	f7fe fe21 	bl	80012ac <XMC_SCU_RESET_DeassertPeripheralReset>
}
 800266a:	e00e      	b.n	800268a <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU42)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a0b      	ldr	r2, [pc, #44]	; (800269c <XMC_CCU4_lDeassertReset+0x58>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d103      	bne.n	800267c <XMC_CCU4_lDeassertReset+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8002674:	2010      	movs	r0, #16
 8002676:	f7fe fe19 	bl	80012ac <XMC_SCU_RESET_DeassertPeripheralReset>
}
 800267a:	e006      	b.n	800268a <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU43)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <XMC_CCU4_lDeassertReset+0x5c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d102      	bne.n	800268a <XMC_CCU4_lDeassertReset+0x46>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8002684:	4807      	ldr	r0, [pc, #28]	; (80026a4 <XMC_CCU4_lDeassertReset+0x60>)
 8002686:	f7fe fe11 	bl	80012ac <XMC_SCU_RESET_DeassertPeripheralReset>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	4000c000 	.word	0x4000c000
 8002698:	40010000 	.word	0x40010000
 800269c:	40014000 	.word	0x40014000
 80026a0:	48004000 	.word	0x48004000
 80026a4:	10000001 	.word	0x10000001

080026a8 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80026b0:	2010      	movs	r0, #16
 80026b2:	f7ff f8e5 	bl	8001880 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ffc4 	bl	8002644 <XMC_CCU4_lDeassertReset>
#endif
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <XMC_CCU4_DisableModule>:

void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_DisableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lAssertReset(module);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff87 	bl	80025e0 <XMC_CCU4_lAssertReset>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lGateClock(module);
#endif
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <XMC_CCU4_Init>:

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffde 	bl	80026a8 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff58 	bl	80025a2 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026fe:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	039b      	lsls	r3, r3, #14
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	601a      	str	r2, [r3, #0]
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002730:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <XMC_CCU4_SetMultiChannelShadowTransferMode>:

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	0c1b      	lsrs	r3, r3, #16
 8002762:	43db      	mvns	r3, r3
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4013      	ands	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	795b      	ldrb	r3, [r3, #5]
 800279c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	051a      	lsls	r2, r3, #20
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	791b      	ldrb	r3, [r3, #4]
 80027ac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	795b      	ldrb	r3, [r3, #5]
 80027bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	795b      	ldrb	r3, [r3, #5]
 80027cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	791b      	ldrb	r3, [r3, #4]
 80027dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <XMC_CCU4_SLICE_CaptureInit>:

/* API to configure CC4 Slice for Capture */
void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	795b      	ldrb	r3, [r3, #5]
 800280a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800280e:	b2db      	uxtb	r3, r3
 8002810:	051a      	lsls	r2, r3, #20
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	791b      	ldrb	r3, [r3, #4]
 800281a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	791b      	ldrb	r3, [r3, #4]
 800282a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	460b      	mov	r3, r1
 800284c:	70fb      	strb	r3, [r7, #3]
 800284e:	4613      	mov	r3, r2
 8002850:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f023 0303 	bic.w	r3, r3, #3
 800285e:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	4313      	orrs	r3, r2
 8002866:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8002874:	78bb      	ldrb	r3, [r7, #2]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d104      	bne.n	8002884 <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e003      	b.n	800288c <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800288a:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	615a      	str	r2, [r3, #20]
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                           const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	70fb      	strb	r3, [r7, #3]
 80028aa:	4613      	mov	r3, r2
 80028ac:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 030c 	bic.w	r3, r3, #12
 80028ba:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d8:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 80028da:	78bb      	ldrb	r3, [r7, #2]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	615a      	str	r2, [r3, #20]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800290e:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	031b      	lsls	r3, r3, #12
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	605a      	str	r2, [r3, #4]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	4608      	mov	r0, r1
 8002936:	4611      	mov	r1, r2
 8002938:	461a      	mov	r2, r3
 800293a:	4603      	mov	r3, r0
 800293c:	70fb      	strb	r3, [r7, #3]
 800293e:	460b      	mov	r3, r1
 8002940:	70bb      	strb	r3, [r7, #2]
 8002942:	4613      	mov	r3, r2
 8002944:	707b      	strb	r3, [r7, #1]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	60bb      	str	r3, [r7, #8]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002958:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	049b      	lsls	r3, r3, #18
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	605a      	str	r2, [r3, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 800296a:	78bb      	ldrb	r3, [r7, #2]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d104      	bne.n	800297a <XMC_CCU4_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e003      	b.n	8002982 <XMC_CCU4_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002980:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
 8002982:	787b      	ldrb	r3, [r7, #1]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <XMC_CCU4_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e003      	b.n	800299a <XMC_CCU4_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002998:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	615a      	str	r2, [r3, #20]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029c4:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	039b      	lsls	r3, r3, #14
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	605a      	str	r2, [r3, #4]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fa:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	605a      	str	r2, [r3, #4]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <XMC_CCU4_SLICE_Capture0Config>:

/* API to configure Capture-0 function */
void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a30:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	605a      	str	r2, [r3, #4]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <XMC_CCU4_SLICE_Capture1Config>:

/* API to configure Capture-1 function */
void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a66:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	019b      	lsls	r3, r3, #6
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	605a      	str	r2, [r3, #4]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <XMC_CCU4_SLICE_DirectionConfig>:

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a9c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	029b      	lsls	r3, r3, #10
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	605a      	str	r2, [r3, #4]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	70fb      	strb	r3, [r7, #3]
 8002af6:	4613      	mov	r3, r2
 8002af8:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002b06:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0e:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
 8002b1c:	78bb      	ldrb	r3, [r7, #2]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d004      	beq.n	8002b2c <XMC_CCU4_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	e003      	b.n	8002b34 <XMC_CCU4_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b32:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d104      	bne.n	8002b44 <XMC_CCU4_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	e003      	b.n	8002b4c <XMC_CCU4_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b4a:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	615a      	str	r2, [r3, #20]
}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b087      	sub	sp, #28
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002b76:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	785b      	ldrb	r3, [r3, #1]
 8002b7c:	049b      	lsls	r3, r3, #18
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b8a:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	785b      	ldrb	r3, [r3, #1]
 8002b90:	051b      	lsls	r3, r3, #20
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b9e:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	789b      	ldrb	r3, [r3, #2]
 8002ba4:	05db      	lsls	r3, r3, #23
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	789b      	ldrb	r3, [r3, #2]
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8002bc6:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	78db      	ldrb	r3, [r3, #3]
 8002bcc:	06db      	lsls	r3, r3, #27
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002bda:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	78db      	ldrb	r3, [r3, #3]
 8002be0:	075b      	lsls	r3, r3, #29
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bee:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c02:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
  
  slice->INS = ins;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	601a      	str	r2, [r3, #0]
#endif
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b089      	sub	sp, #36	; 0x24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8002c30:	7afb      	ldrb	r3, [r7, #11]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8002c3c:	7ffb      	ldrb	r3, [r7, #31]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	3310      	adds	r3, #16
 8002c44:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2203      	movs	r2, #3
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	785b      	ldrb	r3, [r3, #1]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 8002c68:	7ffb      	ldrb	r3, [r7, #31]
 8002c6a:	3316      	adds	r3, #22
 8002c6c:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	2201      	movs	r2, #1
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	789b      	ldrb	r3, [r3, #2]
 8002c82:	461a      	mov	r2, r3
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8002c90:	7ffb      	ldrb	r3, [r7, #31]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	3319      	adds	r3, #25
 8002c98:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	78db      	ldrb	r3, [r3, #3]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8002cbc:	7ffb      	ldrb	r3, [r7, #31]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	601a      	str	r2, [r3, #0]
#endif
}
 8002cea:	bf00      	nop
 8002cec:	3724      	adds	r7, #36	; 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <XMC_CCU4_SLICE_SetInput>:

/* API to bind an input to a slice trigger event */
void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
                         const XMC_CCU4_SLICE_EVENT_t event,
                             const XMC_CCU4_SLICE_INPUT_t input)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	70fb      	strb	r3, [r7, #3]
 8002d02:	4613      	mov	r3, r2
 8002d04:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(input));
  
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
  ins |= ((uint32_t) input) << pos;

  slice->INS1 = ins;
#else
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	73bb      	strb	r3, [r7, #14]

  ins = slice->INS;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60bb      	str	r3, [r7, #8]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8002d18:	7bbb      	ldrb	r3, [r7, #14]
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	4013      	ands	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
  ins |= ((uint32_t) input) << pos;
 8002d28:	78ba      	ldrb	r2, [r7, #2]
 8002d2a:	7bbb      	ldrb	r3, [r7, #14]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60bb      	str	r3, [r7, #8]

  slice->INS = ins;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	601a      	str	r2, [r3, #0]
#endif
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <XMC_CCU4_SLICE_SetTimerRepeatMode>:

/* API to program timer repeat mode - Single shot vs repeat */
void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t mode)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode",
             ((mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
          (mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE)));
  
  if (XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <XMC_CCU4_SLICE_SetTimerRepeatMode+0x20>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f023 0202 	bic.w	r2, r3, #2
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	615a      	str	r2, [r3, #20]
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
  }
}
 8002d66:	e005      	b.n	8002d74 <XMC_CCU4_SLICE_SetTimerRepeatMode+0x2c>
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f043 0202 	orr.w	r2, r3, #2
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	615a      	str	r2, [r3, #20]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <XMC_CCU4_SLICE_SetTimerCountingMode>:

/* Programs timer counting mode */
void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_COUNT_MODE_t mode)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA) ||\
                                                                              (mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA)));
  
  if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <XMC_CCU4_SLICE_SetTimerCountingMode+0x20>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f023 0201 	bic.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
  }
}
 8002d9e:	e005      	b.n	8002dac <XMC_CCU4_SLICE_SetTimerCountingMode+0x2c>
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f043 0201 	orr.w	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	615a      	str	r2, [r3, #20]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <XMC_CCU4_SLICE_GetCaptureRegisterValue>:

/* Retrieves desired capture register value */
uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t reg_num)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
  return(slice->CV[reg_num]);
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	331c      	adds	r3, #28
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	685b      	ldr	r3, [r3, #4]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <XMC_CCU4_SLICE_GetLastCapturedTimerValue>:

/* @brief Retrieves the latest captured timer value */
XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
                                                           const XMC_CCU4_SLICE_CAP_REG_SET_t set,
                                                           uint32_t *val_ptr)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	460b      	mov	r3, r1
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	72fb      	strb	r3, [r7, #11]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Register Set", ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) ||\
                                                                               (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));
  
  retval = XMC_CCU4_STATUS_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]

  /* First check if extended capture mode is enabled */
  if ((slice->TC) & CCU4_CC4_TC_ECM_Msk)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d004      	beq.n	8002e04 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x28>
  {
    /* Extended capture mode has been enabled. So start with the lowest capture register and work your way up */
    start = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	757b      	strb	r3, [r7, #21]
    end = XMC_CCU4_NUM_SLICES_PER_MODULE;
 8002dfe:	2304      	movs	r3, #4
 8002e00:	753b      	strb	r3, [r7, #20]
 8002e02:	e00b      	b.n	8002e1c <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x40>
  }
  else
  {
    /* Extended capture mode is not enabled */
    if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
 8002e04:	7afb      	ldrb	r3, [r7, #11]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d104      	bne.n	8002e14 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x38>
    {
      start = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	757b      	strb	r3, [r7, #21]
      end   = (uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE;
 8002e0e:	2304      	movs	r3, #4
 8002e10:	753b      	strb	r3, [r7, #20]
 8002e12:	e003      	b.n	8002e1c <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x40>
    }
    else
    {
      start = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	757b      	strb	r3, [r7, #21]
      end = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	753b      	strb	r3, [r7, #20]
    }
  }

  for(i=start; i < end; i++)
 8002e1c:	7d7b      	ldrb	r3, [r7, #21]
 8002e1e:	75bb      	strb	r3, [r7, #22]
 8002e20:	e017      	b.n	8002e52 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x76>
  {
    if ( (slice->CV[i]) & CCU4_CC4_CV_FFL_Msk )
 8002e22:	7dbb      	ldrb	r3, [r7, #22]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	331c      	adds	r3, #28
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x70>
    {
      *val_ptr = slice->CV[i];
 8002e36:	7dbb      	ldrb	r3, [r7, #22]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	331c      	adds	r3, #28
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	601a      	str	r2, [r3, #0]
      retval = XMC_CCU4_STATUS_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
      break;
 8002e4a:	e006      	b.n	8002e5a <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x7e>
  for(i=start; i < end; i++)
 8002e4c:	7dbb      	ldrb	r3, [r7, #22]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	75bb      	strb	r3, [r7, #22]
 8002e52:	7dba      	ldrb	r2, [r7, #22]
 8002e54:	7d3b      	ldrb	r3, [r7, #20]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d3e3      	bcc.n	8002e22 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x46>
    }
  }

  return retval;
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <XMC_CCU4_GetCapturedValueFromFifo>:

/* Retrieves timer capture value from a FIFO made of capture registers */
#if defined(CCU4V1) /* Defined for XMC4500, XMC400, XMC4200, XMC4100 devices only */
int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	70fb      	strb	r3, [r7, #3]
  uint32_t  extracted_slice;
  
  XMC_ASSERT("XMC_CCU4_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));

  /* First read the global fifo register */
  cap = (int32_t) module->ECRD;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e78:	60fb      	str	r3, [r7, #12]

  extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU4_ECRD_SPTR_Msk)) >> CCU4_ECRD_SPTR_Pos;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	0d1b      	lsrs	r3, r3, #20
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	60bb      	str	r3, [r7, #8]

  /* Return captured result only if it were applicable to this slice */
  if(extracted_slice != ((uint32_t)slice_number))
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d002      	beq.n	8002e92 <XMC_CCU4_GetCapturedValueFromFifo+0x2a>
  {
    cap = -1;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  return (cap);
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <XMC_CCU4_SLICE_EnableDithering>:
/* Enables PWM dithering feature */
void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
                                    const bool period_dither,
                                    const bool duty_dither,
                                    const uint8_t spread)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	4611      	mov	r1, r2
 8002eac:	461a      	mov	r2, r3
 8002eae:	4603      	mov	r3, r0
 8002eb0:	70fb      	strb	r3, [r7, #3]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	70bb      	strb	r3, [r7, #2]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	707b      	strb	r3, [r7, #1]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU4_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  tc = slice->TC;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	60fb      	str	r3, [r7, #12]
  tc &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002ec6:	60fb      	str	r3, [r7, #12]

  if ((bool) true == period_dither)
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <XMC_CCU4_SLICE_EnableDithering+0x36>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_PERIOD_MASK) << CCU4_CC4_TC_DITHE_Pos);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ed4:	60fb      	str	r3, [r7, #12]
  }
  if ((bool) true == duty_dither)
 8002ed6:	78bb      	ldrb	r3, [r7, #2]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <XMC_CCU4_SLICE_EnableDithering+0x44>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK) << CCU4_CC4_TC_DITHE_Pos);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee2:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	615a      	str	r2, [r3, #20]
  
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
 8002eea:	787b      	ldrb	r3, [r7, #1]
 8002eec:	4619      	mov	r1, r3
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff fb67 	bl	80025c2 <XMC_CCU4_SLICE_SetDitherCompareValue>
}
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <XMC_CCU4_SLICE_SetPrescaler>:

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f14:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	629a      	str	r2, [r3, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	70fb      	strb	r3, [r7, #3]
 8002f44:	4613      	mov	r3, r2
 8002f46:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f4e:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	2b09      	cmp	r3, #9
 8002f54:	d82c      	bhi.n	8002fb0 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8002f56:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002f85 	.word	0x08002f85
 8002f60:	08002f85 	.word	0x08002f85
 8002f64:	08002f8f 	.word	0x08002f8f
 8002f68:	08002f8f 	.word	0x08002f8f
 8002f6c:	08002fb1 	.word	0x08002fb1
 8002f70:	08002fb1 	.word	0x08002fb1
 8002f74:	08002fb1 	.word	0x08002fb1
 8002f78:	08002fb1 	.word	0x08002fb1
 8002f7c:	08002f99 	.word	0x08002f99
 8002f80:	08002fa5 	.word	0x08002fa5
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8002f84:	2303      	movs	r3, #3
 8002f86:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
      break;
 8002f8c:	e016      	b.n	8002fbc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8002f8e:	230c      	movs	r3, #12
 8002f90:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8002f92:	2302      	movs	r3, #2
 8002f94:	617b      	str	r3, [r7, #20]
      break;
 8002f96:	e011      	b.n	8002fbc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8002f98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f9c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	617b      	str	r3, [r7, #20]
      break;
 8002fa2:	e00b      	b.n	8002fbc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8002fa4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fa8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8002faa:	230a      	movs	r3, #10
 8002fac:	617b      	str	r3, [r7, #20]
      break;
 8002fae:	e005      	b.n	8002fbc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8002fb0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002fb4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8002fb6:	230c      	movs	r3, #12
 8002fb8:	617b      	str	r3, [r7, #20]
      break;
 8002fba:	bf00      	nop
  }
  
  srs &= ~mask; 
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8002fc6:	78ba      	ldrb	r2, [r7, #2]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8002fdc:	bf00      	nop
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <XMC_CCU4_SLICE_SetPassiveLevel>:

/* Asserts passive level for the slice output */
void XMC_CCU4_SLICE_SetPassiveLevel(XMC_CCU4_SLICE_t *const slice,
                                    const XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Passive level", ((level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW) ||\
                                                                      (level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH)));
  
  psl = slice->PSL;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	60fb      	str	r3, [r7, #12]
  psl &= ~((uint32_t) CCU4_CC4_PSL_PSL_Msk);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
  psl |= (uint32_t) level;
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  
  /* Program CC4 slice output passive level */
  slice->PSL = psl;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	619a      	str	r2, [r3, #24]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e003      	b.n	8003032 <delay+0x16>
  {
    __NOP();
 800302a:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3301      	adds	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d8f7      	bhi.n	800302a <delay+0xe>
  }
}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8003048:	b598      	push	{r3, r4, r7, lr}
 800304a:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 800304c:	4a06      	ldr	r2, [pc, #24]	; (8003068 <SystemInit+0x20>)
 800304e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003052:	4614      	mov	r4, r2
 8003054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 800305a:	f000 f807 	bl	800306c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 800305e:	f000 f83d 	bl	80030dc <SystemCoreClockSetup>
}
 8003062:	bf00      	nop
 8003064:	bd98      	pop	{r3, r4, r7, pc}
 8003066:	bf00      	nop
 8003068:	2000ffc4 	.word	0x2000ffc4

0800306c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003072:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8003074:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <SystemCoreSetup+0x64>)
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <SystemCoreSetup+0x68>)
 8003078:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800307a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 800307e:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <SystemCoreSetup+0x64>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003086:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <SystemCoreSetup+0x64>)
 8003088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800308c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <SystemCoreSetup+0x64>)
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	4a0e      	ldr	r2, [pc, #56]	; (80030d0 <SystemCoreSetup+0x64>)
 8003096:	f023 0308 	bic.w	r3, r3, #8
 800309a:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 800309c:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <SystemCoreSetup+0x6c>)
 800309e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a2:	3314      	adds	r3, #20
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f023 030f 	bic.w	r3, r3, #15
 80030ae:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f043 0303 	orr.w	r3, r3, #3
 80030b6:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <SystemCoreSetup+0x6c>)
 80030ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030be:	3314      	adds	r3, #20
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	601a      	str	r2, [r3, #0]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00
 80030d4:	08000000 	.word	0x08000000
 80030d8:	58001000 	.word	0x58001000

080030dc <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80030e0:	4b75      	ldr	r3, [pc, #468]	; (80032b8 <SystemCoreClockSetup+0x1dc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10c      	bne.n	8003106 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 80030ec:	4b72      	ldr	r3, [pc, #456]	; (80032b8 <SystemCoreClockSetup+0x1dc>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4a71      	ldr	r2, [pc, #452]	; (80032b8 <SystemCoreClockSetup+0x1dc>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80030f8:	bf00      	nop
 80030fa:	4b6f      	ldr	r3, [pc, #444]	; (80032b8 <SystemCoreClockSetup+0x1dc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f9      	beq.n	80030fa <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8003106:	4b6d      	ldr	r3, [pc, #436]	; (80032bc <SystemCoreClockSetup+0x1e0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8003112:	4b6a      	ldr	r3, [pc, #424]	; (80032bc <SystemCoreClockSetup+0x1e0>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	4a69      	ldr	r2, [pc, #420]	; (80032bc <SystemCoreClockSetup+0x1e0>)
 8003118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800311c:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 800311e:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8003122:	f7ff ff7b 	bl	800301c <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8003126:	4b66      	ldr	r3, [pc, #408]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4a65      	ldr	r2, [pc, #404]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 800312c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003130:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8003132:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003136:	f7ff ff71 	bl	800301c <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800313a:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a60      	ldr	r2, [pc, #384]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 8003140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003144:	f023 0302 	bic.w	r3, r3, #2
 8003148:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800314a:	4b5e      	ldr	r3, [pc, #376]	; (80032c4 <SystemCoreClockSetup+0x1e8>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003152:	2b00      	cmp	r3, #0
 8003154:	d029      	beq.n	80031aa <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8003156:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <SystemCoreClockSetup+0x1e8>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4a5a      	ldr	r2, [pc, #360]	; (80032c4 <SystemCoreClockSetup+0x1e8>)
 800315c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003160:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003164:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8003166:	f000 f927 	bl	80033b8 <OSCHP_GetFrequency>
 800316a:	4602      	mov	r2, r0
 800316c:	4b56      	ldr	r3, [pc, #344]	; (80032c8 <SystemCoreClockSetup+0x1ec>)
 800316e:	fba3 2302 	umull	r2, r3, r3, r2
 8003172:	0d1b      	lsrs	r3, r3, #20
 8003174:	3b01      	subs	r3, #1
 8003176:	041a      	lsls	r2, r3, #16
 8003178:	4b52      	ldr	r3, [pc, #328]	; (80032c4 <SystemCoreClockSetup+0x1e8>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4951      	ldr	r1, [pc, #324]	; (80032c4 <SystemCoreClockSetup+0x1e8>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8003182:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4a4e      	ldr	r2, [pc, #312]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800318e:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4a4b      	ldr	r2, [pc, #300]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 8003194:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003198:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 800319a:	bf00      	nop
 800319c:	4b48      	ldr	r3, [pc, #288]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80031a4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80031a8:	d1f8      	bne.n	800319c <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 80031aa:	4b45      	ldr	r3, [pc, #276]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4a44      	ldr	r2, [pc, #272]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 80031b6:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4a41      	ldr	r2, [pc, #260]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 80031bc:	f043 0310 	orr.w	r3, r3, #16
 80031c0:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 80031c4:	4a41      	ldr	r2, [pc, #260]	; (80032cc <SystemCoreClockSetup+0x1f0>)
 80031c6:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80031c8:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a3c      	ldr	r2, [pc, #240]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 80031ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d2:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 80031d4:	4b3a      	ldr	r3, [pc, #232]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4a39      	ldr	r2, [pc, #228]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 80031da:	f023 0310 	bic.w	r3, r3, #16
 80031de:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80031e0:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a36      	ldr	r2, [pc, #216]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 80031e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ea:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80031ec:	bf00      	nop
 80031ee:	4b34      	ldr	r3, [pc, #208]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f9      	beq.n	80031ee <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80031fa:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a30      	ldr	r2, [pc, #192]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8003206:	bf00      	nop
 8003208:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f9      	bne.n	8003208 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8003214:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <SystemCoreClockSetup+0x1f4>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <SystemCoreClockSetup+0x1f4>)
 800321a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321e:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8003220:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <SystemCoreClockSetup+0x1f4>)
 8003222:	2200      	movs	r2, #0
 8003224:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <SystemCoreClockSetup+0x1f4>)
 8003228:	2200      	movs	r2, #0
 800322a:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <SystemCoreClockSetup+0x1f4>)
 800322e:	2200      	movs	r2, #0
 8003230:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8003232:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <SystemCoreClockSetup+0x1f4>)
 8003234:	2200      	movs	r2, #0
 8003236:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8003238:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <SystemCoreClockSetup+0x1f4>)
 800323a:	2200      	movs	r2, #0
 800323c:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <SystemCoreClockSetup+0x1f4>)
 8003240:	2203      	movs	r2, #3
 8003242:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8003244:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4a1d      	ldr	r2, [pc, #116]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 800324a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800324e:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 8003252:	4a20      	ldr	r2, [pc, #128]	; (80032d4 <SystemCoreClockSetup+0x1f8>)
 8003254:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8003256:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800325a:	f7ff fedf 	bl	800301c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800325e:	bf00      	nop
 8003260:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f9      	beq.n	8003260 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 800326e:	4a1a      	ldr	r2, [pc, #104]	; (80032d8 <SystemCoreClockSetup+0x1fc>)
 8003270:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8003272:	f241 1094 	movw	r0, #4500	; 0x1194
 8003276:	f7ff fed1 	bl	800301c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800327a:	bf00      	nop
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f9      	beq.n	800327c <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 800328a:	4a14      	ldr	r2, [pc, #80]	; (80032dc <SystemCoreClockSetup+0x200>)
 800328c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 800328e:	f241 7070 	movw	r0, #6000	; 0x1770
 8003292:	f7ff fec3 	bl	800301c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8003296:	bf00      	nop
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <SystemCoreClockSetup+0x1e4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f9      	beq.n	8003298 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <SystemCoreClockSetup+0x204>)
 80032a6:	2205      	movs	r2, #5
 80032a8:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 80032aa:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <SystemCoreClockSetup+0x1f4>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 80032b0:	f000 f818 	bl	80032e4 <SystemCoreClockUpdate>
}
 80032b4:	bf00      	nop
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	50004200 	.word	0x50004200
 80032bc:	50004400 	.word	0x50004400
 80032c0:	50004710 	.word	0x50004710
 80032c4:	50004700 	.word	0x50004700
 80032c8:	6b5fca6b 	.word	0x6b5fca6b
 80032cc:	01134f00 	.word	0x01134f00
 80032d0:	50004600 	.word	0x50004600
 80032d4:	01074f00 	.word	0x01074f00
 80032d8:	01044f00 	.word	0x01044f00
 80032dc:	01034f00 	.word	0x01034f00
 80032e0:	50004160 	.word	0x50004160

080032e4 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80032ea:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <SystemCoreClockUpdate+0xc4>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d03e      	beq.n	8003374 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80032f6:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <SystemCoreClockUpdate+0xc8>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <SystemCoreClockUpdate+0xcc>)
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e002      	b.n	800330e <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8003308:	f000 f856 	bl	80033b8 <OSCHP_GetFrequency>
 800330c:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800330e:	4b27      	ldr	r3, [pc, #156]	; (80033ac <SystemCoreClockUpdate+0xc8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d020      	beq.n	800335c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <SystemCoreClockUpdate+0xc8>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	0e1b      	lsrs	r3, r3, #24
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	3301      	adds	r3, #1
 8003326:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <SystemCoreClockUpdate+0xc8>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003332:	3301      	adds	r3, #1
 8003334:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8003336:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <SystemCoreClockUpdate+0xc8>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	0c1b      	lsrs	r3, r3, #16
 800333c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003340:	3301      	adds	r3, #1
 8003342:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	fb02 f303 	mul.w	r3, r2, r3
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	e00d      	b.n	8003378 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <SystemCoreClockUpdate+0xc8>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003364:	3301      	adds	r3, #1
 8003366:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e001      	b.n	8003378 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <SystemCoreClockUpdate+0xcc>)
 8003376:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <SystemCoreClockUpdate+0xc4>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	3301      	adds	r3, #1
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8003388:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <SystemCoreClockUpdate+0xc4>)
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	3301      	adds	r3, #1
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800339a:	4a06      	ldr	r2, [pc, #24]	; (80033b4 <SystemCoreClockUpdate+0xd0>)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6013      	str	r3, [r2, #0]
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	50004600 	.word	0x50004600
 80033ac:	50004710 	.word	0x50004710
 80033b0:	016e3600 	.word	0x016e3600
 80033b4:	2000ffc0 	.word	0x2000ffc0

080033b8 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 80033bc:	4b02      	ldr	r3, [pc, #8]	; (80033c8 <OSCHP_GetFrequency+0x10>)
}
 80033be:	4618      	mov	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	00b71b00 	.word	0x00b71b00

080033cc <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80033d4:	4b14      	ldr	r3, [pc, #80]	; (8003428 <_sbrk+0x5c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <_sbrk+0x5c>)
 80033de:	4a13      	ldr	r2, [pc, #76]	; (800342c <_sbrk+0x60>)
 80033e0:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80033e2:	4b11      	ldr	r3, [pc, #68]	; (8003428 <_sbrk+0x5c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3303      	adds	r3, #3
 80033ec:	f023 0303 	bic.w	r3, r3, #3
 80033f0:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <_sbrk+0x5c>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	4a0d      	ldr	r2, [pc, #52]	; (8003430 <_sbrk+0x64>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d207      	bcs.n	8003410 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <_sbrk+0x5c>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	4a07      	ldr	r2, [pc, #28]	; (8003428 <_sbrk+0x5c>)
 800340a:	6013      	str	r3, [r2, #0]
    return (base);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	e006      	b.n	800341e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8003410:	f000 f818 	bl	8003444 <__errno>
 8003414:	4602      	mov	r2, r0
 8003416:	230c      	movs	r3, #12
 8003418:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 800341a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000440 	.word	0x20000440
 800342c:	200004c8 	.word	0x200004c8
 8003430:	2000ffc0 	.word	0x2000ffc0

08003434 <_init>:

/* Init */
void _init(void)
{}
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <__errno>:
 8003444:	4b01      	ldr	r3, [pc, #4]	; (800344c <__errno+0x8>)
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	2000000c 	.word	0x2000000c

08003450 <__libc_init_array>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	4e0d      	ldr	r6, [pc, #52]	; (8003488 <__libc_init_array+0x38>)
 8003454:	4d0d      	ldr	r5, [pc, #52]	; (800348c <__libc_init_array+0x3c>)
 8003456:	1b76      	subs	r6, r6, r5
 8003458:	10b6      	asrs	r6, r6, #2
 800345a:	d006      	beq.n	800346a <__libc_init_array+0x1a>
 800345c:	2400      	movs	r4, #0
 800345e:	3401      	adds	r4, #1
 8003460:	f855 3b04 	ldr.w	r3, [r5], #4
 8003464:	4798      	blx	r3
 8003466:	42a6      	cmp	r6, r4
 8003468:	d1f9      	bne.n	800345e <__libc_init_array+0xe>
 800346a:	4e09      	ldr	r6, [pc, #36]	; (8003490 <__libc_init_array+0x40>)
 800346c:	4d09      	ldr	r5, [pc, #36]	; (8003494 <__libc_init_array+0x44>)
 800346e:	1b76      	subs	r6, r6, r5
 8003470:	f7ff ffe0 	bl	8003434 <_init>
 8003474:	10b6      	asrs	r6, r6, #2
 8003476:	d006      	beq.n	8003486 <__libc_init_array+0x36>
 8003478:	2400      	movs	r4, #0
 800347a:	3401      	adds	r4, #1
 800347c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003480:	4798      	blx	r3
 8003482:	42a6      	cmp	r6, r4
 8003484:	d1f9      	bne.n	800347a <__libc_init_array+0x2a>
 8003486:	bd70      	pop	{r4, r5, r6, pc}
 8003488:	20000438 	.word	0x20000438
 800348c:	20000438 	.word	0x20000438
 8003490:	20000438 	.word	0x20000438
 8003494:	20000438 	.word	0x20000438
 8003498:	61632069 	.word	0x61632069
 800349c:	6f6d206e 	.word	0x6f6d206e
 80034a0:	00657372 	.word	0x00657372

080034a4 <_global_impure_ptr>:
 80034a4:	20000010                                ... 
