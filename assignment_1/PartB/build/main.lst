
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008e90  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  08008e90  0c008e90  00018e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  3 .ram_code     00000000  10000800  10000800  000209ac  2**0
                  CONTENTS
  4 PSRAM_DATA    00000000  10000800  10000800  000209ac  2**0
                  CONTENTS
  5 PSRAM_BSS     00000000  10000800  10000800  000209ac  2**0
                  CONTENTS
  6 .data         000009ac  20000000  0c008e98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000010c  200009ac  0c009844  000209ac  2**2
                  ALLOC
  8 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  9 DSRAM2_DATA   00000000  30000000  30000000  000209ac  2**0
                  CONTENTS
 10 DSRAM2_BSS    00000000  30000000  30000000  000209ac  2**0
                  CONTENTS
 11 .debug_aranges 00000530  00000000  00000000  000209b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000075f6  00000000  00000000  00020ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ed2  00000000  00000000  000284d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000023f1  00000000  00000000  000293a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000021c8  00000000  00000000  0002b79c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0007a7d7  00000000  00000000  0002d964  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00002c64  00000000  00000000  000a813b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000004b0  00000000  00000000  000aad9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .build_attributes 0000075d  00000000  00000000  000ab24f  2**0
                  CONTENTS, READONLY
 20 .debug_macro  000198d5  00000000  00000000  000ab9ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	c5 04 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c008e98 	.word	0x0c008e98
 800024c:	20000000 	.word	0x20000000
 8000250:	000009ac 	.word	0x000009ac
 8000254:	0c009844 	.word	0x0c009844
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c008e98 	.word	0x0c008e98
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c008e98 	.word	0x0c008e98
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009ac 	.word	0x200009ac
 800027c:	00000108 	.word	0x00000108
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	080026c1 	.word	0x080026c1
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	08002ac9 	.word	0x08002ac9
    ldr  r0, =main
 80002ac:	080003b9 	.word	0x080003b9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	db0a      	blt.n	80002de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <__NVIC_SetPriority+0x4c>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002dc:	e00a      	b.n	80002f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4908      	ldr	r1, [pc, #32]	; (8000304 <__NVIC_SetPriority+0x50>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	3b04      	subs	r3, #4
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	440b      	add	r3, r1
 80002f2:	761a      	strb	r2, [r3, #24]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000318:	d301      	bcc.n	800031e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2301      	movs	r3, #1
 800031c:	e00f      	b.n	800033e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <SysTick_Config+0x40>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3b01      	subs	r3, #1
 8000324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000326:	213f      	movs	r1, #63	; 0x3f
 8000328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800032c:	f7ff ffc2 	bl	80002b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_Config+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Config+0x40>)
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010

0800034c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2201      	movs	r2, #1
 800035c:	409a      	lsls	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	460b      	mov	r3, r1
 8000378:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000380:	409a      	lsls	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000392:	b480      	push	{r7}
 8000394:	b083      	sub	sp, #12
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	460b      	mov	r3, r1
 800039c:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003a2:	78fb      	ldrb	r3, [r7, #3]
 80003a4:	fa22 f303 	lsr.w	r3, r2, r3
 80003a8:	f003 0301 	and.w	r3, r3, #1
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <main>:
// Initialize the GPIO pin for the button_2
const XMC_GPIO_CONFIG_t BUTTON_2_config =
    {.mode = XMC_GPIO_MODE_INPUT_PULL_DOWN};

int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  // Initialize the XMC Peripheral Library and other necessary peripherals

  XMC_GPIO_Init(XMC_GPIO_PORT1, LED_PIN, &led_config);
 80003bc:	4a34      	ldr	r2, [pc, #208]	; (8000490 <main+0xd8>)
 80003be:	2100      	movs	r1, #0
 80003c0:	4834      	ldr	r0, [pc, #208]	; (8000494 <main+0xdc>)
 80003c2:	f002 f883 	bl	80024cc <XMC_GPIO_Init>

  XMC_GPIO_Init(XMC_GPIO_PORT1, BUTTON_1_PIN, &BUTTON_1_config);
 80003c6:	4a34      	ldr	r2, [pc, #208]	; (8000498 <main+0xe0>)
 80003c8:	210e      	movs	r1, #14
 80003ca:	4832      	ldr	r0, [pc, #200]	; (8000494 <main+0xdc>)
 80003cc:	f002 f87e 	bl	80024cc <XMC_GPIO_Init>

  XMC_GPIO_Init(XMC_GPIO_PORT1, BUTTON_2_PIN, &BUTTON_2_config);
 80003d0:	4a32      	ldr	r2, [pc, #200]	; (800049c <main+0xe4>)
 80003d2:	210f      	movs	r1, #15
 80003d4:	482f      	ldr	r0, [pc, #188]	; (8000494 <main+0xdc>)
 80003d6:	f002 f879 	bl	80024cc <XMC_GPIO_Init>

  SysTick_Config(SystemCoreClock / 1000); // Generate interrupt every 1 ms
 80003da:	4b31      	ldr	r3, [pc, #196]	; (80004a0 <main+0xe8>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a31      	ldr	r2, [pc, #196]	; (80004a4 <main+0xec>)
 80003e0:	fba2 2303 	umull	r2, r3, r2, r3
 80003e4:	099b      	lsrs	r3, r3, #6
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff8e 	bl	8000308 <SysTick_Config>

  while (1)
  {

    if (!(XMC_GPIO_GetInput(XMC_GPIO_PORT1, BUTTON_1_PIN)))
 80003ec:	210e      	movs	r1, #14
 80003ee:	4829      	ldr	r0, [pc, #164]	; (8000494 <main+0xdc>)
 80003f0:	f7ff ffcf 	bl	8000392 <XMC_GPIO_GetInput>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d113      	bne.n	8000422 <main+0x6a>
    {

      if (button_1_pressed_time == 0)
 80003fa:	4b2b      	ldr	r3, [pc, #172]	; (80004a8 <main+0xf0>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d104      	bne.n	800040c <main+0x54>
      {
        button_1_pressed_time = system_ticks;
 8000402:	4b2a      	ldr	r3, [pc, #168]	; (80004ac <main+0xf4>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a28      	ldr	r2, [pc, #160]	; (80004a8 <main+0xf0>)
 8000408:	6013      	str	r3, [r2, #0]
 800040a:	e007      	b.n	800041c <main+0x64>
      }
      else
      {
        prev_button_1_pressed_time = button_1_pressed_time;
 800040c:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <main+0xf0>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a27      	ldr	r2, [pc, #156]	; (80004b0 <main+0xf8>)
 8000412:	6013      	str	r3, [r2, #0]
        button_1_pressed_time = system_ticks;
 8000414:	4b25      	ldr	r3, [pc, #148]	; (80004ac <main+0xf4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a23      	ldr	r2, [pc, #140]	; (80004a8 <main+0xf0>)
 800041a:	6013      	str	r3, [r2, #0]
      }

      output_morse_code("I CAN MORSE");
 800041c:	4825      	ldr	r0, [pc, #148]	; (80004b4 <main+0xfc>)
 800041e:	f000 f8b5 	bl	800058c <output_morse_code>
    }

    if (!(XMC_GPIO_GetInput(XMC_GPIO_PORT1, BUTTON_2_PIN)))
 8000422:	210f      	movs	r1, #15
 8000424:	481b      	ldr	r0, [pc, #108]	; (8000494 <main+0xdc>)
 8000426:	f7ff ffb4 	bl	8000392 <XMC_GPIO_GetInput>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1dd      	bne.n	80003ec <main+0x34>
    {
      // If Button1 has not been pressed yet, send a single 0 digit.
      if (button_1_pressed_time == 0)
 8000430:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <main+0xf0>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d102      	bne.n	800043e <main+0x86>
      {
        output_morse_code("0");
 8000438:	481f      	ldr	r0, [pc, #124]	; (80004b8 <main+0x100>)
 800043a:	f000 f8a7 	bl	800058c <output_morse_code>
      }
      // If Button1 has only been pressed once, send the time between boot and the first
      // press of Button1.
      if (button_1_pressed_time != 0 && prev_button_1_pressed_time == 0)
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <main+0xf0>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d00d      	beq.n	8000462 <main+0xaa>
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <main+0xf8>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d109      	bne.n	8000462 <main+0xaa>
      {
        // Convert uint32_t to char

        sprintf(time_difference, "%lu", button_1_pressed_time);
 800044e:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <main+0xf0>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	461a      	mov	r2, r3
 8000454:	4919      	ldr	r1, [pc, #100]	; (80004bc <main+0x104>)
 8000456:	481a      	ldr	r0, [pc, #104]	; (80004c0 <main+0x108>)
 8000458:	f002 fb78 	bl	8002b4c <sprintf>
        output_morse_code(time_difference);
 800045c:	4818      	ldr	r0, [pc, #96]	; (80004c0 <main+0x108>)
 800045e:	f000 f895 	bl	800058c <output_morse_code>
      }
      // Once Button2 is pressed down (not when it is released), the time between the last and
      // second last press of Button1 in milliseconds is sent once
      // The time has to be sent in decimal notation without leading zeroes or decimal point.
      // Round off to full milliseconds.
      if (button_1_pressed_time != 0 && prev_button_1_pressed_time != 0)
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <main+0xf0>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d0c0      	beq.n	80003ec <main+0x34>
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <main+0xf8>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0bc      	beq.n	80003ec <main+0x34>
      {
        // Convert uint32_t to char

        sprintf(time_difference, "%lu", button_1_pressed_time - prev_button_1_pressed_time);
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <main+0xf0>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <main+0xf8>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	1ad3      	subs	r3, r2, r3
 800047c:	461a      	mov	r2, r3
 800047e:	490f      	ldr	r1, [pc, #60]	; (80004bc <main+0x104>)
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <main+0x108>)
 8000482:	f002 fb63 	bl	8002b4c <sprintf>

        output_morse_code(time_difference);
 8000486:	480e      	ldr	r0, [pc, #56]	; (80004c0 <main+0x108>)
 8000488:	f000 f880 	bl	800058c <output_morse_code>
    if (!(XMC_GPIO_GetInput(XMC_GPIO_PORT1, BUTTON_1_PIN)))
 800048c:	e7ae      	b.n	80003ec <main+0x34>
 800048e:	bf00      	nop
 8000490:	08008b84 	.word	0x08008b84
 8000494:	48028100 	.word	0x48028100
 8000498:	08008b90 	.word	0x08008b90
 800049c:	08008b9c 	.word	0x08008b9c
 80004a0:	2000ffc0 	.word	0x2000ffc0
 80004a4:	10624dd3 	.word	0x10624dd3
 80004a8:	200009b0 	.word	0x200009b0
 80004ac:	200009ac 	.word	0x200009ac
 80004b0:	200009b4 	.word	0x200009b4
 80004b4:	08008ba8 	.word	0x08008ba8
 80004b8:	08008bb4 	.word	0x08008bb4
 80004bc:	08008bb8 	.word	0x08008bb8
 80004c0:	200009f8 	.word	0x200009f8

080004c4 <SysTick_Handler>:

  return 0;
}

void SysTick_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  system_ticks++;
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <SysTick_Handler+0x18>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3301      	adds	r3, #1
 80004ce:	4a03      	ldr	r2, [pc, #12]	; (80004dc <SysTick_Handler+0x18>)
 80004d0:	6013      	str	r3, [r2, #0]
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	200009ac 	.word	0x200009ac

080004e0 <delay_ms>:

void delay_ms(uint32_t delay_val)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]

  // Get the current system tick count
  uint32_t start_ticks = system_ticks;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <delay_ms+0x30>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	60fb      	str	r3, [r7, #12]

  // Calculate the number of ticks required for the delay
  uint32_t delay_ticks = delay_val;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	60bb      	str	r3, [r7, #8]

  // Wait until the required delay has elapsed
  while ((system_ticks - start_ticks) < delay_ticks)
 80004f2:	bf00      	nop
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <delay_ms+0x30>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d8f8      	bhi.n	80004f4 <delay_ms+0x14>
  {
  }
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	200009ac 	.word	0x200009ac

08000514 <dot_LED>:

void dot_LED(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, LED_PIN); // Turn on the LED
 8000518:	2100      	movs	r1, #0
 800051a:	4806      	ldr	r0, [pc, #24]	; (8000534 <dot_LED+0x20>)
 800051c:	f7ff ff16 	bl	800034c <XMC_GPIO_SetOutputHigh>
  delay_ms(100);                                   // Delay for 100 milliseconds
 8000520:	2064      	movs	r0, #100	; 0x64
 8000522:	f7ff ffdd 	bl	80004e0 <delay_ms>
  XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, LED_PIN);  // Turn off the LED
 8000526:	2100      	movs	r1, #0
 8000528:	4802      	ldr	r0, [pc, #8]	; (8000534 <dot_LED+0x20>)
 800052a:	f7ff ff20 	bl	800036e <XMC_GPIO_SetOutputLow>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	48028100 	.word	0x48028100

08000538 <dash_LED>:

void dash_LED(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, LED_PIN); // Turn on the LED
 800053c:	2100      	movs	r1, #0
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <dash_LED+0x20>)
 8000540:	f7ff ff04 	bl	800034c <XMC_GPIO_SetOutputHigh>
  delay_ms(300);                                   // Delay for 300 milliseconds
 8000544:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000548:	f7ff ffca 	bl	80004e0 <delay_ms>
  XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, LED_PIN);  // Turn off the LED
 800054c:	2100      	movs	r1, #0
 800054e:	4802      	ldr	r0, [pc, #8]	; (8000558 <dash_LED+0x20>)
 8000550:	f7ff ff0d 	bl	800036e <XMC_GPIO_SetOutputLow>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	48028100 	.word	0x48028100

0800055c <space_symbol>:

void space_symbol(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  delay_ms(100); // Delay for 100 milliseconds
 8000560:	2064      	movs	r0, #100	; 0x64
 8000562:	f7ff ffbd 	bl	80004e0 <delay_ms>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}

0800056a <space_letter>:

void space_letter(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0
  delay_ms(300); // Delay for 300 milliseconds
 800056e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000572:	f7ff ffb5 	bl	80004e0 <delay_ms>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}

0800057a <space_word>:

void space_word(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
  delay_ms(700); // Delay for 700 milliseconds
 800057e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000582:	f7ff ffad 	bl	80004e0 <delay_ms>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <output_morse_code>:

void output_morse_code(char *string)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  int i = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  while (string[i] != '\0')
 8000598:	e2cd      	b.n	8000b36 <output_morse_code+0x5aa>
  {
    switch (string[i] | 0x20 /* Convert to lower case */)
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	3b20      	subs	r3, #32
 80005aa:	2b5a      	cmp	r3, #90	; 0x5a
 80005ac:	f200 82a9 	bhi.w	8000b02 <output_morse_code+0x576>
 80005b0:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <output_morse_code+0x2c>)
 80005b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b6:	bf00      	nop
 80005b8:	08000afd 	.word	0x08000afd
 80005bc:	08000b03 	.word	0x08000b03
 80005c0:	08000b03 	.word	0x08000b03
 80005c4:	08000b03 	.word	0x08000b03
 80005c8:	08000b03 	.word	0x08000b03
 80005cc:	08000b03 	.word	0x08000b03
 80005d0:	08000b03 	.word	0x08000b03
 80005d4:	08000b03 	.word	0x08000b03
 80005d8:	08000b03 	.word	0x08000b03
 80005dc:	08000b03 	.word	0x08000b03
 80005e0:	08000b03 	.word	0x08000b03
 80005e4:	08000b03 	.word	0x08000b03
 80005e8:	08000b03 	.word	0x08000b03
 80005ec:	08000b03 	.word	0x08000b03
 80005f0:	08000b03 	.word	0x08000b03
 80005f4:	08000b03 	.word	0x08000b03
 80005f8:	08000981 	.word	0x08000981
 80005fc:	080009a7 	.word	0x080009a7
 8000600:	080009cd 	.word	0x080009cd
 8000604:	080009f3 	.word	0x080009f3
 8000608:	08000a19 	.word	0x08000a19
 800060c:	08000a3f 	.word	0x08000a3f
 8000610:	08000a65 	.word	0x08000a65
 8000614:	08000a8b 	.word	0x08000a8b
 8000618:	08000ab1 	.word	0x08000ab1
 800061c:	08000ad7 	.word	0x08000ad7
 8000620:	08000b03 	.word	0x08000b03
 8000624:	08000b03 	.word	0x08000b03
 8000628:	08000b03 	.word	0x08000b03
 800062c:	08000b03 	.word	0x08000b03
 8000630:	08000b03 	.word	0x08000b03
 8000634:	08000b03 	.word	0x08000b03
 8000638:	08000b03 	.word	0x08000b03
 800063c:	08000b03 	.word	0x08000b03
 8000640:	08000b03 	.word	0x08000b03
 8000644:	08000b03 	.word	0x08000b03
 8000648:	08000b03 	.word	0x08000b03
 800064c:	08000b03 	.word	0x08000b03
 8000650:	08000b03 	.word	0x08000b03
 8000654:	08000b03 	.word	0x08000b03
 8000658:	08000b03 	.word	0x08000b03
 800065c:	08000b03 	.word	0x08000b03
 8000660:	08000b03 	.word	0x08000b03
 8000664:	08000b03 	.word	0x08000b03
 8000668:	08000b03 	.word	0x08000b03
 800066c:	08000b03 	.word	0x08000b03
 8000670:	08000b03 	.word	0x08000b03
 8000674:	08000b03 	.word	0x08000b03
 8000678:	08000b03 	.word	0x08000b03
 800067c:	08000b03 	.word	0x08000b03
 8000680:	08000b03 	.word	0x08000b03
 8000684:	08000b03 	.word	0x08000b03
 8000688:	08000b03 	.word	0x08000b03
 800068c:	08000b03 	.word	0x08000b03
 8000690:	08000b03 	.word	0x08000b03
 8000694:	08000b03 	.word	0x08000b03
 8000698:	08000b03 	.word	0x08000b03
 800069c:	08000b03 	.word	0x08000b03
 80006a0:	08000b03 	.word	0x08000b03
 80006a4:	08000b03 	.word	0x08000b03
 80006a8:	08000b03 	.word	0x08000b03
 80006ac:	08000b03 	.word	0x08000b03
 80006b0:	08000b03 	.word	0x08000b03
 80006b4:	08000b03 	.word	0x08000b03
 80006b8:	08000b03 	.word	0x08000b03
 80006bc:	08000725 	.word	0x08000725
 80006c0:	08000733 	.word	0x08000733
 80006c4:	08000751 	.word	0x08000751
 80006c8:	0800076f 	.word	0x0800076f
 80006cc:	08000785 	.word	0x08000785
 80006d0:	0800078b 	.word	0x0800078b
 80006d4:	080007a9 	.word	0x080007a9
 80006d8:	080007bf 	.word	0x080007bf
 80006dc:	080007dd 	.word	0x080007dd
 80006e0:	080007eb 	.word	0x080007eb
 80006e4:	08000809 	.word	0x08000809
 80006e8:	0800081f 	.word	0x0800081f
 80006ec:	0800083d 	.word	0x0800083d
 80006f0:	0800084b 	.word	0x0800084b
 80006f4:	08000859 	.word	0x08000859
 80006f8:	0800086f 	.word	0x0800086f
 80006fc:	0800088d 	.word	0x0800088d
 8000700:	080008ab 	.word	0x080008ab
 8000704:	080008c1 	.word	0x080008c1
 8000708:	080008d7 	.word	0x080008d7
 800070c:	080008dd 	.word	0x080008dd
 8000710:	080008f3 	.word	0x080008f3
 8000714:	08000911 	.word	0x08000911
 8000718:	08000927 	.word	0x08000927
 800071c:	08000945 	.word	0x08000945
 8000720:	08000963 	.word	0x08000963
    {
    case 'a':
      dot_LED();
 8000724:	f7ff fef6 	bl	8000514 <dot_LED>
      space_symbol();
 8000728:	f7ff ff18 	bl	800055c <space_symbol>
      dash_LED();
 800072c:	f7ff ff04 	bl	8000538 <dash_LED>
      break;
 8000730:	e1e8      	b.n	8000b04 <output_morse_code+0x578>
    case 'b':
      dash_LED();
 8000732:	f7ff ff01 	bl	8000538 <dash_LED>
      space_symbol();
 8000736:	f7ff ff11 	bl	800055c <space_symbol>
      dot_LED();
 800073a:	f7ff feeb 	bl	8000514 <dot_LED>
      space_symbol();
 800073e:	f7ff ff0d 	bl	800055c <space_symbol>
      dot_LED();
 8000742:	f7ff fee7 	bl	8000514 <dot_LED>
      space_symbol();
 8000746:	f7ff ff09 	bl	800055c <space_symbol>
      dot_LED();
 800074a:	f7ff fee3 	bl	8000514 <dot_LED>
      break;
 800074e:	e1d9      	b.n	8000b04 <output_morse_code+0x578>
    case 'c':
      dash_LED();
 8000750:	f7ff fef2 	bl	8000538 <dash_LED>
      space_symbol();
 8000754:	f7ff ff02 	bl	800055c <space_symbol>
      dot_LED();
 8000758:	f7ff fedc 	bl	8000514 <dot_LED>
      space_symbol();
 800075c:	f7ff fefe 	bl	800055c <space_symbol>
      dash_LED();
 8000760:	f7ff feea 	bl	8000538 <dash_LED>
      space_symbol();
 8000764:	f7ff fefa 	bl	800055c <space_symbol>
      dot_LED();
 8000768:	f7ff fed4 	bl	8000514 <dot_LED>
      break;
 800076c:	e1ca      	b.n	8000b04 <output_morse_code+0x578>
    case 'd':
      dash_LED();
 800076e:	f7ff fee3 	bl	8000538 <dash_LED>
      space_symbol();
 8000772:	f7ff fef3 	bl	800055c <space_symbol>
      dot_LED();
 8000776:	f7ff fecd 	bl	8000514 <dot_LED>
      space_symbol();
 800077a:	f7ff feef 	bl	800055c <space_symbol>
      dot_LED();
 800077e:	f7ff fec9 	bl	8000514 <dot_LED>
      break;
 8000782:	e1bf      	b.n	8000b04 <output_morse_code+0x578>
    case 'e':
      dot_LED();
 8000784:	f7ff fec6 	bl	8000514 <dot_LED>
      break;
 8000788:	e1bc      	b.n	8000b04 <output_morse_code+0x578>
    case 'f':
      dot_LED();
 800078a:	f7ff fec3 	bl	8000514 <dot_LED>
      space_symbol();
 800078e:	f7ff fee5 	bl	800055c <space_symbol>
      dot_LED();
 8000792:	f7ff febf 	bl	8000514 <dot_LED>
      space_symbol();
 8000796:	f7ff fee1 	bl	800055c <space_symbol>
      dash_LED();
 800079a:	f7ff fecd 	bl	8000538 <dash_LED>
      space_symbol();
 800079e:	f7ff fedd 	bl	800055c <space_symbol>
      dot_LED();
 80007a2:	f7ff feb7 	bl	8000514 <dot_LED>
      break;
 80007a6:	e1ad      	b.n	8000b04 <output_morse_code+0x578>
    case 'g':
      dash_LED();
 80007a8:	f7ff fec6 	bl	8000538 <dash_LED>
      space_symbol();
 80007ac:	f7ff fed6 	bl	800055c <space_symbol>
      dash_LED();
 80007b0:	f7ff fec2 	bl	8000538 <dash_LED>
      space_symbol();
 80007b4:	f7ff fed2 	bl	800055c <space_symbol>
      dot_LED();
 80007b8:	f7ff feac 	bl	8000514 <dot_LED>
      break;
 80007bc:	e1a2      	b.n	8000b04 <output_morse_code+0x578>
    case 'h':
      dot_LED();
 80007be:	f7ff fea9 	bl	8000514 <dot_LED>
      space_symbol();
 80007c2:	f7ff fecb 	bl	800055c <space_symbol>
      dot_LED();
 80007c6:	f7ff fea5 	bl	8000514 <dot_LED>
      space_symbol();
 80007ca:	f7ff fec7 	bl	800055c <space_symbol>
      dot_LED();
 80007ce:	f7ff fea1 	bl	8000514 <dot_LED>
      space_symbol();
 80007d2:	f7ff fec3 	bl	800055c <space_symbol>
      dot_LED();
 80007d6:	f7ff fe9d 	bl	8000514 <dot_LED>
      break;
 80007da:	e193      	b.n	8000b04 <output_morse_code+0x578>
    case 'i':
      dot_LED();
 80007dc:	f7ff fe9a 	bl	8000514 <dot_LED>
      space_symbol();
 80007e0:	f7ff febc 	bl	800055c <space_symbol>
      dot_LED();
 80007e4:	f7ff fe96 	bl	8000514 <dot_LED>
      break;
 80007e8:	e18c      	b.n	8000b04 <output_morse_code+0x578>
    case 'j':
      dot_LED();
 80007ea:	f7ff fe93 	bl	8000514 <dot_LED>
      space_symbol();
 80007ee:	f7ff feb5 	bl	800055c <space_symbol>
      dash_LED();
 80007f2:	f7ff fea1 	bl	8000538 <dash_LED>
      space_symbol();
 80007f6:	f7ff feb1 	bl	800055c <space_symbol>
      dash_LED();
 80007fa:	f7ff fe9d 	bl	8000538 <dash_LED>
      space_symbol();
 80007fe:	f7ff fead 	bl	800055c <space_symbol>
      dash_LED();
 8000802:	f7ff fe99 	bl	8000538 <dash_LED>
      break;
 8000806:	e17d      	b.n	8000b04 <output_morse_code+0x578>
    case 'k':
      dash_LED();
 8000808:	f7ff fe96 	bl	8000538 <dash_LED>
      space_symbol();
 800080c:	f7ff fea6 	bl	800055c <space_symbol>
      dot_LED();
 8000810:	f7ff fe80 	bl	8000514 <dot_LED>
      space_symbol();
 8000814:	f7ff fea2 	bl	800055c <space_symbol>
      dash_LED();
 8000818:	f7ff fe8e 	bl	8000538 <dash_LED>
      break;
 800081c:	e172      	b.n	8000b04 <output_morse_code+0x578>
    case 'l':
      dot_LED();
 800081e:	f7ff fe79 	bl	8000514 <dot_LED>
      space_symbol();
 8000822:	f7ff fe9b 	bl	800055c <space_symbol>
      dash_LED();
 8000826:	f7ff fe87 	bl	8000538 <dash_LED>
      space_symbol();
 800082a:	f7ff fe97 	bl	800055c <space_symbol>
      dot_LED();
 800082e:	f7ff fe71 	bl	8000514 <dot_LED>
      space_symbol();
 8000832:	f7ff fe93 	bl	800055c <space_symbol>
      dot_LED();
 8000836:	f7ff fe6d 	bl	8000514 <dot_LED>
      break;
 800083a:	e163      	b.n	8000b04 <output_morse_code+0x578>
    case 'm':
      dash_LED();
 800083c:	f7ff fe7c 	bl	8000538 <dash_LED>
      space_symbol();
 8000840:	f7ff fe8c 	bl	800055c <space_symbol>
      dash_LED();
 8000844:	f7ff fe78 	bl	8000538 <dash_LED>
      break;
 8000848:	e15c      	b.n	8000b04 <output_morse_code+0x578>
    case 'n':
      dash_LED();
 800084a:	f7ff fe75 	bl	8000538 <dash_LED>
      space_symbol();
 800084e:	f7ff fe85 	bl	800055c <space_symbol>
      dot_LED();
 8000852:	f7ff fe5f 	bl	8000514 <dot_LED>
      break;
 8000856:	e155      	b.n	8000b04 <output_morse_code+0x578>
    case 'o':
      dash_LED();
 8000858:	f7ff fe6e 	bl	8000538 <dash_LED>
      space_symbol();
 800085c:	f7ff fe7e 	bl	800055c <space_symbol>
      dash_LED();
 8000860:	f7ff fe6a 	bl	8000538 <dash_LED>
      space_symbol();
 8000864:	f7ff fe7a 	bl	800055c <space_symbol>
      dash_LED();
 8000868:	f7ff fe66 	bl	8000538 <dash_LED>
      break;
 800086c:	e14a      	b.n	8000b04 <output_morse_code+0x578>
    case 'p':
      dot_LED();
 800086e:	f7ff fe51 	bl	8000514 <dot_LED>
      space_symbol();
 8000872:	f7ff fe73 	bl	800055c <space_symbol>
      dash_LED();
 8000876:	f7ff fe5f 	bl	8000538 <dash_LED>
      space_symbol();
 800087a:	f7ff fe6f 	bl	800055c <space_symbol>
      dash_LED();
 800087e:	f7ff fe5b 	bl	8000538 <dash_LED>
      space_symbol();
 8000882:	f7ff fe6b 	bl	800055c <space_symbol>
      dot_LED();
 8000886:	f7ff fe45 	bl	8000514 <dot_LED>
      break;
 800088a:	e13b      	b.n	8000b04 <output_morse_code+0x578>
    case 'q':
      dash_LED();
 800088c:	f7ff fe54 	bl	8000538 <dash_LED>
      space_symbol();
 8000890:	f7ff fe64 	bl	800055c <space_symbol>
      dash_LED();
 8000894:	f7ff fe50 	bl	8000538 <dash_LED>
      space_symbol();
 8000898:	f7ff fe60 	bl	800055c <space_symbol>
      dot_LED();
 800089c:	f7ff fe3a 	bl	8000514 <dot_LED>
      space_symbol();
 80008a0:	f7ff fe5c 	bl	800055c <space_symbol>
      dash_LED();
 80008a4:	f7ff fe48 	bl	8000538 <dash_LED>
      break;
 80008a8:	e12c      	b.n	8000b04 <output_morse_code+0x578>
    case 'r':
      dot_LED();
 80008aa:	f7ff fe33 	bl	8000514 <dot_LED>
      space_symbol();
 80008ae:	f7ff fe55 	bl	800055c <space_symbol>
      dash_LED();
 80008b2:	f7ff fe41 	bl	8000538 <dash_LED>
      space_symbol();
 80008b6:	f7ff fe51 	bl	800055c <space_symbol>
      dot_LED();
 80008ba:	f7ff fe2b 	bl	8000514 <dot_LED>
      break;
 80008be:	e121      	b.n	8000b04 <output_morse_code+0x578>
    case 's':
      dot_LED();
 80008c0:	f7ff fe28 	bl	8000514 <dot_LED>
      space_symbol();
 80008c4:	f7ff fe4a 	bl	800055c <space_symbol>
      dot_LED();
 80008c8:	f7ff fe24 	bl	8000514 <dot_LED>
      space_symbol();
 80008cc:	f7ff fe46 	bl	800055c <space_symbol>
      dot_LED();
 80008d0:	f7ff fe20 	bl	8000514 <dot_LED>
      break;
 80008d4:	e116      	b.n	8000b04 <output_morse_code+0x578>
    case 't':
      dash_LED();
 80008d6:	f7ff fe2f 	bl	8000538 <dash_LED>
      break;
 80008da:	e113      	b.n	8000b04 <output_morse_code+0x578>
    case 'u':
      dot_LED();
 80008dc:	f7ff fe1a 	bl	8000514 <dot_LED>
      space_symbol();
 80008e0:	f7ff fe3c 	bl	800055c <space_symbol>
      dot_LED();
 80008e4:	f7ff fe16 	bl	8000514 <dot_LED>
      space_symbol();
 80008e8:	f7ff fe38 	bl	800055c <space_symbol>
      dash_LED();
 80008ec:	f7ff fe24 	bl	8000538 <dash_LED>
      break;
 80008f0:	e108      	b.n	8000b04 <output_morse_code+0x578>
    case 'v':
      dot_LED();
 80008f2:	f7ff fe0f 	bl	8000514 <dot_LED>
      space_symbol();
 80008f6:	f7ff fe31 	bl	800055c <space_symbol>
      dot_LED();
 80008fa:	f7ff fe0b 	bl	8000514 <dot_LED>
      space_symbol();
 80008fe:	f7ff fe2d 	bl	800055c <space_symbol>
      dot_LED();
 8000902:	f7ff fe07 	bl	8000514 <dot_LED>
      space_symbol();
 8000906:	f7ff fe29 	bl	800055c <space_symbol>
      dash_LED();
 800090a:	f7ff fe15 	bl	8000538 <dash_LED>
      break;
 800090e:	e0f9      	b.n	8000b04 <output_morse_code+0x578>
    case 'w':
      dot_LED();
 8000910:	f7ff fe00 	bl	8000514 <dot_LED>
      space_symbol();
 8000914:	f7ff fe22 	bl	800055c <space_symbol>
      dash_LED();
 8000918:	f7ff fe0e 	bl	8000538 <dash_LED>
      space_symbol();
 800091c:	f7ff fe1e 	bl	800055c <space_symbol>
      dash_LED();
 8000920:	f7ff fe0a 	bl	8000538 <dash_LED>
      break;
 8000924:	e0ee      	b.n	8000b04 <output_morse_code+0x578>
    case 'x':
      dash_LED();
 8000926:	f7ff fe07 	bl	8000538 <dash_LED>
      space_symbol();
 800092a:	f7ff fe17 	bl	800055c <space_symbol>
      dot_LED();
 800092e:	f7ff fdf1 	bl	8000514 <dot_LED>
      space_symbol();
 8000932:	f7ff fe13 	bl	800055c <space_symbol>
      dot_LED();
 8000936:	f7ff fded 	bl	8000514 <dot_LED>
      space_symbol();
 800093a:	f7ff fe0f 	bl	800055c <space_symbol>
      dash_LED();
 800093e:	f7ff fdfb 	bl	8000538 <dash_LED>
      break;
 8000942:	e0df      	b.n	8000b04 <output_morse_code+0x578>
    case 'y':
      dash_LED();
 8000944:	f7ff fdf8 	bl	8000538 <dash_LED>
      space_symbol();
 8000948:	f7ff fe08 	bl	800055c <space_symbol>
      dot_LED();
 800094c:	f7ff fde2 	bl	8000514 <dot_LED>
      space_symbol();
 8000950:	f7ff fe04 	bl	800055c <space_symbol>
      dash_LED();
 8000954:	f7ff fdf0 	bl	8000538 <dash_LED>
      space_symbol();
 8000958:	f7ff fe00 	bl	800055c <space_symbol>
      dash_LED();
 800095c:	f7ff fdec 	bl	8000538 <dash_LED>
      break;
 8000960:	e0d0      	b.n	8000b04 <output_morse_code+0x578>
    case 'z':
      dash_LED();
 8000962:	f7ff fde9 	bl	8000538 <dash_LED>
      space_symbol();
 8000966:	f7ff fdf9 	bl	800055c <space_symbol>
      dash_LED();
 800096a:	f7ff fde5 	bl	8000538 <dash_LED>
      space_symbol();
 800096e:	f7ff fdf5 	bl	800055c <space_symbol>
      dot_LED();
 8000972:	f7ff fdcf 	bl	8000514 <dot_LED>
      space_symbol();
 8000976:	f7ff fdf1 	bl	800055c <space_symbol>
      dot_LED();
 800097a:	f7ff fdcb 	bl	8000514 <dot_LED>
      break;
 800097e:	e0c1      	b.n	8000b04 <output_morse_code+0x578>
    case '0':
      dash_LED();
 8000980:	f7ff fdda 	bl	8000538 <dash_LED>
      space_symbol();
 8000984:	f7ff fdea 	bl	800055c <space_symbol>
      dash_LED();
 8000988:	f7ff fdd6 	bl	8000538 <dash_LED>
      space_symbol();
 800098c:	f7ff fde6 	bl	800055c <space_symbol>
      dash_LED();
 8000990:	f7ff fdd2 	bl	8000538 <dash_LED>
      space_symbol();
 8000994:	f7ff fde2 	bl	800055c <space_symbol>
      dash_LED();
 8000998:	f7ff fdce 	bl	8000538 <dash_LED>
      space_symbol();
 800099c:	f7ff fdde 	bl	800055c <space_symbol>
      dash_LED();
 80009a0:	f7ff fdca 	bl	8000538 <dash_LED>
      break;
 80009a4:	e0ae      	b.n	8000b04 <output_morse_code+0x578>
    case '1':
      dot_LED();
 80009a6:	f7ff fdb5 	bl	8000514 <dot_LED>
      space_symbol();
 80009aa:	f7ff fdd7 	bl	800055c <space_symbol>
      dash_LED();
 80009ae:	f7ff fdc3 	bl	8000538 <dash_LED>
      space_symbol();
 80009b2:	f7ff fdd3 	bl	800055c <space_symbol>
      dash_LED();
 80009b6:	f7ff fdbf 	bl	8000538 <dash_LED>
      space_symbol();
 80009ba:	f7ff fdcf 	bl	800055c <space_symbol>
      dash_LED();
 80009be:	f7ff fdbb 	bl	8000538 <dash_LED>
      space_symbol();
 80009c2:	f7ff fdcb 	bl	800055c <space_symbol>
      dash_LED();
 80009c6:	f7ff fdb7 	bl	8000538 <dash_LED>
      break;
 80009ca:	e09b      	b.n	8000b04 <output_morse_code+0x578>
    case '2':
      dot_LED();
 80009cc:	f7ff fda2 	bl	8000514 <dot_LED>
      space_symbol();
 80009d0:	f7ff fdc4 	bl	800055c <space_symbol>
      dot_LED();
 80009d4:	f7ff fd9e 	bl	8000514 <dot_LED>
      space_symbol();
 80009d8:	f7ff fdc0 	bl	800055c <space_symbol>
      dash_LED();
 80009dc:	f7ff fdac 	bl	8000538 <dash_LED>
      space_symbol();
 80009e0:	f7ff fdbc 	bl	800055c <space_symbol>
      dash_LED();
 80009e4:	f7ff fda8 	bl	8000538 <dash_LED>
      space_symbol();
 80009e8:	f7ff fdb8 	bl	800055c <space_symbol>
      dash_LED();
 80009ec:	f7ff fda4 	bl	8000538 <dash_LED>
      break;
 80009f0:	e088      	b.n	8000b04 <output_morse_code+0x578>
    case '3':
      dot_LED();
 80009f2:	f7ff fd8f 	bl	8000514 <dot_LED>
      space_symbol();
 80009f6:	f7ff fdb1 	bl	800055c <space_symbol>
      dot_LED();
 80009fa:	f7ff fd8b 	bl	8000514 <dot_LED>
      space_symbol();
 80009fe:	f7ff fdad 	bl	800055c <space_symbol>
      dot_LED();
 8000a02:	f7ff fd87 	bl	8000514 <dot_LED>
      space_symbol();
 8000a06:	f7ff fda9 	bl	800055c <space_symbol>
      dash_LED();
 8000a0a:	f7ff fd95 	bl	8000538 <dash_LED>
      space_symbol();
 8000a0e:	f7ff fda5 	bl	800055c <space_symbol>
      dash_LED();
 8000a12:	f7ff fd91 	bl	8000538 <dash_LED>
      break;
 8000a16:	e075      	b.n	8000b04 <output_morse_code+0x578>
    case '4':
      dot_LED();
 8000a18:	f7ff fd7c 	bl	8000514 <dot_LED>
      space_symbol();
 8000a1c:	f7ff fd9e 	bl	800055c <space_symbol>
      dot_LED();
 8000a20:	f7ff fd78 	bl	8000514 <dot_LED>
      space_symbol();
 8000a24:	f7ff fd9a 	bl	800055c <space_symbol>
      dot_LED();
 8000a28:	f7ff fd74 	bl	8000514 <dot_LED>
      space_symbol();
 8000a2c:	f7ff fd96 	bl	800055c <space_symbol>
      dot_LED();
 8000a30:	f7ff fd70 	bl	8000514 <dot_LED>
      space_symbol();
 8000a34:	f7ff fd92 	bl	800055c <space_symbol>
      dash_LED();
 8000a38:	f7ff fd7e 	bl	8000538 <dash_LED>
      break;
 8000a3c:	e062      	b.n	8000b04 <output_morse_code+0x578>
    case '5':
      dot_LED();
 8000a3e:	f7ff fd69 	bl	8000514 <dot_LED>
      space_symbol();
 8000a42:	f7ff fd8b 	bl	800055c <space_symbol>
      dot_LED();
 8000a46:	f7ff fd65 	bl	8000514 <dot_LED>
      space_symbol();
 8000a4a:	f7ff fd87 	bl	800055c <space_symbol>
      dot_LED();
 8000a4e:	f7ff fd61 	bl	8000514 <dot_LED>
      space_symbol();
 8000a52:	f7ff fd83 	bl	800055c <space_symbol>
      dot_LED();
 8000a56:	f7ff fd5d 	bl	8000514 <dot_LED>
      space_symbol();
 8000a5a:	f7ff fd7f 	bl	800055c <space_symbol>
      dot_LED();
 8000a5e:	f7ff fd59 	bl	8000514 <dot_LED>
      break;
 8000a62:	e04f      	b.n	8000b04 <output_morse_code+0x578>
    case '6':
      dash_LED();
 8000a64:	f7ff fd68 	bl	8000538 <dash_LED>
      space_symbol();
 8000a68:	f7ff fd78 	bl	800055c <space_symbol>
      dot_LED();
 8000a6c:	f7ff fd52 	bl	8000514 <dot_LED>
      space_symbol();
 8000a70:	f7ff fd74 	bl	800055c <space_symbol>
      dot_LED();
 8000a74:	f7ff fd4e 	bl	8000514 <dot_LED>
      space_symbol();
 8000a78:	f7ff fd70 	bl	800055c <space_symbol>
      dot_LED();
 8000a7c:	f7ff fd4a 	bl	8000514 <dot_LED>
      space_symbol();
 8000a80:	f7ff fd6c 	bl	800055c <space_symbol>
      dot_LED();
 8000a84:	f7ff fd46 	bl	8000514 <dot_LED>
      break;
 8000a88:	e03c      	b.n	8000b04 <output_morse_code+0x578>
    case '7':
      dash_LED();
 8000a8a:	f7ff fd55 	bl	8000538 <dash_LED>
      space_symbol();
 8000a8e:	f7ff fd65 	bl	800055c <space_symbol>
      dash_LED();
 8000a92:	f7ff fd51 	bl	8000538 <dash_LED>
      space_symbol();
 8000a96:	f7ff fd61 	bl	800055c <space_symbol>
      dot_LED();
 8000a9a:	f7ff fd3b 	bl	8000514 <dot_LED>
      space_symbol();
 8000a9e:	f7ff fd5d 	bl	800055c <space_symbol>
      dot_LED();
 8000aa2:	f7ff fd37 	bl	8000514 <dot_LED>
      space_symbol();
 8000aa6:	f7ff fd59 	bl	800055c <space_symbol>
      dot_LED();
 8000aaa:	f7ff fd33 	bl	8000514 <dot_LED>
      break;
 8000aae:	e029      	b.n	8000b04 <output_morse_code+0x578>
    case '8':
      dash_LED();
 8000ab0:	f7ff fd42 	bl	8000538 <dash_LED>
      space_symbol();
 8000ab4:	f7ff fd52 	bl	800055c <space_symbol>
      dash_LED();
 8000ab8:	f7ff fd3e 	bl	8000538 <dash_LED>
      space_symbol();
 8000abc:	f7ff fd4e 	bl	800055c <space_symbol>
      dash_LED();
 8000ac0:	f7ff fd3a 	bl	8000538 <dash_LED>
      space_symbol();
 8000ac4:	f7ff fd4a 	bl	800055c <space_symbol>
      dot_LED();
 8000ac8:	f7ff fd24 	bl	8000514 <dot_LED>
      space_symbol();
 8000acc:	f7ff fd46 	bl	800055c <space_symbol>
      dot_LED();
 8000ad0:	f7ff fd20 	bl	8000514 <dot_LED>
      break;
 8000ad4:	e016      	b.n	8000b04 <output_morse_code+0x578>
    case '9':
      dash_LED();
 8000ad6:	f7ff fd2f 	bl	8000538 <dash_LED>
      space_symbol();
 8000ada:	f7ff fd3f 	bl	800055c <space_symbol>
      dash_LED();
 8000ade:	f7ff fd2b 	bl	8000538 <dash_LED>
      space_symbol();
 8000ae2:	f7ff fd3b 	bl	800055c <space_symbol>
      dash_LED();
 8000ae6:	f7ff fd27 	bl	8000538 <dash_LED>
      space_symbol();
 8000aea:	f7ff fd37 	bl	800055c <space_symbol>
      dash_LED();
 8000aee:	f7ff fd23 	bl	8000538 <dash_LED>
      space_symbol();
 8000af2:	f7ff fd33 	bl	800055c <space_symbol>
      dot_LED();
 8000af6:	f7ff fd0d 	bl	8000514 <dot_LED>
      break;
 8000afa:	e003      	b.n	8000b04 <output_morse_code+0x578>
    case ' ':
      space_word();
 8000afc:	f7ff fd3d 	bl	800057a <space_word>
      break;
 8000b00:	e000      	b.n	8000b04 <output_morse_code+0x578>
    default:
      break;
 8000b02:	bf00      	nop
    }
    if (string[i] != ' ' && (string[i + 1] != ' ' && string[i + 1] != '\0'))
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b20      	cmp	r3, #32
 8000b0e:	d00f      	beq.n	8000b30 <output_morse_code+0x5a4>
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3301      	adds	r3, #1
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	4413      	add	r3, r2
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b20      	cmp	r3, #32
 8000b1c:	d008      	beq.n	8000b30 <output_morse_code+0x5a4>
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <output_morse_code+0x5a4>
    {
      space_letter();
 8000b2c:	f7ff fd1d 	bl	800056a <space_letter>
    }

    i++;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
  while (string[i] != '\0')
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f47f ad2b 	bne.w	800059a <output_morse_code+0xe>
  }
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	461a      	mov	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3204      	adds	r2, #4
 8000b68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	21f8      	movs	r1, #248	; 0xf8
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	78f9      	ldrb	r1, [r7, #3]
 8000b7e:	0889      	lsrs	r1, r1, #2
 8000b80:	b2c9      	uxtb	r1, r1
 8000b82:	4608      	mov	r0, r1
 8000b84:	ea02 0103 	and.w	r1, r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	1d02      	adds	r2, r0, #4
 8000b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	461a      	mov	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3204      	adds	r2, #4
 8000b9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ba0:	78b9      	ldrb	r1, [r7, #2]
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	f003 0303 	and.w	r3, r3, #3
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	78f9      	ldrb	r1, [r7, #3]
 8000bb0:	0889      	lsrs	r1, r1, #2
 8000bb2:	b2c9      	uxtb	r1, r1
 8000bb4:	4608      	mov	r0, r1
 8000bb6:	ea42 0103 	orr.w	r1, r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	1d02      	adds	r2, r0, #4
 8000bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	70fb      	strb	r3, [r7, #3]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2103      	movs	r1, #3
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	401a      	ands	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000bf8:	78b9      	ldrb	r1, [r7, #2]
 8000bfa:	78fb      	ldrb	r3, [r7, #3]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	50004600 	.word	0x50004600

08000c30 <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	50004600 	.word	0x50004600

08000c4c <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 8000c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	b2db      	uxtb	r3, r3
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	50004600 	.word	0x50004600

08000c6c <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	2000ffc0 	.word	0x2000ffc0
 8000c90:	50004600 	.word	0x50004600

08000c94 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	2000ffc0 	.word	0x2000ffc0

08000cac <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <XMC_SCU_GetMirrorStatus+0x14>)
 8000cb2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	50004000 	.word	0x50004000

08000cc4 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000ccc:	f001 fe46 	bl	800295c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <XMC_SCU_lDelay+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <XMC_SCU_lDelay+0x44>)
 8000cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cda:	0c9a      	lsrs	r2, r3, #18
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	fb02 f303 	mul.w	r3, r2, r3
 8000ce2:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	e003      	b.n	8000cf2 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000cea:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d3f7      	bcc.n	8000cea <XMC_SCU_lDelay+0x26>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000ffc0 	.word	0x2000ffc0
 8000d08:	431bde83 	.word	0x431bde83

08000d0c <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	4904      	ldr	r1, [pc, #16]	; (8000d2c <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	608b      	str	r3, [r1, #8]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	50004074 	.word	0x50004074

08000d30 <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	4904      	ldr	r1, [pc, #16]	; (8000d54 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8000d42:	4013      	ands	r3, r2
 8000d44:	608b      	str	r3, [r1, #8]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	50004074 	.word	0x50004074

08000d58 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	4904      	ldr	r1, [pc, #16]	; (8000d78 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	610b      	str	r3, [r1, #16]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	50004074 	.word	0x50004074

08000d7c <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000d82:	685b      	ldr	r3, [r3, #4]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	50004074 	.word	0x50004074

08000d94 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60d3      	str	r3, [r2, #12]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	50004074 	.word	0x50004074

08000db4 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <XMC_SCU_GetBootMode+0x18>)
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	50004000 	.word	0x50004000

08000dd0 <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <XMC_SCU_SetBootMode+0x1c>)
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	6113      	str	r3, [r2, #16]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	50004000 	.word	0x50004000

08000df0 <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 8000df8:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <XMC_SCU_ReadGPR+0x20>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	330a      	adds	r3, #10
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	685b      	ldr	r3, [r3, #4]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	50004000 	.word	0x50004000

08000e14 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 8000e1e:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <XMC_SCU_WriteGPR+0x24>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	330a      	adds	r3, #10
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	50004000 	.word	0x50004000

08000e3c <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3328      	adds	r3, #40	; 0x28
 8000e4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e50:	2101      	movs	r1, #1
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	4905      	ldr	r1, [pc, #20]	; (8000e70 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3328      	adds	r3, #40	; 0x28
 8000e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	50004000 	.word	0x50004000

08000e74 <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3328      	adds	r3, #40	; 0x28
 8000e84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	4906      	ldr	r1, [pc, #24]	; (8000eac <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8000e94:	401a      	ands	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3328      	adds	r3, #40	; 0x28
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	50004000 	.word	0x50004000

08000eb0 <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8000ec6:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000eca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	50004000 	.word	0x50004000

08000ee0 <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <XMC_SCU_EnableTemperatureSensor+0x20>)
 8000ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <XMC_SCU_EnableTemperatureSensor+0x20>)
 8000eec:	f023 0301 	bic.w	r3, r3, #1
 8000ef0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	50004000 	.word	0x50004000

08000f04 <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <XMC_SCU_DisableTemperatureSensor+0x20>)
 8000f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <XMC_SCU_DisableTemperatureSensor+0x20>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	50004000 	.word	0x50004000

08000f28 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 8000f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bf0c      	ite	eq
 8000f3a:	2301      	moveq	r3, #1
 8000f3c:	2300      	movne	r3, #0
 8000f3e:	b2db      	uxtb	r3, r3
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	50004000 	.word	0x50004000

08000f50 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <XMC_SCU_IsTemperatureSensorReady+0x24>)
 8000f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bf14      	ite	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	2300      	moveq	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	50004000 	.word	0x50004000

08000f78 <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8000f82:	f7ff ffd1 	bl	8000f28 <XMC_SCU_IsTemperatureSensorEnabled>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f083 0301 	eor.w	r3, r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8000f96:	f000 f831 	bl	8000ffc <XMC_SCU_IsTemperatureSensorBusy>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8000fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	50004000 	.word	0x50004000

08000fc4 <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8000fca:	f7ff ffad 	bl	8000f28 <XMC_SCU_IsTemperatureSensorEnabled>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f083 0301 	eor.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 8000fda:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	e005      	b.n	8000fee <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <XMC_SCU_GetTemperatureMeasurement+0x34>)
 8000fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fec:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 8000fee:	687b      	ldr	r3, [r7, #4]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	50004000 	.word	0x50004000

08000ffc <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 8001002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf14      	ite	ne
 800100e:	2301      	movne	r3, #1
 8001010:	2300      	moveq	r3, #0
 8001012:	b2db      	uxtb	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	50004000 	.word	0x50004000

08001024 <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001036:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <XMC_SCU_WriteToRetentionMemory+0x48>)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <XMC_SCU_WriteToRetentionMemory+0x48>)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8001050:	bf00      	nop
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <XMC_SCU_WriteToRetentionMemory+0x48>)
 8001054:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f8      	bne.n	8001052 <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	50004000 	.word	0x50004000

08001070 <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	041b      	lsls	r3, r3, #16
 800107c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001080:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f023 0301 	bic.w	r3, r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8001092:	bf00      	nop
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8001096:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800109a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f8      	bne.n	8001094 <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80010a4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	50004000 	.word	0x50004000

080010b8 <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f000 faf1 	bl	80016a8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80010c6:	f000 fd7f 	bl	8001bc8 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	79db      	ldrb	r3, [r3, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00a      	beq.n	80010e8 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80010d2:	f000 ff77 	bl	8001fc4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80010d6:	bf00      	nop
 80010d8:	f000 ff62 	bl	8001fa0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80010dc:	4603      	mov	r3, r0
 80010de:	f083 0301 	eor.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f7      	bne.n	80010d8 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7a5b      	ldrb	r3, [r3, #9]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fb6f 	bl	80017d0 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80010f2:	bf00      	nop
 80010f4:	f7ff fdda 	bl	8000cac <XMC_SCU_GetMirrorStatus>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1fa      	bne.n	80010f4 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7a1b      	ldrb	r3, [r3, #8]
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fd0c 	bl	8001b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7c1b      	ldrb	r3, [r3, #16]
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fb7f 	bl	8001810 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7c5b      	ldrb	r3, [r3, #17]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fba6 	bl	8001868 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7c9b      	ldrb	r3, [r3, #18]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fb8b 	bl	800183c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7cdb      	ldrb	r3, [r3, #19]
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fbb2 	bl	8001894 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	799b      	ldrb	r3, [r3, #6]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00a      	beq.n	800114e <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8001138:	f000 ffd8 	bl	80020ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 800113c:	bf00      	nop
 800113e:	f000 fffd 	bl	800213c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8001142:	4603      	mov	r3, r0
 8001144:	f083 0301 	eor.w	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f7      	bne.n	800113e <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	78db      	ldrb	r3, [r3, #3]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8001156:	f001 f855 	bl	8002204 <XMC_SCU_CLOCK_DisableSystemPll>
 800115a:	e011      	b.n	8001180 <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800115c:	f001 f840 	bl	80021e0 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	8898      	ldrh	r0, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800116c:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001172:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	4623      	mov	r3, r4
 800117c:	f001 f854 	bl	8002228 <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d103      	bne.n	8001192 <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800118a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800118e:	f000 fa8b 	bl	80016a8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8001192:	f001 fbe3 	bl	800295c <SystemCoreClockUpdate>
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}
	...

080011a0 <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <XMC_SCU_TRAP_Enable+0x24>)
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	4904      	ldr	r1, [pc, #16]	; (80011c4 <XMC_SCU_TRAP_Enable+0x24>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	608b      	str	r3, [r1, #8]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	50004160 	.word	0x50004160

080011c8 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <XMC_SCU_TRAP_Disable+0x20>)
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	4904      	ldr	r1, [pc, #16]	; (80011e8 <XMC_SCU_TRAP_Disable+0x20>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4313      	orrs	r3, r2
 80011da:	608b      	str	r3, [r1, #8]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	50004160 	.word	0x50004160

080011ec <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <XMC_SCU_TRAP_GetStatus+0x14>)
 80011f2:	685b      	ldr	r3, [r3, #4]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	50004160 	.word	0x50004160

08001204 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <XMC_SCU_TRAP_Trigger+0x1c>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6113      	str	r3, [r2, #16]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	50004160 	.word	0x50004160

08001224 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <XMC_SCU_TRAP_ClearStatus+0x1c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60d3      	str	r3, [r2, #12]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	50004160 	.word	0x50004160

08001244 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <XMC_SCU_PARITY_ClearStatus+0x20>)
 800124e:	695a      	ldr	r2, [r3, #20]
 8001250:	4904      	ldr	r1, [pc, #16]	; (8001264 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4313      	orrs	r3, r2
 8001256:	614b      	str	r3, [r1, #20]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	5000413c 	.word	0x5000413c

08001268 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <XMC_SCU_PARITY_GetStatus+0x14>)
 800126e:	695b      	ldr	r3, [r3, #20]
} 
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	5000413c 	.word	0x5000413c

08001280 <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <XMC_SCU_PARITY_Enable+0x20>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4904      	ldr	r1, [pc, #16]	; (80012a0 <XMC_SCU_PARITY_Enable+0x20>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	5000413c 	.word	0x5000413c

080012a4 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <XMC_SCU_PARITY_Disable+0x24>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	4904      	ldr	r1, [pc, #16]	; (80012c8 <XMC_SCU_PARITY_Disable+0x24>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	5000413c 	.word	0x5000413c

080012cc <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	4904      	ldr	r1, [pc, #16]	; (80012ec <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4313      	orrs	r3, r2
 80012de:	608b      	str	r3, [r1, #8]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	5000413c 	.word	0x5000413c

080012f0 <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	43db      	mvns	r3, r3
 8001300:	4904      	ldr	r1, [pc, #16]	; (8001314 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8001302:	4013      	ands	r3, r2
 8001304:	608b      	str	r3, [r1, #8]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	5000413c 	.word	0x5000413c

08001318 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8001322:	695a      	ldr	r2, [r3, #20]
 8001324:	4904      	ldr	r1, [pc, #16]	; (8001338 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4313      	orrs	r3, r2
 800132a:	614b      	str	r3, [r1, #20]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	50004074 	.word	0x50004074

0800133c <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8001346:	695a      	ldr	r2, [r3, #20]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	43db      	mvns	r3, r3
 800134c:	4904      	ldr	r1, [pc, #16]	; (8001360 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 800134e:	4013      	ands	r3, r2
 8001350:	614b      	str	r3, [r1, #20]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	50004074 	.word	0x50004074

08001364 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	0f1b      	lsrs	r3, r3, #28
 8001370:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001378:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	461a      	mov	r2, r3
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 8001388:	4413      	add	r3, r2
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	601a      	str	r2, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	50004410 	.word	0x50004410

080013a0 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	0f1b      	lsrs	r3, r3, #28
 80013ac:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80013b4:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 80013c4:	4413      	add	r3, r2
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	601a      	str	r2, [r3, #0]
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	50004414 	.word	0x50004414

080013dc <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	0f1b      	lsrs	r3, r3, #28
 80013e8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80013f0:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8001400:	4413      	add	r3, r2
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf14      	ite	ne
 800140c:	2301      	movne	r3, #1
 800140e:	2300      	moveq	r3, #0
 8001410:	b2db      	uxtb	r3, r3
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	5000440c 	.word	0x5000440c

08001424 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 800142a:	f000 f839 	bl	80014a0 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 800142e:	60f8      	str	r0, [r7, #12]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d009      	beq.n	8001450 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001444:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	fbb2 f3f3 	udiv	r3, r2, r3
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	e01f      	b.n	8001490 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	0e1b      	lsrs	r3, r3, #24
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3301      	adds	r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001468:	3301      	adds	r3, #1
 800146a:	607b      	str	r3, [r7, #4]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	0c1b      	lsrs	r3, r3, #16
 8001472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001476:	3301      	adds	r3, #1
 8001478:	603b      	str	r3, [r7, #0]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	fb02 f203 	mul.w	r2, r2, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	6839      	ldr	r1, [r7, #0]
 8001486:	fb01 f303 	mul.w	r3, r1, r3
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	60fb      	str	r3, [r7, #12]
  }

  return (clock_frequency);
 8001490:	68fb      	ldr	r3, [r7, #12]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	50004710 	.word	0x50004710

080014a0 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d103      	bne.n	80014ba <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 80014b2:	f001 fabd 	bl	8002a30 <OSCHP_GetFrequency>
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	e001      	b.n	80014be <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 80014bc:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 80014be:	687b      	ldr	r3, [r7, #4]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	50004710 	.word	0x50004710
 80014cc:	016e3600 	.word	0x016e3600

080014d0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 80014d6:	f001 faab 	bl	8002a30 <OSCHP_GetFrequency>
 80014da:	60f8      	str	r0, [r7, #12]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d116      	bne.n	8001516 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014f2:	3301      	adds	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	0e1b      	lsrs	r3, r3, #24
 80014fc:	f003 030f 	and.w	r3, r3, #15
 8001500:	3301      	adds	r3, #1
 8001502:	607b      	str	r3, [r7, #4]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	fb02 f203 	mul.w	r2, r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
 8001514:	60fb      	str	r3, [r7, #12]
  }
  return (clock_frequency);
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	50004710 	.word	0x50004710

08001524 <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 800152e:	f7ff fb9d 	bl	8000c6c <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001532:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	50004600 	.word	0x50004600

08001550 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 800155a:	f7ff fb5b 	bl	8000c14 <XMC_SCU_CLOCK_GetUsbClockSource>
 800155e:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001566:	d103      	bne.n	8001570 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001568:	f7ff ff5c 	bl	8001424 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	e005      	b.n	800157c <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001576:	f7ff ffab 	bl	80014d0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 800157a:	6078      	str	r0, [r7, #4]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8001584:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	50004600 	.word	0x50004600

08001598 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 800159e:	f7ff ff41 	bl	8001424 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80015a2:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 80015ac:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	50004600 	.word	0x50004600

080015c0 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 80015ca:	f7ff fb31 	bl	8000c30 <XMC_SCU_CLOCK_GetWdtClockSource>
 80015ce:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d6:	d103      	bne.n	80015e0 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80015d8:	f7ff ff24 	bl	8001424 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	e00c      	b.n	80015fa <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	e006      	b.n	80015fa <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f2:	d102      	bne.n	80015fa <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 80015f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015f8:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 8001600:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	016e3600 	.word	0x016e3600
 8001614:	50004600 	.word	0x50004600

08001618 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 8001622:	f7ff fb13 	bl	8000c4c <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 8001626:	4603      	mov	r3, r0
 8001628:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d10d      	bne.n	800164c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001630:	f7ff fef8 	bl	8001424 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001634:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	0c1b      	lsrs	r3, r3, #16
 800163c:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001640:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	e016      	b.n	800167a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d103      	bne.n	800165a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8001652:	f7ff fb0b 	bl	8000c6c <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	e00f      	b.n	800167a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d10c      	bne.n	800167a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001660:	f7ff ff36 	bl	80014d0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001664:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	0c1b      	lsrs	r3, r3, #16
 800166c:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001670:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	fbb2 f3f3 	udiv	r3, r2, r3
 8001678:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 800167a:	687b      	ldr	r3, [r7, #4]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	50004600 	.word	0x50004600

08001688 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800168c:	f7ff fb02 	bl	8000c94 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8001690:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800169e:	4618      	mov	r0, r3
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	50004600 	.word	0x50004600

080016a8 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80016b8:	4904      	ldr	r1, [pc, #16]	; (80016cc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4313      	orrs	r3, r2
 80016be:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	50004600 	.word	0x50004600

080016d0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80016e0:	4904      	ldr	r1, [pc, #16]	; (80016f4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	50004600 	.word	0x50004600

080016f8 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001708:	4904      	ldr	r1, [pc, #16]	; (800171c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4313      	orrs	r3, r2
 800170e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	50004600 	.word	0x50004600

08001720 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 8001732:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001734:	4904      	ldr	r1, [pc, #16]	; (8001748 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001736:	4313      	orrs	r3, r2
 8001738:	628b      	str	r3, [r1, #40]	; 0x28
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	50004600 	.word	0x50004600

0800174c <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d108      	bne.n	800176e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4a0a      	ldr	r2, [pc, #40]	; (800178c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 800176c:	e007      	b.n	800177e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	4a06      	ldr	r2, [pc, #24]	; (800178c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	60d3      	str	r3, [r2, #12]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	50004710 	.word	0x50004710

08001790 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800179a:	bf00      	nop
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800179e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f8      	bne.n	800179c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80017b2:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80017b4:	4905      	ldr	r1, [pc, #20]	; (80017cc <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60cb      	str	r3, [r1, #12]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	50004000 	.word	0x50004000
 80017cc:	50004300 	.word	0x50004300

080017d0 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80017da:	bf00      	nop
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80017de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f8      	bne.n	80017dc <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80017f2:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80017f4:	4905      	ldr	r1, [pc, #20]	; (800180c <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60cb      	str	r3, [r1, #12]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	50004000 	.word	0x50004000
 800180c:	50004300 	.word	0x50004300

08001810 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001824:	4904      	ldr	r1, [pc, #16]	; (8001838 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8001826:	4313      	orrs	r3, r2
 8001828:	60cb      	str	r3, [r1, #12]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	50004600 	.word	0x50004600

0800183c <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001850:	4904      	ldr	r1, [pc, #16]	; (8001864 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8001852:	4313      	orrs	r3, r2
 8001854:	620b      	str	r3, [r1, #32]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	50004600 	.word	0x50004600

08001868 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800187c:	4904      	ldr	r1, [pc, #16]	; (8001890 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 800187e:	4313      	orrs	r3, r2
 8001880:	610b      	str	r3, [r1, #16]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	50004600 	.word	0x50004600

08001894 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80018a8:	4904      	ldr	r1, [pc, #16]	; (80018bc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	614b      	str	r3, [r1, #20]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	50004600 	.word	0x50004600

080018c0 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80018d4:	4904      	ldr	r1, [pc, #16]	; (80018e8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	618b      	str	r3, [r1, #24]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	50004600 	.word	0x50004600

080018ec <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8001900:	4904      	ldr	r1, [pc, #16]	; (8001914 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 8001902:	4313      	orrs	r3, r2
 8001904:	61cb      	str	r3, [r1, #28]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	50004600 	.word	0x50004600

08001918 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800192c:	4904      	ldr	r1, [pc, #16]	; (8001940 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 800192e:	4313      	orrs	r3, r2
 8001930:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	50004600 	.word	0x50004600

08001944 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	3a01      	subs	r2, #1
 800195c:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 800195e:	4904      	ldr	r1, [pc, #16]	; (8001970 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8001960:	4313      	orrs	r3, r2
 8001962:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	50004600 	.word	0x50004600

08001974 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	6053      	str	r3, [r2, #4]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	50004600 	.word	0x50004600

08001994 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <XMC_SCU_CLOCK_DisableClock+0x1c>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	6093      	str	r3, [r2, #8]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	50004600 	.word	0x50004600

080019b4 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bf14      	ite	ne
 80019ca:	2301      	movne	r3, #1
 80019cc:	2300      	moveq	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	50004600 	.word	0x50004600

080019e0 <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a0c <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 80019f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fa:	ee17 3a90 	vmov	r3, s15
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	50004200 	.word	0x50004200
 8001a0c:	3bbe0ded 	.word	0x3bbe0ded

08001a10 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a24:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a40 <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 8001a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2c:	ee17 3a90 	vmov	r3, s15
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	50004200 	.word	0x50004200
 8001a40:	3cb851ec 	.word	0x3cb851ec

08001a44 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8001a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a52:	f023 0302 	bic.w	r3, r3, #2
 8001a56:	6153      	str	r3, [r2, #20]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	50004710 	.word	0x50004710

08001a68 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8001a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	6153      	str	r3, [r2, #20]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	50004710 	.word	0x50004710

08001a8c <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a19      	ldr	r2, [pc, #100]	; (8001b00 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	4a16      	ldr	r2, [pc, #88]	; (8001b00 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001aa8:	f043 0310 	orr.w	r3, r3, #16
 8001aac:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001aba:	4911      	ldr	r1, [pc, #68]	; (8001b00 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aca:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ad2:	f023 0310 	bic.w	r3, r3, #16
 8001ad6:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ade:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae2:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8001ae4:	bf00      	nop
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f9      	beq.n	8001ae6 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	50004710 	.word	0x50004710

08001b04 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 8001b0c:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	50004710 	.word	0x50004710
 8001b1c:	00010003 	.word	0x00010003

08001b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b34:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d10e      	bne.n	8001b5a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b46:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8001b48:	2064      	movs	r0, #100	; 0x64
 8001b4a:	f7ff f8bb 	bl	8000cc4 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b58:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8001b5a:	2064      	movs	r0, #100	; 0x64
 8001b5c:	f7ff f8b2 	bl	8000cc4 <XMC_SCU_lDelay>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	50004710 	.word	0x50004710

08001b6c <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <XMC_SCU_POWER_EnableUsb+0x18>)
 8001b72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b76:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	50004200 	.word	0x50004200

08001b88 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <XMC_SCU_POWER_DisableUsb+0x18>)
 8001b8e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b92:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	50004200 	.word	0x50004200

08001ba4 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf14      	ite	ne
 8001bb4:	2301      	movne	r3, #1
 8001bb6:	2300      	moveq	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	50004710 	.word	0x50004710

08001bc8 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001bde:	bf00      	nop
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f9      	beq.n	8001be0 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00a      	beq.n	8001c0e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bfe:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8001c00:	bf00      	nop
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f9      	bne.n	8001c02 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	50004200 	.word	0x50004200
 8001c1c:	50004400 	.word	0x50004400

08001c20 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 8001c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c30:	605a      	str	r2, [r3, #4]
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	50004200 	.word	0x50004200
 8001c40:	50004400 	.word	0x50004400

08001c44 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d007      	beq.n	8001c64 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8001c64:	2300      	movs	r3, #0
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	b2db      	uxtb	r3, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	50004200 	.word	0x50004200
 8001c7c:	50004400 	.word	0x50004400

08001c80 <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8001c84:	bf00      	nop
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 8001c88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f8      	bne.n	8001c86 <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	6153      	str	r3, [r2, #20]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	50004000 	.word	0x50004000
 8001cb0:	50004300 	.word	0x50004300

08001cb4 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8001cb8:	bf00      	nop
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 8001cbc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f8      	bne.n	8001cba <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6153      	str	r3, [r2, #20]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	50004000 	.word	0x50004000
 8001ce4:	50004300 	.word	0x50004300

08001ce8 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8001cf0:	bf00      	nop
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 8001cf4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f8      	bne.n	8001cf2 <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 8001d00:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <XMC_SCU_HIB_ClearEventStatus+0x30>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6053      	str	r3, [r2, #4]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	50004000 	.word	0x50004000
 8001d18:	50004300 	.word	0x50004300

08001d1c <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8001d24:	bf00      	nop
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <XMC_SCU_HIB_TriggerEvent+0x2c>)
 8001d28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f8      	bne.n	8001d26 <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8001d34:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <XMC_SCU_HIB_TriggerEvent+0x30>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6093      	str	r3, [r2, #8]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	50004000 	.word	0x50004000
 8001d4c:	50004300 	.word	0x50004300

08001d50 <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001d58:	bf00      	nop
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <XMC_SCU_HIB_EnableEvent+0x30>)
 8001d5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f8      	bne.n	8001d5a <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <XMC_SCU_HIB_EnableEvent+0x34>)
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4905      	ldr	r1, [pc, #20]	; (8001d84 <XMC_SCU_HIB_EnableEvent+0x34>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60cb      	str	r3, [r1, #12]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	50004000 	.word	0x50004000
 8001d84:	50004300 	.word	0x50004300

08001d88 <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001d90:	bf00      	nop
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <XMC_SCU_HIB_DisableEvent+0x34>)
 8001d94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f8      	bne.n	8001d92 <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <XMC_SCU_HIB_DisableEvent+0x38>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	43d2      	mvns	r2, r2
 8001da8:	4611      	mov	r1, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <XMC_SCU_HIB_DisableEvent+0x38>)
 8001dac:	400b      	ands	r3, r1
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	50004000 	.word	0x50004000
 8001dc0:	50004300 	.word	0x50004300

08001dc4 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001dc8:	bf00      	nop
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 8001dcc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f8      	bne.n	8001dca <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8001dde:	f043 0310 	orr.w	r3, r3, #16
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	50004000 	.word	0x50004000
 8001df4:	50004300 	.word	0x50004300

08001df8 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 8001e08:	f7ff ffdc 	bl	8001dc4 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e1e:	bf00      	nop
 8001e20:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 8001e22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f8      	bne.n	8001e20 <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d106      	bne.n	8001e42 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 8001e40:	e005      	b.n	8001e4e <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e4c:	60d3      	str	r3, [r2, #12]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	50004000 	.word	0x50004000
 8001e60:	50004300 	.word	0x50004300

08001e64 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e70:	bf00      	nop
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <XMC_SCU_HIB_SetPinMode+0x4c>)
 8001e74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f8      	bne.n	8001e72 <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <XMC_SCU_HIB_SetPinMode+0x50>)
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	6839      	ldr	r1, [r7, #0]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8001e9e:	4905      	ldr	r1, [pc, #20]	; (8001eb4 <XMC_SCU_HIB_SetPinMode+0x50>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	50004000 	.word	0x50004000
 8001eb4:	50004300 	.word	0x50004300

08001eb8 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	460a      	mov	r2, r1
 8001ec2:	71fb      	strb	r3, [r7, #7]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001ec8:	bf00      	nop
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 8001ecc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f8      	bne.n	8001eca <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	4013      	ands	r3, r2
                        (level << pin);
 8001eea:	88b9      	ldrh	r1, [r7, #4]
 8001eec:	79fa      	ldrb	r2, [r7, #7]
 8001eee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef2:	4611      	mov	r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8001ef4:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8001ef6:	430b      	orrs	r3, r1
 8001ef8:	60d3      	str	r3, [r2, #12]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	50004000 	.word	0x50004000
 8001f0c:	50004300 	.word	0x50004300

08001f10 <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001f1a:	bf00      	nop
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <XMC_SCU_HIB_SetInput0+0x48>)
 8001f1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f8      	bne.n	8001f1c <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d106      	bne.n	8001f3e <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <XMC_SCU_HIB_SetInput0+0x4c>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <XMC_SCU_HIB_SetInput0+0x4c>)
 8001f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 8001f3c:	e005      	b.n	8001f4a <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <XMC_SCU_HIB_SetInput0+0x4c>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	4a06      	ldr	r2, [pc, #24]	; (8001f5c <XMC_SCU_HIB_SetInput0+0x4c>)
 8001f44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f48:	60d3      	str	r3, [r2, #12]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	50004000 	.word	0x50004000
 8001f5c:	50004300 	.word	0x50004300

08001f60 <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001f6a:	bf00      	nop
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <XMC_SCU_HIB_SetSR0Input+0x38>)
 8001f6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f8      	bne.n	8001f6c <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	4905      	ldr	r1, [pc, #20]	; (8001f9c <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	50004000 	.word	0x50004000
 8001f9c:	50004300 	.word	0x50004300

08001fa0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	50004300 	.word	0x50004300

08001fc4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8001fc8:	bf00      	nop
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8001fcc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f8      	bne.n	8001fca <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	4a13      	ldr	r2, [pc, #76]	; (800202c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001fde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fe2:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001fe4:	bf00      	nop
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8001fe8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f8      	bne.n	8001fe6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a0c      	ldr	r2, [pc, #48]	; (800202c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001ffa:	f043 0308 	orr.w	r3, r3, #8
 8001ffe:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8002000:	bf00      	nop
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8002004:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f8      	bne.n	8002002 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8002012:	2208      	movs	r2, #8
 8002014:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8002016:	bf00      	nop
 8002018:	f7fe fe48 	bl	8000cac <XMC_SCU_GetMirrorStatus>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1fa      	bne.n	8002018 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	50004000 	.word	0x50004000
 800202c:	50004300 	.word	0x50004300

08002030 <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002034:	bf00      	nop
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 8002038:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800203c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f8      	bne.n	8002036 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	4a05      	ldr	r2, [pc, #20]	; (8002060 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 800204a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800204e:	61d3      	str	r3, [r2, #28]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	50004000 	.word	0x50004000
 8002060:	50004300 	.word	0x50004300

08002064 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002068:	bf00      	nop
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 800206c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f8      	bne.n	800206a <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	4a05      	ldr	r2, [pc, #20]	; (8002094 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800207e:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8002082:	61d3      	str	r3, [r2, #28]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	50004000 	.word	0x50004000
 8002094:	50004300 	.word	0x50004300

08002098 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 800209c:	bf00      	nop
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 80020a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f8      	bne.n	800209e <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 80020b4:	4a05      	ldr	r2, [pc, #20]	; (80020cc <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 80020b6:	f043 0320 	orr.w	r3, r3, #32
 80020ba:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	50004000 	.word	0x50004000
 80020cc:	50004300 	.word	0x50004300

080020d0 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0301 	and.w	r3, r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	50004300 	.word	0x50004300

080020ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80020ec:	b598      	push	{r3, r4, r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80020f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fa:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8002104:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8002108:	f000 fc92 	bl	8002a30 <OSCHP_GetFrequency>
 800210c:	4602      	mov	r2, r0
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8002110:	fba3 2302 	umull	r2, r3, r3, r2
 8002114:	0d1b      	lsrs	r3, r3, #20
 8002116:	3b01      	subs	r3, #1
 8002118:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 800211a:	4a06      	ldr	r2, [pc, #24]	; (8002134 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 800211c:	4323      	orrs	r3, r4
 800211e:	6053      	str	r3, [r2, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a02      	ldr	r2, [pc, #8]	; (8002130 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002126:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800212a:	6053      	str	r3, [r2, #4]
}
 800212c:	bf00      	nop
 800212e:	bd98      	pop	{r3, r4, r7, pc}
 8002130:	50004710 	.word	0x50004710
 8002134:	50004700 	.word	0x50004700
 8002138:	6b5fca6b 	.word	0x6b5fca6b

0800213c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8002140:	4b07      	ldr	r3, [pc, #28]	; (8002160 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002148:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800214c:	bf0c      	ite	eq
 800214e:	2301      	moveq	r3, #1
 8002150:	2300      	movne	r3, #0
 8002152:	b2db      	uxtb	r3, r3
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	50004710 	.word	0x50004710

08002164 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 800216e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002172:	6053      	str	r3, [r2, #4]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	50004700 	.word	0x50004700

08002184 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6053      	str	r3, [r2, #4]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	50004700 	.word	0x50004700

080021a4 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6053      	str	r3, [r2, #4]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	50004700 	.word	0x50004700

080021c4 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	50004700 	.word	0x50004700

080021e0 <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80021ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ee:	f023 0302 	bic.w	r3, r3, #2
 80021f2:	6053      	str	r3, [r2, #4]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	50004710 	.word	0x50004710

08002204 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4a05      	ldr	r2, [pc, #20]	; (8002224 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 800220e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	6053      	str	r3, [r2, #4]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	50004710 	.word	0x50004710

08002228 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60ba      	str	r2, [r7, #8]
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	4603      	mov	r3, r0
 8002234:	81fb      	strh	r3, [r7, #14]
 8002236:	460b      	mov	r3, r1
 8002238:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 800223a:	89fb      	ldrh	r3, [r7, #14]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fa85 	bl	800174c <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8002242:	7b7b      	ldrb	r3, [r7, #13]
 8002244:	2b01      	cmp	r3, #1
 8002246:	f040 8084 	bne.w	8002352 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 800224a:	89fb      	ldrh	r3, [r7, #14]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8002250:	f000 fbee 	bl	8002a30 <OSCHP_GetFrequency>
 8002254:	4602      	mov	r2, r0
 8002256:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8002258:	fba3 2302 	umull	r2, r3, r3, r2
 800225c:	0c9b      	lsrs	r3, r3, #18
 800225e:	059b      	lsls	r3, r3, #22
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e002      	b.n	800226a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8002264:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002268:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	fb02 f203 	mul.w	r2, r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	4a43      	ldr	r2, [pc, #268]	; (800238c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	0d9b      	lsrs	r3, r3, #22
 8002286:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002288:	4b41      	ldr	r3, [pc, #260]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a40      	ldr	r2, [pc, #256]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8002294:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a3d      	ldr	r2, [pc, #244]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800229a:	f043 0310 	orr.w	r3, r3, #16
 800229e:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80022a0:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 80022a6:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	3a01      	subs	r2, #1
 80022ac:	0212      	lsls	r2, r2, #8
 80022ae:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80022b6:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80022be:	4934      	ldr	r1, [pc, #208]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80022c4:	4b32      	ldr	r3, [pc, #200]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a31      	ldr	r2, [pc, #196]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ce:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80022d0:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a2e      	ldr	r2, [pc, #184]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022d6:	f023 0310 	bic.w	r3, r3, #16
 80022da:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80022dc:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a2b      	ldr	r2, [pc, #172]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80022e8:	bf00      	nop
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f9      	beq.n	80022ea <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4a25      	ldr	r2, [pc, #148]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002302:	bf00      	nop
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f9      	bne.n	8002304 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	4a21      	ldr	r2, [pc, #132]	; (8002398 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	0d9b      	lsrs	r3, r3, #22
 800231c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 800231e:	6a3a      	ldr	r2, [r7, #32]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	429a      	cmp	r2, r3
 8002324:	d202      	bcs.n	800232c <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002326:	6938      	ldr	r0, [r7, #16]
 8002328:	f000 f84a 	bl	80023c0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	085b      	lsrs	r3, r3, #1
 8002330:	4a1a      	ldr	r2, [pc, #104]	; (800239c <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	0d9b      	lsrs	r3, r3, #22
 800233a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 800233c:	6a3a      	ldr	r2, [r7, #32]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	429a      	cmp	r2, r3
 8002342:	d202      	bcs.n	800234a <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002344:	6938      	ldr	r0, [r7, #16]
 8002346:	f000 f83b 	bl	80023c0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 800234a:	6a38      	ldr	r0, [r7, #32]
 800234c:	f000 f838 	bl	80023c0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 8002350:	e015      	b.n	800237e <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800235e:	490c      	ldr	r1, [pc, #48]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a09      	ldr	r2, [pc, #36]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002370:	bf00      	nop
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f9      	beq.n	8002372 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 800237e:	bf00      	nop
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	431bde83 	.word	0x431bde83
 800238c:	aaaaaaab 	.word	0xaaaaaaab
 8002390:	50004710 	.word	0x50004710
 8002394:	f08080ff 	.word	0xf08080ff
 8002398:	88888889 	.word	0x88888889
 800239c:	b60b60b7 	.word	0xb60b60b7

080023a0 <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ae:	6053      	str	r3, [r2, #4]
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	50004710 	.word	0x50004710

080023c0 <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80023d6:	4905      	ldr	r1, [pc, #20]	; (80023ec <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 80023dc:	2032      	movs	r0, #50	; 0x32
 80023de:	f7fe fc71 	bl	8000cc4 <XMC_SCU_lDelay>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	50004710 	.word	0x50004710

080023f0 <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf14      	ite	ne
 8002400:	2301      	movne	r3, #1
 8002402:	2300      	moveq	r3, #0
 8002404:	b2db      	uxtb	r3, r3
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	50004710 	.word	0x50004710

08002414 <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8002422:	e002      	b.n	800242a <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3301      	adds	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d102      	bne.n	8002440 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b1f      	cmp	r3, #31
 800243e:	d9f1      	bls.n	8002424 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b20      	cmp	r3, #32
 8002444:	d102      	bne.n	800244c <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	72fb      	strb	r3, [r7, #11]
 800244a:	e006      	b.n	800245a <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 800244c:	4906      	ldr	r1, [pc, #24]	; (8002468 <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 8002456:	2300      	movs	r3, #0
 8002458:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 800245a:	7afb      	ldrb	r3, [r7, #11]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	20000a0c 	.word	0x20000a0c

0800246c <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 8002478:	f7fe fc80 	bl	8000d7c <XMC_SCU_INTERUPT_GetEventStatus>
 800247c:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 800247e:	e01c      	b.n	80024ba <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d011      	beq.n	80024b4 <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 8002490:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <XMC_SCU_IRQHandler+0x5c>)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002498:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 80024a4:	2201      	movs	r2, #1
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe fc71 	bl	8000d94 <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 80024b2:	e005      	b.n	80024c0 <XMC_SCU_IRQHandler+0x54>
    }   
    index++;    
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	3301      	adds	r3, #1
 80024b8:	617b      	str	r3, [r7, #20]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b1f      	cmp	r3, #31
 80024be:	d9df      	bls.n	8002480 <XMC_SCU_IRQHandler+0x14>
  }
}
 80024c0:	bf00      	nop
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000a0c 	.word	0x20000a0c

080024cc <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	460b      	mov	r3, r1
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80024da:	7afb      	ldrb	r3, [r7, #11]
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3204      	adds	r2, #4
 80024e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024ea:	7afb      	ldrb	r3, [r7, #11]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	21f8      	movs	r1, #248	; 0xf8
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	7af9      	ldrb	r1, [r7, #11]
 80024fc:	0889      	lsrs	r1, r1, #2
 80024fe:	b2c9      	uxtb	r1, r1
 8002500:	4608      	mov	r0, r1
 8002502:	ea02 0103 	and.w	r1, r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1d02      	adds	r2, r0, #4
 800250a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002512:	7afb      	ldrb	r3, [r7, #11]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2103      	movs	r1, #3
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	401a      	ands	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4a38      	ldr	r2, [pc, #224]	; (8002608 <XMC_GPIO_Init+0x13c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d003      	beq.n	8002534 <XMC_GPIO_Init+0x68>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a37      	ldr	r2, [pc, #220]	; (800260c <XMC_GPIO_Init+0x140>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d10a      	bne.n	800254a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002538:	7afb      	ldrb	r3, [r7, #11]
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	401a      	ands	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	661a      	str	r2, [r3, #96]	; 0x60
 8002548:	e03c      	b.n	80025c4 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	7afb      	ldrb	r3, [r7, #11]
 8002550:	409a      	lsls	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8002556:	7afb      	ldrb	r3, [r7, #11]
 8002558:	08db      	lsrs	r3, r3, #3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3210      	adds	r2, #16
 8002562:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002566:	7afb      	ldrb	r3, [r7, #11]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	2107      	movs	r1, #7
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	7af9      	ldrb	r1, [r7, #11]
 8002578:	08c9      	lsrs	r1, r1, #3
 800257a:	b2c9      	uxtb	r1, r1
 800257c:	4608      	mov	r0, r1
 800257e:	ea02 0103 	and.w	r1, r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f100 0210 	add.w	r2, r0, #16
 8002588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800258c:	7afb      	ldrb	r3, [r7, #11]
 800258e:	08db      	lsrs	r3, r3, #3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3210      	adds	r2, #16
 8002598:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7a1b      	ldrb	r3, [r3, #8]
 80025a0:	4619      	mov	r1, r3
 80025a2:	7afb      	ldrb	r3, [r7, #11]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	7af9      	ldrb	r1, [r7, #11]
 80025b0:	08c9      	lsrs	r1, r1, #3
 80025b2:	b2c9      	uxtb	r1, r1
 80025b4:	4608      	mov	r0, r1
 80025b6:	ea42 0103 	orr.w	r1, r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f100 0210 	add.w	r2, r0, #16
 80025c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80025c4:	7afb      	ldrb	r3, [r7, #11]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3204      	adds	r2, #4
 80025d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	7afb      	ldrb	r3, [r7, #11]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	7af9      	ldrb	r1, [r7, #11]
 80025e8:	0889      	lsrs	r1, r1, #2
 80025ea:	b2c9      	uxtb	r1, r1
 80025ec:	4608      	mov	r0, r1
 80025ee:	ea42 0103 	orr.w	r1, r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1d02      	adds	r2, r0, #4
 80025f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	48028e00 	.word	0x48028e00
 800260c:	48028f00 	.word	0x48028f00

08002610 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
 800261c:	4613      	mov	r3, r2
 800261e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	08db      	lsrs	r3, r3, #3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3210      	adds	r2, #16
 800262c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	2107      	movs	r1, #7
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	78f9      	ldrb	r1, [r7, #3]
 8002642:	08c9      	lsrs	r1, r1, #3
 8002644:	b2c9      	uxtb	r1, r1
 8002646:	4608      	mov	r0, r1
 8002648:	ea02 0103 	and.w	r1, r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f100 0210 	add.w	r2, r0, #16
 8002652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	08db      	lsrs	r3, r3, #3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3210      	adds	r2, #16
 8002662:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002666:	78b9      	ldrb	r1, [r7, #2]
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	78f9      	ldrb	r1, [r7, #3]
 8002676:	08c9      	lsrs	r1, r1, #3
 8002678:	b2c9      	uxtb	r1, r1
 800267a:	4608      	mov	r0, r1
 800267c:	ea42 0103 	orr.w	r1, r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f100 0210 	add.w	r2, r0, #16
 8002686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8002696:	b480      	push	{r7}
 8002698:	b085      	sub	sp, #20
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	e003      	b.n	80026ac <delay+0x16>
  {
    __NOP();
 80026a4:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3301      	adds	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d8f7      	bhi.n	80026a4 <delay+0xe>
  }
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80026c0:	b598      	push	{r3, r4, r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <SystemInit+0x20>)
 80026c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80026ca:	4614      	mov	r4, r2
 80026cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80026d2:	f000 f807 	bl	80026e4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80026d6:	f000 f83d 	bl	8002754 <SystemCoreClockSetup>
}
 80026da:	bf00      	nop
 80026dc:	bd98      	pop	{r3, r4, r7, pc}
 80026de:	bf00      	nop
 80026e0:	2000ffc4 	.word	0x2000ffc4

080026e4 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026ea:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <SystemCoreSetup+0x64>)
 80026ee:	4a17      	ldr	r2, [pc, #92]	; (800274c <SystemCoreSetup+0x68>)
 80026f0:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 80026f6:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80026f8:	4b13      	ldr	r3, [pc, #76]	; (8002748 <SystemCoreSetup+0x64>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <SystemCoreSetup+0x64>)
 8002700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <SystemCoreSetup+0x64>)
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <SystemCoreSetup+0x64>)
 800270e:	f023 0308 	bic.w	r3, r3, #8
 8002712:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <SystemCoreSetup+0x6c>)
 8002716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271a:	3314      	adds	r3, #20
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f023 030f 	bic.w	r3, r3, #15
 8002726:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f043 0303 	orr.w	r3, r3, #3
 800272e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <SystemCoreSetup+0x6c>)
 8002732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002736:	3314      	adds	r3, #20
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	601a      	str	r2, [r3, #0]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00
 800274c:	08000000 	.word	0x08000000
 8002750:	58001000 	.word	0x58001000

08002754 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8002758:	4b75      	ldr	r3, [pc, #468]	; (8002930 <SystemCoreClockSetup+0x1dc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10c      	bne.n	800277e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8002764:	4b72      	ldr	r3, [pc, #456]	; (8002930 <SystemCoreClockSetup+0x1dc>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a71      	ldr	r2, [pc, #452]	; (8002930 <SystemCoreClockSetup+0x1dc>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8002770:	bf00      	nop
 8002772:	4b6f      	ldr	r3, [pc, #444]	; (8002930 <SystemCoreClockSetup+0x1dc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f9      	beq.n	8002772 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800277e:	4b6d      	ldr	r3, [pc, #436]	; (8002934 <SystemCoreClockSetup+0x1e0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 800278a:	4b6a      	ldr	r3, [pc, #424]	; (8002934 <SystemCoreClockSetup+0x1e0>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	4a69      	ldr	r2, [pc, #420]	; (8002934 <SystemCoreClockSetup+0x1e0>)
 8002790:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002794:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8002796:	f641 504c 	movw	r0, #7500	; 0x1d4c
 800279a:	f7ff ff7c 	bl	8002696 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800279e:	4b66      	ldr	r3, [pc, #408]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4a65      	ldr	r2, [pc, #404]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 80027a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027a8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80027aa:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80027ae:	f7ff ff72 	bl	8002696 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80027b2:	4b61      	ldr	r3, [pc, #388]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4a60      	ldr	r2, [pc, #384]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 80027b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027bc:	f023 0302 	bic.w	r3, r3, #2
 80027c0:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80027c2:	4b5e      	ldr	r3, [pc, #376]	; (800293c <SystemCoreClockSetup+0x1e8>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d029      	beq.n	8002822 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80027ce:	4b5b      	ldr	r3, [pc, #364]	; (800293c <SystemCoreClockSetup+0x1e8>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4a5a      	ldr	r2, [pc, #360]	; (800293c <SystemCoreClockSetup+0x1e8>)
 80027d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80027d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027dc:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80027de:	f000 f927 	bl	8002a30 <OSCHP_GetFrequency>
 80027e2:	4602      	mov	r2, r0
 80027e4:	4b56      	ldr	r3, [pc, #344]	; (8002940 <SystemCoreClockSetup+0x1ec>)
 80027e6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ea:	0d1b      	lsrs	r3, r3, #20
 80027ec:	3b01      	subs	r3, #1
 80027ee:	041a      	lsls	r2, r3, #16
 80027f0:	4b52      	ldr	r3, [pc, #328]	; (800293c <SystemCoreClockSetup+0x1e8>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4951      	ldr	r1, [pc, #324]	; (800293c <SystemCoreClockSetup+0x1e8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 80027fa:	4b4f      	ldr	r3, [pc, #316]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a4e      	ldr	r2, [pc, #312]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002806:	4b4c      	ldr	r3, [pc, #304]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a4b      	ldr	r2, [pc, #300]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 800280c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002810:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8002812:	bf00      	nop
 8002814:	4b48      	ldr	r3, [pc, #288]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800281c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002820:	d1f8      	bne.n	8002814 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002822:	4b45      	ldr	r3, [pc, #276]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a44      	ldr	r2, [pc, #272]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800282e:	4b42      	ldr	r3, [pc, #264]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4a41      	ldr	r2, [pc, #260]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800283a:	4b3f      	ldr	r3, [pc, #252]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 800283c:	4a41      	ldr	r2, [pc, #260]	; (8002944 <SystemCoreClockSetup+0x1f0>)
 800283e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002840:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a3c      	ldr	r2, [pc, #240]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 800284c:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a39      	ldr	r2, [pc, #228]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002852:	f023 0310 	bic.w	r3, r3, #16
 8002856:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8002858:	4b37      	ldr	r3, [pc, #220]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a36      	ldr	r2, [pc, #216]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 800285e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002862:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002864:	bf00      	nop
 8002866:	4b34      	ldr	r3, [pc, #208]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f9      	beq.n	8002866 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a30      	ldr	r2, [pc, #192]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800287e:	bf00      	nop
 8002880:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f9      	bne.n	8002880 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 800288c:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <SystemCoreClockSetup+0x1f4>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a2d      	ldr	r2, [pc, #180]	; (8002948 <SystemCoreClockSetup+0x1f4>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8002898:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <SystemCoreClockSetup+0x1f4>)
 800289a:	2200      	movs	r2, #0
 800289c:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <SystemCoreClockSetup+0x1f4>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80028a4:	4b28      	ldr	r3, [pc, #160]	; (8002948 <SystemCoreClockSetup+0x1f4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <SystemCoreClockSetup+0x1f4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80028b0:	4b25      	ldr	r3, [pc, #148]	; (8002948 <SystemCoreClockSetup+0x1f4>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <SystemCoreClockSetup+0x1f4>)
 80028b8:	2203      	movs	r2, #3
 80028ba:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 80028c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028c6:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 80028ca:	4a20      	ldr	r2, [pc, #128]	; (800294c <SystemCoreClockSetup+0x1f8>)
 80028cc:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 80028ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028d2:	f7ff fee0 	bl	8002696 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80028d6:	bf00      	nop
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f9      	beq.n	80028d8 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80028e4:	4b14      	ldr	r3, [pc, #80]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 80028e6:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <SystemCoreClockSetup+0x1fc>)
 80028e8:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 80028ea:	f241 1094 	movw	r0, #4500	; 0x1194
 80028ee:	f7ff fed2 	bl	8002696 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80028f2:	bf00      	nop
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f9      	beq.n	80028f4 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002900:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002902:	4a14      	ldr	r2, [pc, #80]	; (8002954 <SystemCoreClockSetup+0x200>)
 8002904:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8002906:	f241 7070 	movw	r0, #6000	; 0x1770
 800290a:	f7ff fec4 	bl	8002696 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800290e:	bf00      	nop
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <SystemCoreClockSetup+0x1e4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f9      	beq.n	8002910 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <SystemCoreClockSetup+0x204>)
 800291e:	2205      	movs	r2, #5
 8002920:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <SystemCoreClockSetup+0x1f4>)
 8002924:	2200      	movs	r2, #0
 8002926:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8002928:	f000 f818 	bl	800295c <SystemCoreClockUpdate>
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}
 8002930:	50004200 	.word	0x50004200
 8002934:	50004400 	.word	0x50004400
 8002938:	50004710 	.word	0x50004710
 800293c:	50004700 	.word	0x50004700
 8002940:	6b5fca6b 	.word	0x6b5fca6b
 8002944:	01134f00 	.word	0x01134f00
 8002948:	50004600 	.word	0x50004600
 800294c:	01074f00 	.word	0x01074f00
 8002950:	01044f00 	.word	0x01044f00
 8002954:	01034f00 	.word	0x01034f00
 8002958:	50004160 	.word	0x50004160

0800295c <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8002962:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <SystemCoreClockUpdate+0xc4>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d03e      	beq.n	80029ec <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <SystemCoreClockUpdate+0xc8>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800297a:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <SystemCoreClockUpdate+0xcc>)
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e002      	b.n	8002986 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8002980:	f000 f856 	bl	8002a30 <OSCHP_GetFrequency>
 8002984:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8002986:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <SystemCoreClockUpdate+0xc8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	d020      	beq.n	80029d4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8002992:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <SystemCoreClockUpdate+0xc8>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	0e1b      	lsrs	r3, r3, #24
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	3301      	adds	r3, #1
 800299e:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80029a0:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <SystemCoreClockUpdate+0xc8>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029aa:	3301      	adds	r3, #1
 80029ac:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80029ae:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <SystemCoreClockUpdate+0xc8>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029b8:	3301      	adds	r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	e00d      	b.n	80029f0 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <SystemCoreClockUpdate+0xc8>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029dc:	3301      	adds	r3, #1
 80029de:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	e001      	b.n	80029f0 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80029ec:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <SystemCoreClockUpdate+0xcc>)
 80029ee:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <SystemCoreClockUpdate+0xc4>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <SystemCoreClockUpdate+0xc4>)
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	3301      	adds	r3, #1
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8002a12:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <SystemCoreClockUpdate+0xd0>)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	50004600 	.word	0x50004600
 8002a24:	50004710 	.word	0x50004710
 8002a28:	016e3600 	.word	0x016e3600
 8002a2c:	2000ffc0 	.word	0x2000ffc0

08002a30 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8002a34:	4b02      	ldr	r3, [pc, #8]	; (8002a40 <OSCHP_GetFrequency+0x10>)
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	00b71b00 	.word	0x00b71b00

08002a44 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <_sbrk+0x5c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8002a54:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <_sbrk+0x5c>)
 8002a56:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <_sbrk+0x60>)
 8002a58:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8002a5a:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <_sbrk+0x5c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3303      	adds	r3, #3
 8002a64:	f023 0303 	bic.w	r3, r3, #3
 8002a68:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <_sbrk+0x5c>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <_sbrk+0x64>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d207      	bcs.n	8002a88 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <_sbrk+0x5c>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <_sbrk+0x5c>)
 8002a82:	6013      	str	r3, [r2, #0]
    return (base);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	e006      	b.n	8002a96 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8002a88:	f000 f818 	bl	8002abc <__errno>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	230c      	movs	r3, #12
 8002a90:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200009bc 	.word	0x200009bc
 8002aa4:	20000ab8 	.word	0x20000ab8
 8002aa8:	2000ffc0 	.word	0x2000ffc0

08002aac <_init>:

/* Init */
void _init(void)
{}
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <__errno>:
 8002abc:	4b01      	ldr	r3, [pc, #4]	; (8002ac4 <__errno+0x8>)
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000000 	.word	0x20000000

08002ac8 <__libc_init_array>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	4e0d      	ldr	r6, [pc, #52]	; (8002b00 <__libc_init_array+0x38>)
 8002acc:	4d0d      	ldr	r5, [pc, #52]	; (8002b04 <__libc_init_array+0x3c>)
 8002ace:	1b76      	subs	r6, r6, r5
 8002ad0:	10b6      	asrs	r6, r6, #2
 8002ad2:	d006      	beq.n	8002ae2 <__libc_init_array+0x1a>
 8002ad4:	2400      	movs	r4, #0
 8002ad6:	3401      	adds	r4, #1
 8002ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002adc:	4798      	blx	r3
 8002ade:	42a6      	cmp	r6, r4
 8002ae0:	d1f9      	bne.n	8002ad6 <__libc_init_array+0xe>
 8002ae2:	4e09      	ldr	r6, [pc, #36]	; (8002b08 <__libc_init_array+0x40>)
 8002ae4:	4d09      	ldr	r5, [pc, #36]	; (8002b0c <__libc_init_array+0x44>)
 8002ae6:	1b76      	subs	r6, r6, r5
 8002ae8:	f7ff ffe0 	bl	8002aac <_init>
 8002aec:	10b6      	asrs	r6, r6, #2
 8002aee:	d006      	beq.n	8002afe <__libc_init_array+0x36>
 8002af0:	2400      	movs	r4, #0
 8002af2:	3401      	adds	r4, #1
 8002af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af8:	4798      	blx	r3
 8002afa:	42a6      	cmp	r6, r4
 8002afc:	d1f9      	bne.n	8002af2 <__libc_init_array+0x2a>
 8002afe:	bd70      	pop	{r4, r5, r6, pc}
 8002b00:	200009ac 	.word	0x200009ac
 8002b04:	200009ac 	.word	0x200009ac
 8002b08:	200009ac 	.word	0x200009ac
 8002b0c:	200009ac 	.word	0x200009ac

08002b10 <_sprintf_r>:
 8002b10:	b40c      	push	{r2, r3}
 8002b12:	b570      	push	{r4, r5, r6, lr}
 8002b14:	b09c      	sub	sp, #112	; 0x70
 8002b16:	ac20      	add	r4, sp, #128	; 0x80
 8002b18:	4e0b      	ldr	r6, [pc, #44]	; (8002b48 <_sprintf_r+0x38>)
 8002b1a:	f854 2b04 	ldr.w	r2, [r4], #4
 8002b1e:	9102      	str	r1, [sp, #8]
 8002b20:	4623      	mov	r3, r4
 8002b22:	9106      	str	r1, [sp, #24]
 8002b24:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8002b28:	a902      	add	r1, sp, #8
 8002b2a:	9401      	str	r4, [sp, #4]
 8002b2c:	9507      	str	r5, [sp, #28]
 8002b2e:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8002b32:	f000 f82d 	bl	8002b90 <_svfprintf_r>
 8002b36:	9b02      	ldr	r3, [sp, #8]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	b01c      	add	sp, #112	; 0x70
 8002b3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002b42:	b002      	add	sp, #8
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	ffff0208 	.word	0xffff0208

08002b4c <sprintf>:
 8002b4c:	b40e      	push	{r1, r2, r3}
 8002b4e:	b530      	push	{r4, r5, lr}
 8002b50:	b09c      	sub	sp, #112	; 0x70
 8002b52:	ab1f      	add	r3, sp, #124	; 0x7c
 8002b54:	4c0c      	ldr	r4, [pc, #48]	; (8002b88 <sprintf+0x3c>)
 8002b56:	4d0d      	ldr	r5, [pc, #52]	; (8002b8c <sprintf+0x40>)
 8002b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	4601      	mov	r1, r0
 8002b60:	9102      	str	r1, [sp, #8]
 8002b62:	9106      	str	r1, [sp, #24]
 8002b64:	6820      	ldr	r0, [r4, #0]
 8002b66:	a902      	add	r1, sp, #8
 8002b68:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8002b6c:	9407      	str	r4, [sp, #28]
 8002b6e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002b72:	f000 f80d 	bl	8002b90 <_svfprintf_r>
 8002b76:	9b02      	ldr	r3, [sp, #8]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	b01c      	add	sp, #112	; 0x70
 8002b7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b82:	b003      	add	sp, #12
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	ffff0208 	.word	0xffff0208

08002b90 <_svfprintf_r>:
 8002b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b94:	b0d9      	sub	sp, #356	; 0x164
 8002b96:	460c      	mov	r4, r1
 8002b98:	910a      	str	r1, [sp, #40]	; 0x28
 8002b9a:	4693      	mov	fp, r2
 8002b9c:	930d      	str	r3, [sp, #52]	; 0x34
 8002b9e:	9007      	str	r0, [sp, #28]
 8002ba0:	f002 fdb2 	bl	8005708 <_localeconv_r>
 8002ba4:	6803      	ldr	r3, [r0, #0]
 8002ba6:	931d      	str	r3, [sp, #116]	; 0x74
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 fe29 	bl	8006800 <strlen>
 8002bae:	89a3      	ldrh	r3, [r4, #12]
 8002bb0:	901c      	str	r0, [sp, #112]	; 0x70
 8002bb2:	061f      	lsls	r7, r3, #24
 8002bb4:	d503      	bpl.n	8002bbe <_svfprintf_r+0x2e>
 8002bb6:	6923      	ldr	r3, [r4, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8752 	beq.w	8003a62 <_svfprintf_r+0xed2>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	465e      	mov	r6, fp
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	9314      	str	r3, [sp, #80]	; 0x50
 8002bc6:	9318      	str	r3, [sp, #96]	; 0x60
 8002bc8:	9317      	str	r3, [sp, #92]	; 0x5c
 8002bca:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
 8002bce:	931b      	str	r3, [sp, #108]	; 0x6c
 8002bd0:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8002bd4:	9321      	str	r3, [sp, #132]	; 0x84
 8002bd6:	931e      	str	r3, [sp, #120]	; 0x78
 8002bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8002bda:	ab2f      	add	r3, sp, #188	; 0xbc
 8002bdc:	932c      	str	r3, [sp, #176]	; 0xb0
 8002bde:	4699      	mov	r9, r3
 8002be0:	7833      	ldrb	r3, [r6, #0]
 8002be2:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 82c9 	beq.w	800317e <_svfprintf_r+0x5ee>
 8002bec:	2b25      	cmp	r3, #37	; 0x25
 8002bee:	4634      	mov	r4, r6
 8002bf0:	d102      	bne.n	8002bf8 <_svfprintf_r+0x68>
 8002bf2:	e01c      	b.n	8002c2e <_svfprintf_r+0x9e>
 8002bf4:	2b25      	cmp	r3, #37	; 0x25
 8002bf6:	d003      	beq.n	8002c00 <_svfprintf_r+0x70>
 8002bf8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f9      	bne.n	8002bf4 <_svfprintf_r+0x64>
 8002c00:	1ba5      	subs	r5, r4, r6
 8002c02:	b185      	cbz	r5, 8002c26 <_svfprintf_r+0x96>
 8002c04:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
 8002c08:	3301      	adds	r3, #1
 8002c0a:	442a      	add	r2, r5
 8002c0c:	2b07      	cmp	r3, #7
 8002c0e:	f8c9 6000 	str.w	r6, [r9]
 8002c12:	f8c9 5004 	str.w	r5, [r9, #4]
 8002c16:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
 8002c1a:	dc7c      	bgt.n	8002d16 <_svfprintf_r+0x186>
 8002c1c:	f109 0908 	add.w	r9, r9, #8
 8002c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c22:	442b      	add	r3, r5
 8002c24:	9309      	str	r3, [sp, #36]	; 0x24
 8002c26:	7823      	ldrb	r3, [r4, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 82a8 	beq.w	800317e <_svfprintf_r+0x5ee>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	7867      	ldrb	r7, [r4, #1]
 8002c32:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c34:	4698      	mov	r8, r3
 8002c36:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
 8002c3a:	f104 0b01 	add.w	fp, r4, #1
 8002c3e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8002c42:	252b      	movs	r5, #43	; 0x2b
 8002c44:	f10b 0b01 	add.w	fp, fp, #1
 8002c48:	f1a7 0320 	sub.w	r3, r7, #32
 8002c4c:	2b5a      	cmp	r3, #90	; 0x5a
 8002c4e:	f200 83db 	bhi.w	8003408 <_svfprintf_r+0x878>
 8002c52:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002c56:	039c      	.short	0x039c
 8002c58:	03d903d9 	.word	0x03d903d9
 8002c5c:	03d90397 	.word	0x03d90397
 8002c60:	03d903d9 	.word	0x03d903d9
 8002c64:	03d90378 	.word	0x03d90378
 8002c68:	03ac03d9 	.word	0x03ac03d9
 8002c6c:	03d903a7 	.word	0x03d903a7
 8002c70:	0153016d 	.word	0x0153016d
 8002c74:	033603d9 	.word	0x033603d9
 8002c78:	00c600c6 	.word	0x00c600c6
 8002c7c:	00c600c6 	.word	0x00c600c6
 8002c80:	00c600c6 	.word	0x00c600c6
 8002c84:	00c600c6 	.word	0x00c600c6
 8002c88:	03d900c6 	.word	0x03d900c6
 8002c8c:	03d903d9 	.word	0x03d903d9
 8002c90:	03d903d9 	.word	0x03d903d9
 8002c94:	03d903d9 	.word	0x03d903d9
 8002c98:	03d9033b 	.word	0x03d9033b
 8002c9c:	02eb0172 	.word	0x02eb0172
 8002ca0:	033b033b 	.word	0x033b033b
 8002ca4:	03d9033b 	.word	0x03d9033b
 8002ca8:	03d903d9 	.word	0x03d903d9
 8002cac:	02e603d9 	.word	0x02e603d9
 8002cb0:	03d903d9 	.word	0x03d903d9
 8002cb4:	03d90084 	.word	0x03d90084
 8002cb8:	03d903d9 	.word	0x03d903d9
 8002cbc:	03d902bf 	.word	0x03d902bf
 8002cc0:	03d903c5 	.word	0x03d903c5
 8002cc4:	02a003d9 	.word	0x02a003d9
 8002cc8:	03d903d9 	.word	0x03d903d9
 8002ccc:	03d903d9 	.word	0x03d903d9
 8002cd0:	03d903d9 	.word	0x03d903d9
 8002cd4:	03d903d9 	.word	0x03d903d9
 8002cd8:	03d9033b 	.word	0x03d9033b
 8002cdc:	00d50172 	.word	0x00d50172
 8002ce0:	033b033b 	.word	0x033b033b
 8002ce4:	03b8033b 	.word	0x03b8033b
 8002ce8:	005b00d5 	.word	0x005b00d5
 8002cec:	031903d9 	.word	0x031903d9
 8002cf0:	030103d9 	.word	0x030103d9
 8002cf4:	03260086 	.word	0x03260086
 8002cf8:	03d9005b 	.word	0x03d9005b
 8002cfc:	005d02bf 	.word	0x005d02bf
 8002d00:	03d90124 	.word	0x03d90124
 8002d04:	013303d9 	.word	0x013303d9
 8002d08:	005d03d9 	.word	0x005d03d9
 8002d0c:	f048 0820 	orr.w	r8, r8, #32
 8002d10:	f89b 7000 	ldrb.w	r7, [fp]
 8002d14:	e796      	b.n	8002c44 <_svfprintf_r+0xb4>
 8002d16:	aa2c      	add	r2, sp, #176	; 0xb0
 8002d18:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d1a:	9807      	ldr	r0, [sp, #28]
 8002d1c:	f003 fe10 	bl	8006940 <__ssprint_r>
 8002d20:	b980      	cbnz	r0, 8002d44 <_svfprintf_r+0x1b4>
 8002d22:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8002d26:	e77b      	b.n	8002c20 <_svfprintf_r+0x90>
 8002d28:	aa2c      	add	r2, sp, #176	; 0xb0
 8002d2a:	4659      	mov	r1, fp
 8002d2c:	4650      	mov	r0, sl
 8002d2e:	f003 fe07 	bl	8006940 <__ssprint_r>
 8002d32:	2800      	cmp	r0, #0
 8002d34:	f001 80c4 	beq.w	8003ec0 <_svfprintf_r+0x1330>
 8002d38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002d3a:	b11b      	cbz	r3, 8002d44 <_svfprintf_r+0x1b4>
 8002d3c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002d3e:	9807      	ldr	r0, [sp, #28]
 8002d40:	f002 fbec 	bl	800551c <_free_r>
 8002d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d46:	899b      	ldrh	r3, [r3, #12]
 8002d48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d4e:	bf18      	it	ne
 8002d50:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8002d54:	9309      	str	r3, [sp, #36]	; 0x24
 8002d56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d58:	b059      	add	sp, #356	; 0x164
 8002d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d5e:	f048 0810 	orr.w	r8, r8, #16
 8002d62:	f018 0f20 	tst.w	r8, #32
 8002d66:	f000 8569 	beq.w	800383c <_svfprintf_r+0xcac>
 8002d6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002d6c:	3407      	adds	r4, #7
 8002d6e:	f024 0307 	bic.w	r3, r4, #7
 8002d72:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002d76:	f103 0208 	add.w	r2, r3, #8
 8002d7a:	920d      	str	r2, [sp, #52]	; 0x34
 8002d7c:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8002d80:	2200      	movs	r2, #0
 8002d82:	2100      	movs	r1, #0
 8002d84:	f88d 1093 	strb.w	r1, [sp, #147]	; 0x93
 8002d88:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8002d8c:	a958      	add	r1, sp, #352	; 0x160
 8002d8e:	9108      	str	r1, [sp, #32]
 8002d90:	f000 84a2 	beq.w	80036d8 <_svfprintf_r+0xb48>
 8002d94:	ea54 0105 	orrs.w	r1, r4, r5
 8002d98:	f023 0880 	bic.w	r8, r3, #128	; 0x80
 8002d9c:	d156      	bne.n	8002e4c <_svfprintf_r+0x2bc>
 8002d9e:	f1ba 0f00 	cmp.w	sl, #0
 8002da2:	f040 8795 	bne.w	8003cd0 <_svfprintf_r+0x1140>
 8002da6:	2a00      	cmp	r2, #0
 8002da8:	f040 8515 	bne.w	80037d6 <_svfprintf_r+0xc46>
 8002dac:	f013 0301 	ands.w	r3, r3, #1
 8002db0:	ae58      	add	r6, sp, #352	; 0x160
 8002db2:	930c      	str	r3, [sp, #48]	; 0x30
 8002db4:	d002      	beq.n	8002dbc <_svfprintf_r+0x22c>
 8002db6:	2330      	movs	r3, #48	; 0x30
 8002db8:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9310      	str	r3, [sp, #64]	; 0x40
 8002dc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8002dc2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8002dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002dc8:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 8002dcc:	4553      	cmp	r3, sl
 8002dce:	bfb8      	it	lt
 8002dd0:	4653      	movlt	r3, sl
 8002dd2:	9308      	str	r3, [sp, #32]
 8002dd4:	2a00      	cmp	r2, #0
 8002dd6:	f000 80c3 	beq.w	8002f60 <_svfprintf_r+0x3d0>
 8002dda:	9b08      	ldr	r3, [sp, #32]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	9308      	str	r3, [sp, #32]
 8002de0:	e0be      	b.n	8002f60 <_svfprintf_r+0x3d0>
 8002de2:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8002de6:	2200      	movs	r2, #0
 8002de8:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8002dec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002df0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002df4:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8002df8:	2b09      	cmp	r3, #9
 8002dfa:	d9f5      	bls.n	8002de8 <_svfprintf_r+0x258>
 8002dfc:	920b      	str	r2, [sp, #44]	; 0x2c
 8002dfe:	e723      	b.n	8002c48 <_svfprintf_r+0xb8>
 8002e00:	4643      	mov	r3, r8
 8002e02:	069e      	lsls	r6, r3, #26
 8002e04:	f140 8217 	bpl.w	8003236 <_svfprintf_r+0x6a6>
 8002e08:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002e0a:	3407      	adds	r4, #7
 8002e0c:	f024 0407 	bic.w	r4, r4, #7
 8002e10:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002e14:	f104 0208 	add.w	r2, r4, #8
 8002e18:	920d      	str	r2, [sp, #52]	; 0x34
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	460d      	mov	r5, r1
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	f171 0200 	sbcs.w	r2, r1, #0
 8002e24:	da05      	bge.n	8002e32 <_svfprintf_r+0x2a2>
 8002e26:	222d      	movs	r2, #45	; 0x2d
 8002e28:	4264      	negs	r4, r4
 8002e2a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8002e2e:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
 8002e32:	aa58      	add	r2, sp, #352	; 0x160
 8002e34:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8002e38:	9208      	str	r2, [sp, #32]
 8002e3a:	f000 86e6 	beq.w	8003c0a <_svfprintf_r+0x107a>
 8002e3e:	ea54 0105 	orrs.w	r1, r4, r5
 8002e42:	f04f 0201 	mov.w	r2, #1
 8002e46:	f023 0880 	bic.w	r8, r3, #128	; 0x80
 8002e4a:	d0a8      	beq.n	8002d9e <_svfprintf_r+0x20e>
 8002e4c:	2a01      	cmp	r2, #1
 8002e4e:	f000 8447 	beq.w	80036e0 <_svfprintf_r+0xb50>
 8002e52:	2a02      	cmp	r2, #2
 8002e54:	f000 82eb 	beq.w	800342e <_svfprintf_r+0x89e>
 8002e58:	a958      	add	r1, sp, #352	; 0x160
 8002e5a:	e000      	b.n	8002e5e <_svfprintf_r+0x2ce>
 8002e5c:	4631      	mov	r1, r6
 8002e5e:	08e2      	lsrs	r2, r4, #3
 8002e60:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8002e64:	08e8      	lsrs	r0, r5, #3
 8002e66:	f004 0307 	and.w	r3, r4, #7
 8002e6a:	4605      	mov	r5, r0
 8002e6c:	4614      	mov	r4, r2
 8002e6e:	3330      	adds	r3, #48	; 0x30
 8002e70:	ea54 0205 	orrs.w	r2, r4, r5
 8002e74:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002e78:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 8002e7c:	d1ee      	bne.n	8002e5c <_svfprintf_r+0x2cc>
 8002e7e:	f018 0f01 	tst.w	r8, #1
 8002e82:	f000 82e4 	beq.w	800344e <_svfprintf_r+0x8be>
 8002e86:	2b30      	cmp	r3, #48	; 0x30
 8002e88:	f000 82e1 	beq.w	800344e <_svfprintf_r+0x8be>
 8002e8c:	9a08      	ldr	r2, [sp, #32]
 8002e8e:	3902      	subs	r1, #2
 8002e90:	2330      	movs	r3, #48	; 0x30
 8002e92:	1a52      	subs	r2, r2, r1
 8002e94:	f806 3c01 	strb.w	r3, [r6, #-1]
 8002e98:	920c      	str	r2, [sp, #48]	; 0x30
 8002e9a:	460e      	mov	r6, r1
 8002e9c:	e78e      	b.n	8002dbc <_svfprintf_r+0x22c>
 8002e9e:	4643      	mov	r3, r8
 8002ea0:	069e      	lsls	r6, r3, #26
 8002ea2:	f140 82a2 	bpl.w	80033ea <_svfprintf_r+0x85a>
 8002ea6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002ea8:	3407      	adds	r4, #7
 8002eaa:	f024 0207 	bic.w	r2, r4, #7
 8002eae:	f102 0108 	add.w	r1, r2, #8
 8002eb2:	e9d2 4500 	ldrd	r4, r5, [r2]
 8002eb6:	910d      	str	r1, [sp, #52]	; 0x34
 8002eb8:	2201      	movs	r2, #1
 8002eba:	e762      	b.n	8002d82 <_svfprintf_r+0x1f2>
 8002ebc:	4bc1      	ldr	r3, [pc, #772]	; (80031c4 <_svfprintf_r+0x634>)
 8002ebe:	931b      	str	r3, [sp, #108]	; 0x6c
 8002ec0:	f018 0f20 	tst.w	r8, #32
 8002ec4:	f000 816d 	beq.w	80031a2 <_svfprintf_r+0x612>
 8002ec8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002eca:	3407      	adds	r4, #7
 8002ecc:	f024 0307 	bic.w	r3, r4, #7
 8002ed0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ed4:	f103 0208 	add.w	r2, r3, #8
 8002ed8:	920d      	str	r2, [sp, #52]	; 0x34
 8002eda:	f018 0f01 	tst.w	r8, #1
 8002ede:	d009      	beq.n	8002ef4 <_svfprintf_r+0x364>
 8002ee0:	ea54 0305 	orrs.w	r3, r4, r5
 8002ee4:	d006      	beq.n	8002ef4 <_svfprintf_r+0x364>
 8002ee6:	2330      	movs	r3, #48	; 0x30
 8002ee8:	f88d 7095 	strb.w	r7, [sp, #149]	; 0x95
 8002eec:	f048 0802 	orr.w	r8, r8, #2
 8002ef0:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
 8002ef4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8002ef8:	2202      	movs	r2, #2
 8002efa:	e742      	b.n	8002d82 <_svfprintf_r+0x1f2>
 8002efc:	f89b 7000 	ldrb.w	r7, [fp]
 8002f00:	2f2a      	cmp	r7, #42	; 0x2a
 8002f02:	f10b 0201 	add.w	r2, fp, #1
 8002f06:	f001 82f2 	beq.w	80044ee <_svfprintf_r+0x195e>
 8002f0a:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8002f0e:	2b09      	cmp	r3, #9
 8002f10:	4693      	mov	fp, r2
 8002f12:	f04f 0a00 	mov.w	sl, #0
 8002f16:	f63f ae97 	bhi.w	8002c48 <_svfprintf_r+0xb8>
 8002f1a:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8002f1e:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8002f22:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
 8002f26:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8002f2a:	2b09      	cmp	r3, #9
 8002f2c:	d9f5      	bls.n	8002f1a <_svfprintf_r+0x38a>
 8002f2e:	e68b      	b.n	8002c48 <_svfprintf_r+0xb8>
 8002f30:	f89b 7000 	ldrb.w	r7, [fp]
 8002f34:	f048 0804 	orr.w	r8, r8, #4
 8002f38:	e684      	b.n	8002c44 <_svfprintf_r+0xb4>
 8002f3a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	6801      	ldr	r1, [r0, #0]
 8002f40:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
 8002f44:	461a      	mov	r2, r3
 8002f46:	f88d 10fc 	strb.w	r1, [sp, #252]	; 0xfc
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	1d01      	adds	r1, r0, #4
 8002f4e:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
 8002f52:	e9cd 310c 	strd	r3, r1, [sp, #48]	; 0x30
 8002f56:	9308      	str	r3, [sp, #32]
 8002f58:	9210      	str	r2, [sp, #64]	; 0x40
 8002f5a:	4692      	mov	sl, r2
 8002f5c:	9213      	str	r2, [sp, #76]	; 0x4c
 8002f5e:	ae3f      	add	r6, sp, #252	; 0xfc
 8002f60:	f018 0302 	ands.w	r3, r8, #2
 8002f64:	930e      	str	r3, [sp, #56]	; 0x38
 8002f66:	d002      	beq.n	8002f6e <_svfprintf_r+0x3de>
 8002f68:	9b08      	ldr	r3, [sp, #32]
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	9308      	str	r3, [sp, #32]
 8002f6e:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8002f72:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8002f74:	9311      	str	r3, [sp, #68]	; 0x44
 8002f76:	d13f      	bne.n	8002ff8 <_svfprintf_r+0x468>
 8002f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f7a:	9908      	ldr	r1, [sp, #32]
 8002f7c:	1a5d      	subs	r5, r3, r1
 8002f7e:	2d00      	cmp	r5, #0
 8002f80:	dd3a      	ble.n	8002ff8 <_svfprintf_r+0x468>
 8002f82:	2d10      	cmp	r5, #16
 8002f84:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8002f86:	dd29      	ble.n	8002fdc <_svfprintf_r+0x44c>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	46b1      	mov	r9, r6
 8002f8e:	2310      	movs	r3, #16
 8002f90:	9722      	str	r7, [sp, #136]	; 0x88
 8002f92:	9c07      	ldr	r4, [sp, #28]
 8002f94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002f96:	e004      	b.n	8002fa2 <_svfprintf_r+0x412>
 8002f98:	3d10      	subs	r5, #16
 8002f9a:	2d10      	cmp	r5, #16
 8002f9c:	f101 0108 	add.w	r1, r1, #8
 8002fa0:	dd18      	ble.n	8002fd4 <_svfprintf_r+0x444>
 8002fa2:	3201      	adds	r2, #1
 8002fa4:	4f88      	ldr	r7, [pc, #544]	; (80031c8 <_svfprintf_r+0x638>)
 8002fa6:	3010      	adds	r0, #16
 8002fa8:	2a07      	cmp	r2, #7
 8002faa:	e9cd 202d 	strd	r2, r0, [sp, #180]	; 0xb4
 8002fae:	e9c1 7300 	strd	r7, r3, [r1]
 8002fb2:	ddf1      	ble.n	8002f98 <_svfprintf_r+0x408>
 8002fb4:	aa2c      	add	r2, sp, #176	; 0xb0
 8002fb6:	4631      	mov	r1, r6
 8002fb8:	4620      	mov	r0, r4
 8002fba:	9312      	str	r3, [sp, #72]	; 0x48
 8002fbc:	f003 fcc0 	bl	8006940 <__ssprint_r>
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	f47f aeb9 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8002fc6:	3d10      	subs	r5, #16
 8002fc8:	2d10      	cmp	r5, #16
 8002fca:	e9dd 202d 	ldrd	r2, r0, [sp, #180]	; 0xb4
 8002fce:	a92f      	add	r1, sp, #188	; 0xbc
 8002fd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002fd2:	dce6      	bgt.n	8002fa2 <_svfprintf_r+0x412>
 8002fd4:	9f22      	ldr	r7, [sp, #136]	; 0x88
 8002fd6:	464e      	mov	r6, r9
 8002fd8:	4604      	mov	r4, r0
 8002fda:	4689      	mov	r9, r1
 8002fdc:	3201      	adds	r2, #1
 8002fde:	4b7a      	ldr	r3, [pc, #488]	; (80031c8 <_svfprintf_r+0x638>)
 8002fe0:	442c      	add	r4, r5
 8002fe2:	2a07      	cmp	r2, #7
 8002fe4:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 8002fe8:	e9c9 3500 	strd	r3, r5, [r9]
 8002fec:	f300 857f 	bgt.w	8003aee <_svfprintf_r+0xf5e>
 8002ff0:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 8002ff4:	f109 0908 	add.w	r9, r9, #8
 8002ff8:	b172      	cbz	r2, 8003018 <_svfprintf_r+0x488>
 8002ffa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8002ffc:	3201      	adds	r2, #1
 8002ffe:	3401      	adds	r4, #1
 8003000:	f10d 0093 	add.w	r0, sp, #147	; 0x93
 8003004:	2101      	movs	r1, #1
 8003006:	2a07      	cmp	r2, #7
 8003008:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 800300c:	e9c9 0100 	strd	r0, r1, [r9]
 8003010:	f300 8373 	bgt.w	80036fa <_svfprintf_r+0xb6a>
 8003014:	f109 0908 	add.w	r9, r9, #8
 8003018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800301a:	b16b      	cbz	r3, 8003038 <_svfprintf_r+0x4a8>
 800301c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800301e:	3301      	adds	r3, #1
 8003020:	3402      	adds	r4, #2
 8003022:	a925      	add	r1, sp, #148	; 0x94
 8003024:	2202      	movs	r2, #2
 8003026:	2b07      	cmp	r3, #7
 8003028:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
 800302c:	e9c9 1200 	strd	r1, r2, [r9]
 8003030:	f300 836f 	bgt.w	8003712 <_svfprintf_r+0xb82>
 8003034:	f109 0908 	add.w	r9, r9, #8
 8003038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800303a:	2b80      	cmp	r3, #128	; 0x80
 800303c:	f000 826a 	beq.w	8003514 <_svfprintf_r+0x984>
 8003040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003042:	ebaa 0503 	sub.w	r5, sl, r3
 8003046:	2d00      	cmp	r5, #0
 8003048:	dd35      	ble.n	80030b6 <_svfprintf_r+0x526>
 800304a:	2d10      	cmp	r5, #16
 800304c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800304e:	4b5f      	ldr	r3, [pc, #380]	; (80031cc <_svfprintf_r+0x63c>)
 8003050:	dd26      	ble.n	80030a0 <_svfprintf_r+0x510>
 8003052:	4649      	mov	r1, r9
 8003054:	4620      	mov	r0, r4
 8003056:	46b1      	mov	r9, r6
 8003058:	f04f 0a10 	mov.w	sl, #16
 800305c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800305e:	461c      	mov	r4, r3
 8003060:	e004      	b.n	800306c <_svfprintf_r+0x4dc>
 8003062:	3d10      	subs	r5, #16
 8003064:	2d10      	cmp	r5, #16
 8003066:	f101 0108 	add.w	r1, r1, #8
 800306a:	dd15      	ble.n	8003098 <_svfprintf_r+0x508>
 800306c:	3201      	adds	r2, #1
 800306e:	3010      	adds	r0, #16
 8003070:	2a07      	cmp	r2, #7
 8003072:	e9cd 202d 	strd	r2, r0, [sp, #180]	; 0xb4
 8003076:	e9c1 4a00 	strd	r4, sl, [r1]
 800307a:	ddf2      	ble.n	8003062 <_svfprintf_r+0x4d2>
 800307c:	aa2c      	add	r2, sp, #176	; 0xb0
 800307e:	4631      	mov	r1, r6
 8003080:	9807      	ldr	r0, [sp, #28]
 8003082:	f003 fc5d 	bl	8006940 <__ssprint_r>
 8003086:	2800      	cmp	r0, #0
 8003088:	f47f ae56 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 800308c:	3d10      	subs	r5, #16
 800308e:	2d10      	cmp	r5, #16
 8003090:	e9dd 202d 	ldrd	r2, r0, [sp, #180]	; 0xb4
 8003094:	a92f      	add	r1, sp, #188	; 0xbc
 8003096:	dce9      	bgt.n	800306c <_svfprintf_r+0x4dc>
 8003098:	464e      	mov	r6, r9
 800309a:	4623      	mov	r3, r4
 800309c:	4689      	mov	r9, r1
 800309e:	4604      	mov	r4, r0
 80030a0:	3201      	adds	r2, #1
 80030a2:	442c      	add	r4, r5
 80030a4:	2a07      	cmp	r2, #7
 80030a6:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 80030aa:	e9c9 3500 	strd	r3, r5, [r9]
 80030ae:	f300 833c 	bgt.w	800372a <_svfprintf_r+0xb9a>
 80030b2:	f109 0908 	add.w	r9, r9, #8
 80030b6:	f418 7f80 	tst.w	r8, #256	; 0x100
 80030ba:	f040 81cc 	bne.w	8003456 <_svfprintf_r+0x8c6>
 80030be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80030c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030c2:	f8c9 6000 	str.w	r6, [r9]
 80030c6:	3301      	adds	r3, #1
 80030c8:	4414      	add	r4, r2
 80030ca:	2b07      	cmp	r3, #7
 80030cc:	942e      	str	r4, [sp, #184]	; 0xb8
 80030ce:	f8c9 2004 	str.w	r2, [r9, #4]
 80030d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80030d4:	f300 829e 	bgt.w	8003614 <_svfprintf_r+0xa84>
 80030d8:	f109 0908 	add.w	r9, r9, #8
 80030dc:	f018 0f04 	tst.w	r8, #4
 80030e0:	d033      	beq.n	800314a <_svfprintf_r+0x5ba>
 80030e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030e4:	9a08      	ldr	r2, [sp, #32]
 80030e6:	1a9d      	subs	r5, r3, r2
 80030e8:	2d00      	cmp	r5, #0
 80030ea:	dd2e      	ble.n	800314a <_svfprintf_r+0x5ba>
 80030ec:	2d10      	cmp	r5, #16
 80030ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80030f0:	dd21      	ble.n	8003136 <_svfprintf_r+0x5a6>
 80030f2:	2610      	movs	r6, #16
 80030f4:	9f07      	ldr	r7, [sp, #28]
 80030f6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80030fa:	e004      	b.n	8003106 <_svfprintf_r+0x576>
 80030fc:	3d10      	subs	r5, #16
 80030fe:	2d10      	cmp	r5, #16
 8003100:	f109 0908 	add.w	r9, r9, #8
 8003104:	dd17      	ble.n	8003136 <_svfprintf_r+0x5a6>
 8003106:	3301      	adds	r3, #1
 8003108:	4a2f      	ldr	r2, [pc, #188]	; (80031c8 <_svfprintf_r+0x638>)
 800310a:	3410      	adds	r4, #16
 800310c:	2b07      	cmp	r3, #7
 800310e:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
 8003112:	e9c9 2600 	strd	r2, r6, [r9]
 8003116:	ddf1      	ble.n	80030fc <_svfprintf_r+0x56c>
 8003118:	aa2c      	add	r2, sp, #176	; 0xb0
 800311a:	4641      	mov	r1, r8
 800311c:	4638      	mov	r0, r7
 800311e:	f003 fc0f 	bl	8006940 <__ssprint_r>
 8003122:	2800      	cmp	r0, #0
 8003124:	f47f ae08 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003128:	3d10      	subs	r5, #16
 800312a:	2d10      	cmp	r5, #16
 800312c:	e9dd 342d 	ldrd	r3, r4, [sp, #180]	; 0xb4
 8003130:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8003134:	dce7      	bgt.n	8003106 <_svfprintf_r+0x576>
 8003136:	3301      	adds	r3, #1
 8003138:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <_svfprintf_r+0x638>)
 800313a:	442c      	add	r4, r5
 800313c:	2b07      	cmp	r3, #7
 800313e:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
 8003142:	e9c9 2500 	strd	r2, r5, [r9]
 8003146:	f300 83a1 	bgt.w	800388c <_svfprintf_r+0xcfc>
 800314a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800314c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800314e:	9908      	ldr	r1, [sp, #32]
 8003150:	428a      	cmp	r2, r1
 8003152:	bfac      	ite	ge
 8003154:	189b      	addge	r3, r3, r2
 8003156:	185b      	addlt	r3, r3, r1
 8003158:	9309      	str	r3, [sp, #36]	; 0x24
 800315a:	2c00      	cmp	r4, #0
 800315c:	f040 8216 	bne.w	800358c <_svfprintf_r+0x9fc>
 8003160:	2300      	movs	r3, #0
 8003162:	932d      	str	r3, [sp, #180]	; 0xb4
 8003164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003166:	b11b      	cbz	r3, 8003170 <_svfprintf_r+0x5e0>
 8003168:	9910      	ldr	r1, [sp, #64]	; 0x40
 800316a:	9807      	ldr	r0, [sp, #28]
 800316c:	f002 f9d6 	bl	800551c <_free_r>
 8003170:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8003174:	465e      	mov	r6, fp
 8003176:	7833      	ldrb	r3, [r6, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f47f ad37 	bne.w	8002bec <_svfprintf_r+0x5c>
 800317e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8003180:	2b00      	cmp	r3, #0
 8003182:	f43f addf 	beq.w	8002d44 <_svfprintf_r+0x1b4>
 8003186:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003188:	9807      	ldr	r0, [sp, #28]
 800318a:	aa2c      	add	r2, sp, #176	; 0xb0
 800318c:	4621      	mov	r1, r4
 800318e:	f003 fbd7 	bl	8006940 <__ssprint_r>
 8003192:	89a3      	ldrh	r3, [r4, #12]
 8003194:	e5d8      	b.n	8002d48 <_svfprintf_r+0x1b8>
 8003196:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <_svfprintf_r+0x640>)
 8003198:	931b      	str	r3, [sp, #108]	; 0x6c
 800319a:	f018 0f20 	tst.w	r8, #32
 800319e:	f47f ae93 	bne.w	8002ec8 <_svfprintf_r+0x338>
 80031a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80031a4:	f018 0f10 	tst.w	r8, #16
 80031a8:	f102 0304 	add.w	r3, r2, #4
 80031ac:	f040 837c 	bne.w	80038a8 <_svfprintf_r+0xd18>
 80031b0:	f018 0f40 	tst.w	r8, #64	; 0x40
 80031b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80031b6:	f000 8373 	beq.w	80038a0 <_svfprintf_r+0xd10>
 80031ba:	8814      	ldrh	r4, [r2, #0]
 80031bc:	930d      	str	r3, [sp, #52]	; 0x34
 80031be:	2500      	movs	r5, #0
 80031c0:	e68b      	b.n	8002eda <_svfprintf_r+0x34a>
 80031c2:	bf00      	nop
 80031c4:	08008bd0 	.word	0x08008bd0
 80031c8:	08008c04 	.word	0x08008c04
 80031cc:	08008c14 	.word	0x08008c14
 80031d0:	08008be4 	.word	0x08008be4
 80031d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031d6:	681e      	ldr	r6, [r3, #0]
 80031d8:	2500      	movs	r5, #0
 80031da:	f88d 5093 	strb.w	r5, [sp, #147]	; 0x93
 80031de:	1d1c      	adds	r4, r3, #4
 80031e0:	2e00      	cmp	r6, #0
 80031e2:	f000 8474 	beq.w	8003ace <_svfprintf_r+0xf3e>
 80031e6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80031ea:	f000 8661 	beq.w	8003eb0 <_svfprintf_r+0x1320>
 80031ee:	4652      	mov	r2, sl
 80031f0:	4629      	mov	r1, r5
 80031f2:	4630      	mov	r0, r6
 80031f4:	f002 fd4c 	bl	8005c90 <memchr>
 80031f8:	9010      	str	r0, [sp, #64]	; 0x40
 80031fa:	2800      	cmp	r0, #0
 80031fc:	f000 8795 	beq.w	800412a <_svfprintf_r+0x159a>
 8003200:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003202:	1b9b      	subs	r3, r3, r6
 8003204:	930c      	str	r3, [sp, #48]	; 0x30
 8003206:	46aa      	mov	sl, r5
 8003208:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800320c:	940d      	str	r4, [sp, #52]	; 0x34
 800320e:	9308      	str	r3, [sp, #32]
 8003210:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003214:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8003218:	e9cd aa15 	strd	sl, sl, [sp, #84]	; 0x54
 800321c:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 8003220:	e5d8      	b.n	8002dd4 <_svfprintf_r+0x244>
 8003222:	f048 0808 	orr.w	r8, r8, #8
 8003226:	f89b 7000 	ldrb.w	r7, [fp]
 800322a:	e50b      	b.n	8002c44 <_svfprintf_r+0xb4>
 800322c:	f048 0310 	orr.w	r3, r8, #16
 8003230:	069e      	lsls	r6, r3, #26
 8003232:	f53f ade9 	bmi.w	8002e08 <_svfprintf_r+0x278>
 8003236:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003238:	06dd      	lsls	r5, r3, #27
 800323a:	f101 0204 	add.w	r2, r1, #4
 800323e:	f100 834d 	bmi.w	80038dc <_svfprintf_r+0xd4c>
 8003242:	065c      	lsls	r4, r3, #25
 8003244:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003246:	f140 8346 	bpl.w	80038d6 <_svfprintf_r+0xd46>
 800324a:	f9b1 4000 	ldrsh.w	r4, [r1]
 800324e:	920d      	str	r2, [sp, #52]	; 0x34
 8003250:	17e5      	asrs	r5, r4, #31
 8003252:	4620      	mov	r0, r4
 8003254:	4629      	mov	r1, r5
 8003256:	e5e2      	b.n	8002e1e <_svfprintf_r+0x28e>
 8003258:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800325a:	f018 0f20 	tst.w	r8, #32
 800325e:	f852 3b04 	ldr.w	r3, [r2], #4
 8003262:	920d      	str	r2, [sp, #52]	; 0x34
 8003264:	f040 8341 	bne.w	80038ea <_svfprintf_r+0xd5a>
 8003268:	f018 0f10 	tst.w	r8, #16
 800326c:	f040 8581 	bne.w	8003d72 <_svfprintf_r+0x11e2>
 8003270:	f018 0f40 	tst.w	r8, #64	; 0x40
 8003274:	f040 8632 	bne.w	8003edc <_svfprintf_r+0x134c>
 8003278:	f418 7f00 	tst.w	r8, #512	; 0x200
 800327c:	f000 8579 	beq.w	8003d72 <_svfprintf_r+0x11e2>
 8003280:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	465e      	mov	r6, fp
 8003286:	e776      	b.n	8003176 <_svfprintf_r+0x5e6>
 8003288:	f89b 7000 	ldrb.w	r7, [fp]
 800328c:	2f6c      	cmp	r7, #108	; 0x6c
 800328e:	bf03      	ittte	eq
 8003290:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
 8003294:	f048 0820 	orreq.w	r8, r8, #32
 8003298:	f10b 0b01 	addeq.w	fp, fp, #1
 800329c:	f048 0810 	orrne.w	r8, r8, #16
 80032a0:	e4d0      	b.n	8002c44 <_svfprintf_r+0xb4>
 80032a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80032a4:	4bbe      	ldr	r3, [pc, #760]	; (80035a0 <_svfprintf_r+0xa10>)
 80032a6:	680c      	ldr	r4, [r1, #0]
 80032a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80032aa:	f647 0230 	movw	r2, #30768	; 0x7830
 80032ae:	3104      	adds	r1, #4
 80032b0:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
 80032b4:	f048 0302 	orr.w	r3, r8, #2
 80032b8:	910d      	str	r1, [sp, #52]	; 0x34
 80032ba:	2500      	movs	r5, #0
 80032bc:	2202      	movs	r2, #2
 80032be:	2778      	movs	r7, #120	; 0x78
 80032c0:	e55f      	b.n	8002d82 <_svfprintf_r+0x1f2>
 80032c2:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80032c6:	f89b 7000 	ldrb.w	r7, [fp]
 80032ca:	e4bb      	b.n	8002c44 <_svfprintf_r+0xb4>
 80032cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80032ce:	4bb5      	ldr	r3, [pc, #724]	; (80035a4 <_svfprintf_r+0xa14>)
 80032d0:	3407      	adds	r4, #7
 80032d2:	f024 0c07 	bic.w	ip, r4, #7
 80032d6:	e9dc 0100 	ldrd	r0, r1, [ip]
 80032da:	f10c 0408 	add.w	r4, ip, #8
 80032de:	9117      	str	r1, [sp, #92]	; 0x5c
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80032e8:	9018      	str	r0, [sp, #96]	; 0x60
 80032ea:	4605      	mov	r5, r0
 80032ec:	9108      	str	r1, [sp, #32]
 80032ee:	940d      	str	r4, [sp, #52]	; 0x34
 80032f0:	f005 fa8a 	bl	8008808 <__aeabi_dcmpun>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	f040 82ff 	bne.w	80038f8 <_svfprintf_r+0xd68>
 80032fa:	4628      	mov	r0, r5
 80032fc:	9908      	ldr	r1, [sp, #32]
 80032fe:	4ba9      	ldr	r3, [pc, #676]	; (80035a4 <_svfprintf_r+0xa14>)
 8003300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003304:	f005 fa62 	bl	80087cc <__aeabi_dcmple>
 8003308:	2800      	cmp	r0, #0
 800330a:	f040 82f5 	bne.w	80038f8 <_svfprintf_r+0xd68>
 800330e:	e9dd 0218 	ldrd	r0, r2, [sp, #96]	; 0x60
 8003312:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003314:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003316:	f005 fa4f 	bl	80087b8 <__aeabi_dcmplt>
 800331a:	2800      	cmp	r0, #0
 800331c:	f040 86e5 	bne.w	80040ea <_svfprintf_r+0x155a>
 8003320:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 8003324:	4ea0      	ldr	r6, [pc, #640]	; (80035a8 <_svfprintf_r+0xa18>)
 8003326:	4ba1      	ldr	r3, [pc, #644]	; (80035ac <_svfprintf_r+0xa1c>)
 8003328:	2000      	movs	r0, #0
 800332a:	2103      	movs	r1, #3
 800332c:	9108      	str	r1, [sp, #32]
 800332e:	9010      	str	r0, [sp, #64]	; 0x40
 8003330:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8003334:	2f47      	cmp	r7, #71	; 0x47
 8003336:	bfd8      	it	le
 8003338:	461e      	movle	r6, r3
 800333a:	910c      	str	r1, [sp, #48]	; 0x30
 800333c:	4682      	mov	sl, r0
 800333e:	9013      	str	r0, [sp, #76]	; 0x4c
 8003340:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
 8003344:	e546      	b.n	8002dd4 <_svfprintf_r+0x244>
 8003346:	9f07      	ldr	r7, [sp, #28]
 8003348:	4638      	mov	r0, r7
 800334a:	f002 f9dd 	bl	8005708 <_localeconv_r>
 800334e:	6843      	ldr	r3, [r0, #4]
 8003350:	931e      	str	r3, [sp, #120]	; 0x78
 8003352:	4618      	mov	r0, r3
 8003354:	f003 fa54 	bl	8006800 <strlen>
 8003358:	9021      	str	r0, [sp, #132]	; 0x84
 800335a:	4604      	mov	r4, r0
 800335c:	4638      	mov	r0, r7
 800335e:	f002 f9d3 	bl	8005708 <_localeconv_r>
 8003362:	6883      	ldr	r3, [r0, #8]
 8003364:	9320      	str	r3, [sp, #128]	; 0x80
 8003366:	2c00      	cmp	r4, #0
 8003368:	f43f acd2 	beq.w	8002d10 <_svfprintf_r+0x180>
 800336c:	f89b 7000 	ldrb.w	r7, [fp]
 8003370:	2b00      	cmp	r3, #0
 8003372:	f43f ac67 	beq.w	8002c44 <_svfprintf_r+0xb4>
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	f43f ac63 	beq.w	8002c44 <_svfprintf_r+0xb4>
 800337e:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8003382:	e45f      	b.n	8002c44 <_svfprintf_r+0xb4>
 8003384:	f048 0801 	orr.w	r8, r8, #1
 8003388:	f89b 7000 	ldrb.w	r7, [fp]
 800338c:	e45a      	b.n	8002c44 <_svfprintf_r+0xb4>
 800338e:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
 8003392:	f89b 7000 	ldrb.w	r7, [fp]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f47f ac54 	bne.w	8002c44 <_svfprintf_r+0xb4>
 800339c:	2320      	movs	r3, #32
 800339e:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
 80033a2:	e44f      	b.n	8002c44 <_svfprintf_r+0xb4>
 80033a4:	f88d 5093 	strb.w	r5, [sp, #147]	; 0x93
 80033a8:	f89b 7000 	ldrb.w	r7, [fp]
 80033ac:	e44a      	b.n	8002c44 <_svfprintf_r+0xb4>
 80033ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033b0:	f89b 7000 	ldrb.w	r7, [fp]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80033b8:	2a00      	cmp	r2, #0
 80033ba:	f103 0304 	add.w	r3, r3, #4
 80033be:	f2c0 835f 	blt.w	8003a80 <_svfprintf_r+0xef0>
 80033c2:	930d      	str	r3, [sp, #52]	; 0x34
 80033c4:	e43e      	b.n	8002c44 <_svfprintf_r+0xb4>
 80033c6:	f89b 7000 	ldrb.w	r7, [fp]
 80033ca:	2f68      	cmp	r7, #104	; 0x68
 80033cc:	bf03      	ittte	eq
 80033ce:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
 80033d2:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 80033d6:	f10b 0b01 	addeq.w	fp, fp, #1
 80033da:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 80033de:	e431      	b.n	8002c44 <_svfprintf_r+0xb4>
 80033e0:	f048 0310 	orr.w	r3, r8, #16
 80033e4:	069e      	lsls	r6, r3, #26
 80033e6:	f53f ad5e 	bmi.w	8002ea6 <_svfprintf_r+0x316>
 80033ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80033ec:	06dd      	lsls	r5, r3, #27
 80033ee:	f102 0104 	add.w	r1, r2, #4
 80033f2:	f100 8261 	bmi.w	80038b8 <_svfprintf_r+0xd28>
 80033f6:	065c      	lsls	r4, r3, #25
 80033f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80033fa:	f140 825a 	bpl.w	80038b2 <_svfprintf_r+0xd22>
 80033fe:	8814      	ldrh	r4, [r2, #0]
 8003400:	910d      	str	r1, [sp, #52]	; 0x34
 8003402:	2500      	movs	r5, #0
 8003404:	2201      	movs	r2, #1
 8003406:	e4bc      	b.n	8002d82 <_svfprintf_r+0x1f2>
 8003408:	2f00      	cmp	r7, #0
 800340a:	f43f aeb8 	beq.w	800317e <_svfprintf_r+0x5ee>
 800340e:	2300      	movs	r3, #0
 8003410:	2101      	movs	r1, #1
 8003412:	461a      	mov	r2, r3
 8003414:	9108      	str	r1, [sp, #32]
 8003416:	f88d 70fc 	strb.w	r7, [sp, #252]	; 0xfc
 800341a:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
 800341e:	9310      	str	r3, [sp, #64]	; 0x40
 8003420:	469a      	mov	sl, r3
 8003422:	9313      	str	r3, [sp, #76]	; 0x4c
 8003424:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8003428:	910c      	str	r1, [sp, #48]	; 0x30
 800342a:	ae3f      	add	r6, sp, #252	; 0xfc
 800342c:	e598      	b.n	8002f60 <_svfprintf_r+0x3d0>
 800342e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003430:	ae58      	add	r6, sp, #352	; 0x160
 8003432:	0923      	lsrs	r3, r4, #4
 8003434:	f004 010f 	and.w	r1, r4, #15
 8003438:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800343c:	092a      	lsrs	r2, r5, #4
 800343e:	461c      	mov	r4, r3
 8003440:	4615      	mov	r5, r2
 8003442:	5c43      	ldrb	r3, [r0, r1]
 8003444:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8003448:	ea54 0305 	orrs.w	r3, r4, r5
 800344c:	d1f1      	bne.n	8003432 <_svfprintf_r+0x8a2>
 800344e:	9b08      	ldr	r3, [sp, #32]
 8003450:	1b9b      	subs	r3, r3, r6
 8003452:	930c      	str	r3, [sp, #48]	; 0x30
 8003454:	e4b2      	b.n	8002dbc <_svfprintf_r+0x22c>
 8003456:	2f65      	cmp	r7, #101	; 0x65
 8003458:	f340 80e8 	ble.w	800362c <_svfprintf_r+0xa9c>
 800345c:	e9dd 0218 	ldrd	r0, r2, [sp, #96]	; 0x60
 8003460:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003462:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003464:	f005 f99e 	bl	80087a4 <__aeabi_dcmpeq>
 8003468:	2800      	cmp	r0, #0
 800346a:	f000 816a 	beq.w	8003742 <_svfprintf_r+0xbb2>
 800346e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8003470:	4a4f      	ldr	r2, [pc, #316]	; (80035b0 <_svfprintf_r+0xa20>)
 8003472:	f8c9 2000 	str.w	r2, [r9]
 8003476:	3301      	adds	r3, #1
 8003478:	3401      	adds	r4, #1
 800347a:	2201      	movs	r2, #1
 800347c:	2b07      	cmp	r3, #7
 800347e:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
 8003482:	f8c9 2004 	str.w	r2, [r9, #4]
 8003486:	f300 844f 	bgt.w	8003d28 <_svfprintf_r+0x1198>
 800348a:	f109 0908 	add.w	r9, r9, #8
 800348e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003490:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003492:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8003494:	4293      	cmp	r3, r2
 8003496:	f280 81f4 	bge.w	8003882 <_svfprintf_r+0xcf2>
 800349a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800349c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800349e:	f8c9 2000 	str.w	r2, [r9]
 80034a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80034a4:	f8c9 2004 	str.w	r2, [r9, #4]
 80034a8:	3301      	adds	r3, #1
 80034aa:	4414      	add	r4, r2
 80034ac:	2b07      	cmp	r3, #7
 80034ae:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
 80034b2:	f300 8300 	bgt.w	8003ab6 <_svfprintf_r+0xf26>
 80034b6:	f109 0908 	add.w	r9, r9, #8
 80034ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80034bc:	1e5d      	subs	r5, r3, #1
 80034be:	2d00      	cmp	r5, #0
 80034c0:	f77f ae0c 	ble.w	80030dc <_svfprintf_r+0x54c>
 80034c4:	2d10      	cmp	r5, #16
 80034c6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80034c8:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <_svfprintf_r+0xa24>)
 80034ca:	f340 8416 	ble.w	8003cfa <_svfprintf_r+0x116a>
 80034ce:	4619      	mov	r1, r3
 80034d0:	2610      	movs	r6, #16
 80034d2:	4623      	mov	r3, r4
 80034d4:	9f07      	ldr	r7, [sp, #28]
 80034d6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80034da:	460c      	mov	r4, r1
 80034dc:	e005      	b.n	80034ea <_svfprintf_r+0x95a>
 80034de:	f109 0908 	add.w	r9, r9, #8
 80034e2:	3d10      	subs	r5, #16
 80034e4:	2d10      	cmp	r5, #16
 80034e6:	f340 8405 	ble.w	8003cf4 <_svfprintf_r+0x1164>
 80034ea:	3201      	adds	r2, #1
 80034ec:	3310      	adds	r3, #16
 80034ee:	2a07      	cmp	r2, #7
 80034f0:	e9cd 232d 	strd	r2, r3, [sp, #180]	; 0xb4
 80034f4:	e9c9 4600 	strd	r4, r6, [r9]
 80034f8:	ddf1      	ble.n	80034de <_svfprintf_r+0x94e>
 80034fa:	aa2c      	add	r2, sp, #176	; 0xb0
 80034fc:	4651      	mov	r1, sl
 80034fe:	4638      	mov	r0, r7
 8003500:	f003 fa1e 	bl	8006940 <__ssprint_r>
 8003504:	2800      	cmp	r0, #0
 8003506:	f47f ac17 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 800350a:	e9dd 232d 	ldrd	r2, r3, [sp, #180]	; 0xb4
 800350e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8003512:	e7e6      	b.n	80034e2 <_svfprintf_r+0x952>
 8003514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003516:	9a08      	ldr	r2, [sp, #32]
 8003518:	1a9d      	subs	r5, r3, r2
 800351a:	2d00      	cmp	r5, #0
 800351c:	f77f ad90 	ble.w	8003040 <_svfprintf_r+0x4b0>
 8003520:	2d10      	cmp	r5, #16
 8003522:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8003524:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <_svfprintf_r+0xa24>)
 8003526:	dd25      	ble.n	8003574 <_svfprintf_r+0x9e4>
 8003528:	4649      	mov	r1, r9
 800352a:	4620      	mov	r0, r4
 800352c:	46b1      	mov	r9, r6
 800352e:	461c      	mov	r4, r3
 8003530:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003532:	e004      	b.n	800353e <_svfprintf_r+0x9ae>
 8003534:	3d10      	subs	r5, #16
 8003536:	2d10      	cmp	r5, #16
 8003538:	f101 0108 	add.w	r1, r1, #8
 800353c:	dd16      	ble.n	800356c <_svfprintf_r+0x9dc>
 800353e:	3201      	adds	r2, #1
 8003540:	3010      	adds	r0, #16
 8003542:	2310      	movs	r3, #16
 8003544:	2a07      	cmp	r2, #7
 8003546:	e9cd 202d 	strd	r2, r0, [sp, #180]	; 0xb4
 800354a:	600c      	str	r4, [r1, #0]
 800354c:	604b      	str	r3, [r1, #4]
 800354e:	ddf1      	ble.n	8003534 <_svfprintf_r+0x9a4>
 8003550:	aa2c      	add	r2, sp, #176	; 0xb0
 8003552:	4631      	mov	r1, r6
 8003554:	9807      	ldr	r0, [sp, #28]
 8003556:	f003 f9f3 	bl	8006940 <__ssprint_r>
 800355a:	2800      	cmp	r0, #0
 800355c:	f47f abec 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003560:	3d10      	subs	r5, #16
 8003562:	2d10      	cmp	r5, #16
 8003564:	e9dd 202d 	ldrd	r2, r0, [sp, #180]	; 0xb4
 8003568:	a92f      	add	r1, sp, #188	; 0xbc
 800356a:	dce8      	bgt.n	800353e <_svfprintf_r+0x9ae>
 800356c:	464e      	mov	r6, r9
 800356e:	4623      	mov	r3, r4
 8003570:	4689      	mov	r9, r1
 8003572:	4604      	mov	r4, r0
 8003574:	3201      	adds	r2, #1
 8003576:	442c      	add	r4, r5
 8003578:	2a07      	cmp	r2, #7
 800357a:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 800357e:	e9c9 3500 	strd	r3, r5, [r9]
 8003582:	f300 83c4 	bgt.w	8003d0e <_svfprintf_r+0x117e>
 8003586:	f109 0908 	add.w	r9, r9, #8
 800358a:	e559      	b.n	8003040 <_svfprintf_r+0x4b0>
 800358c:	aa2c      	add	r2, sp, #176	; 0xb0
 800358e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003590:	9807      	ldr	r0, [sp, #28]
 8003592:	f003 f9d5 	bl	8006940 <__ssprint_r>
 8003596:	2800      	cmp	r0, #0
 8003598:	f43f ade2 	beq.w	8003160 <_svfprintf_r+0x5d0>
 800359c:	f7ff bbcc 	b.w	8002d38 <_svfprintf_r+0x1a8>
 80035a0:	08008bd0 	.word	0x08008bd0
 80035a4:	7fefffff 	.word	0x7fefffff
 80035a8:	08008bc4 	.word	0x08008bc4
 80035ac:	08008bc0 	.word	0x08008bc0
 80035b0:	08008c00 	.word	0x08008c00
 80035b4:	08008c14 	.word	0x08008c14
 80035b8:	aa2c      	add	r2, sp, #176	; 0xb0
 80035ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80035bc:	9807      	ldr	r0, [sp, #28]
 80035be:	f003 f9bf 	bl	8006940 <__ssprint_r>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	f47f abb8 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 80035c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80035ca:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 80035cc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 80035d0:	b91b      	cbnz	r3, 80035da <_svfprintf_r+0xa4a>
 80035d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80035d4:	2a00      	cmp	r2, #0
 80035d6:	f000 8499 	beq.w	8003f0c <_svfprintf_r+0x137c>
 80035da:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80035dc:	991d      	ldr	r1, [sp, #116]	; 0x74
 80035de:	f8c9 1000 	str.w	r1, [r9]
 80035e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80035e4:	f8c9 1004 	str.w	r1, [r9, #4]
 80035e8:	3201      	adds	r2, #1
 80035ea:	440c      	add	r4, r1
 80035ec:	2a07      	cmp	r2, #7
 80035ee:	942e      	str	r4, [sp, #184]	; 0xb8
 80035f0:	922d      	str	r2, [sp, #180]	; 0xb4
 80035f2:	f300 85a7 	bgt.w	8004144 <_svfprintf_r+0x15b4>
 80035f6:	f109 0908 	add.w	r9, r9, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f2c0 861e 	blt.w	800423c <_svfprintf_r+0x16ac>
 8003600:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003602:	3201      	adds	r2, #1
 8003604:	441c      	add	r4, r3
 8003606:	2a07      	cmp	r2, #7
 8003608:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 800360c:	e9c9 6300 	strd	r6, r3, [r9]
 8003610:	f77f ad62 	ble.w	80030d8 <_svfprintf_r+0x548>
 8003614:	aa2c      	add	r2, sp, #176	; 0xb0
 8003616:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003618:	9807      	ldr	r0, [sp, #28]
 800361a:	f003 f991 	bl	8006940 <__ssprint_r>
 800361e:	2800      	cmp	r0, #0
 8003620:	f47f ab8a 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003624:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8003626:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 800362a:	e557      	b.n	80030dc <_svfprintf_r+0x54c>
 800362c:	1c62      	adds	r2, r4, #1
 800362e:	920c      	str	r2, [sp, #48]	; 0x30
 8003630:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003632:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8003634:	2a01      	cmp	r2, #1
 8003636:	f103 0501 	add.w	r5, r3, #1
 800363a:	f109 0708 	add.w	r7, r9, #8
 800363e:	f340 810c 	ble.w	800385a <_svfprintf_r+0xcca>
 8003642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003644:	f8c9 6000 	str.w	r6, [r9]
 8003648:	2301      	movs	r3, #1
 800364a:	2d07      	cmp	r5, #7
 800364c:	e9cd 522d 	strd	r5, r2, [sp, #180]	; 0xb4
 8003650:	f8c9 3004 	str.w	r3, [r9, #4]
 8003654:	f300 8322 	bgt.w	8003c9c <_svfprintf_r+0x110c>
 8003658:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800365a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800365c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800365e:	3501      	adds	r5, #1
 8003660:	4419      	add	r1, r3
 8003662:	2d07      	cmp	r5, #7
 8003664:	910c      	str	r1, [sp, #48]	; 0x30
 8003666:	e9cd 512d 	strd	r5, r1, [sp, #180]	; 0xb4
 800366a:	e9c7 2300 	strd	r2, r3, [r7]
 800366e:	f300 8322 	bgt.w	8003cb6 <_svfprintf_r+0x1126>
 8003672:	3708      	adds	r7, #8
 8003674:	1c6c      	adds	r4, r5, #1
 8003676:	9411      	str	r4, [sp, #68]	; 0x44
 8003678:	940e      	str	r4, [sp, #56]	; 0x38
 800367a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800367c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800367e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003680:	e9dd 0218 	ldrd	r0, r2, [sp, #96]	; 0x60
 8003684:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8003688:	f107 0908 	add.w	r9, r7, #8
 800368c:	f005 f88a 	bl	80087a4 <__aeabi_dcmpeq>
 8003690:	2800      	cmp	r0, #0
 8003692:	f040 80a5 	bne.w	80037e0 <_svfprintf_r+0xc50>
 8003696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003698:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800369a:	f8c7 a004 	str.w	sl, [r7, #4]
 800369e:	4453      	add	r3, sl
 80036a0:	3601      	adds	r6, #1
 80036a2:	2c07      	cmp	r4, #7
 80036a4:	930c      	str	r3, [sp, #48]	; 0x30
 80036a6:	603e      	str	r6, [r7, #0]
 80036a8:	932e      	str	r3, [sp, #184]	; 0xb8
 80036aa:	942d      	str	r4, [sp, #180]	; 0xb4
 80036ac:	f300 81f2 	bgt.w	8003a94 <_svfprintf_r+0xf04>
 80036b0:	f107 0310 	add.w	r3, r7, #16
 80036b4:	1caa      	adds	r2, r5, #2
 80036b6:	464f      	mov	r7, r9
 80036b8:	920e      	str	r2, [sp, #56]	; 0x38
 80036ba:	4699      	mov	r9, r3
 80036bc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80036be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	4411      	add	r1, r2
 80036c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036c6:	912e      	str	r1, [sp, #184]	; 0xb8
 80036c8:	ab28      	add	r3, sp, #160	; 0xa0
 80036ca:	2a07      	cmp	r2, #7
 80036cc:	460c      	mov	r4, r1
 80036ce:	922d      	str	r2, [sp, #180]	; 0xb4
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	f77f ad03 	ble.w	80030dc <_svfprintf_r+0x54c>
 80036d6:	e79d      	b.n	8003614 <_svfprintf_r+0xa84>
 80036d8:	2a01      	cmp	r2, #1
 80036da:	4698      	mov	r8, r3
 80036dc:	f47f abb9 	bne.w	8002e52 <_svfprintf_r+0x2c2>
 80036e0:	2d00      	cmp	r5, #0
 80036e2:	bf08      	it	eq
 80036e4:	2c0a      	cmpeq	r4, #10
 80036e6:	f080 8296 	bcs.w	8003c16 <_svfprintf_r+0x1086>
 80036ea:	ae58      	add	r6, sp, #352	; 0x160
 80036ec:	3430      	adds	r4, #48	; 0x30
 80036ee:	2301      	movs	r3, #1
 80036f0:	f806 4d01 	strb.w	r4, [r6, #-1]!
 80036f4:	930c      	str	r3, [sp, #48]	; 0x30
 80036f6:	f7ff bb61 	b.w	8002dbc <_svfprintf_r+0x22c>
 80036fa:	aa2c      	add	r2, sp, #176	; 0xb0
 80036fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80036fe:	9807      	ldr	r0, [sp, #28]
 8003700:	f003 f91e 	bl	8006940 <__ssprint_r>
 8003704:	2800      	cmp	r0, #0
 8003706:	f47f ab17 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 800370a:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 800370c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8003710:	e482      	b.n	8003018 <_svfprintf_r+0x488>
 8003712:	aa2c      	add	r2, sp, #176	; 0xb0
 8003714:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003716:	9807      	ldr	r0, [sp, #28]
 8003718:	f003 f912 	bl	8006940 <__ssprint_r>
 800371c:	2800      	cmp	r0, #0
 800371e:	f47f ab0b 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003722:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8003724:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8003728:	e486      	b.n	8003038 <_svfprintf_r+0x4a8>
 800372a:	aa2c      	add	r2, sp, #176	; 0xb0
 800372c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800372e:	9807      	ldr	r0, [sp, #28]
 8003730:	f003 f906 	bl	8006940 <__ssprint_r>
 8003734:	2800      	cmp	r0, #0
 8003736:	f47f aaff 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 800373a:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 800373c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8003740:	e4b9      	b.n	80030b6 <_svfprintf_r+0x526>
 8003742:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003744:	2b00      	cmp	r3, #0
 8003746:	f340 817b 	ble.w	8003a40 <_svfprintf_r+0xeb0>
 800374a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800374e:	4293      	cmp	r3, r2
 8003750:	bfa8      	it	ge
 8003752:	4613      	movge	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	461d      	mov	r5, r3
 8003758:	dd0d      	ble.n	8003776 <_svfprintf_r+0xbe6>
 800375a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800375c:	f8c9 6000 	str.w	r6, [r9]
 8003760:	3301      	adds	r3, #1
 8003762:	442c      	add	r4, r5
 8003764:	2b07      	cmp	r3, #7
 8003766:	942e      	str	r4, [sp, #184]	; 0xb8
 8003768:	f8c9 5004 	str.w	r5, [r9, #4]
 800376c:	932d      	str	r3, [sp, #180]	; 0xb4
 800376e:	f300 84c1 	bgt.w	80040f4 <_svfprintf_r+0x1564>
 8003772:	f109 0908 	add.w	r9, r9, #8
 8003776:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003778:	2d00      	cmp	r5, #0
 800377a:	bfa8      	it	ge
 800377c:	1b5b      	subge	r3, r3, r5
 800377e:	2b00      	cmp	r3, #0
 8003780:	461d      	mov	r5, r3
 8003782:	f340 81dc 	ble.w	8003b3e <_svfprintf_r+0xfae>
 8003786:	2d10      	cmp	r5, #16
 8003788:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800378a:	4bc0      	ldr	r3, [pc, #768]	; (8003a8c <_svfprintf_r+0xefc>)
 800378c:	f340 81c3 	ble.w	8003b16 <_svfprintf_r+0xf86>
 8003790:	4618      	mov	r0, r3
 8003792:	4621      	mov	r1, r4
 8003794:	464b      	mov	r3, r9
 8003796:	2710      	movs	r7, #16
 8003798:	46b1      	mov	r9, r6
 800379a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800379e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80037a0:	4606      	mov	r6, r0
 80037a2:	e004      	b.n	80037ae <_svfprintf_r+0xc1e>
 80037a4:	3308      	adds	r3, #8
 80037a6:	3d10      	subs	r5, #16
 80037a8:	2d10      	cmp	r5, #16
 80037aa:	f340 81af 	ble.w	8003b0c <_svfprintf_r+0xf7c>
 80037ae:	3201      	adds	r2, #1
 80037b0:	3110      	adds	r1, #16
 80037b2:	2a07      	cmp	r2, #7
 80037b4:	e9cd 212d 	strd	r2, r1, [sp, #180]	; 0xb4
 80037b8:	e9c3 6700 	strd	r6, r7, [r3]
 80037bc:	ddf2      	ble.n	80037a4 <_svfprintf_r+0xc14>
 80037be:	aa2c      	add	r2, sp, #176	; 0xb0
 80037c0:	4621      	mov	r1, r4
 80037c2:	4650      	mov	r0, sl
 80037c4:	f003 f8bc 	bl	8006940 <__ssprint_r>
 80037c8:	2800      	cmp	r0, #0
 80037ca:	f47f aab5 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 80037ce:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
 80037d2:	ab2f      	add	r3, sp, #188	; 0xbc
 80037d4:	e7e7      	b.n	80037a6 <_svfprintf_r+0xc16>
 80037d6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80037da:	ae58      	add	r6, sp, #352	; 0x160
 80037dc:	f7ff baee 	b.w	8002dbc <_svfprintf_r+0x22c>
 80037e0:	f1ba 0f00 	cmp.w	sl, #0
 80037e4:	f77f af6a 	ble.w	80036bc <_svfprintf_r+0xb2c>
 80037e8:	f1ba 0f10 	cmp.w	sl, #16
 80037ec:	4ba7      	ldr	r3, [pc, #668]	; (8003a8c <_svfprintf_r+0xefc>)
 80037ee:	f340 8659 	ble.w	80044a4 <_svfprintf_r+0x1914>
 80037f2:	4619      	mov	r1, r3
 80037f4:	2610      	movs	r6, #16
 80037f6:	463b      	mov	r3, r7
 80037f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037fa:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80037fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003800:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8003802:	460f      	mov	r7, r1
 8003804:	e007      	b.n	8003816 <_svfprintf_r+0xc86>
 8003806:	3308      	adds	r3, #8
 8003808:	f1aa 0a10 	sub.w	sl, sl, #16
 800380c:	f1ba 0f10 	cmp.w	sl, #16
 8003810:	f340 8296 	ble.w	8003d40 <_svfprintf_r+0x11b0>
 8003814:	3501      	adds	r5, #1
 8003816:	3210      	adds	r2, #16
 8003818:	2d07      	cmp	r5, #7
 800381a:	e9cd 522d 	strd	r5, r2, [sp, #180]	; 0xb4
 800381e:	e9c3 7600 	strd	r7, r6, [r3]
 8003822:	ddf0      	ble.n	8003806 <_svfprintf_r+0xc76>
 8003824:	aa2c      	add	r2, sp, #176	; 0xb0
 8003826:	4621      	mov	r1, r4
 8003828:	4648      	mov	r0, r9
 800382a:	f003 f889 	bl	8006940 <__ssprint_r>
 800382e:	2800      	cmp	r0, #0
 8003830:	f47f aa82 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003834:	e9dd 522d 	ldrd	r5, r2, [sp, #180]	; 0xb4
 8003838:	ab2f      	add	r3, sp, #188	; 0xbc
 800383a:	e7e5      	b.n	8003808 <_svfprintf_r+0xc78>
 800383c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800383e:	f018 0f10 	tst.w	r8, #16
 8003842:	f102 0304 	add.w	r3, r2, #4
 8003846:	d141      	bne.n	80038cc <_svfprintf_r+0xd3c>
 8003848:	f018 0f40 	tst.w	r8, #64	; 0x40
 800384c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800384e:	d039      	beq.n	80038c4 <_svfprintf_r+0xd34>
 8003850:	8814      	ldrh	r4, [r2, #0]
 8003852:	930d      	str	r3, [sp, #52]	; 0x34
 8003854:	2500      	movs	r5, #0
 8003856:	f7ff ba91 	b.w	8002d7c <_svfprintf_r+0x1ec>
 800385a:	f018 0f01 	tst.w	r8, #1
 800385e:	f47f aef0 	bne.w	8003642 <_svfprintf_r+0xab2>
 8003862:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003864:	f8c9 6000 	str.w	r6, [r9]
 8003868:	2201      	movs	r2, #1
 800386a:	2d07      	cmp	r5, #7
 800386c:	e9cd 512d 	strd	r5, r1, [sp, #180]	; 0xb4
 8003870:	f8c9 2004 	str.w	r2, [r9, #4]
 8003874:	f300 810e 	bgt.w	8003a94 <_svfprintf_r+0xf04>
 8003878:	3302      	adds	r3, #2
 800387a:	930e      	str	r3, [sp, #56]	; 0x38
 800387c:	f109 0910 	add.w	r9, r9, #16
 8003880:	e71c      	b.n	80036bc <_svfprintf_r+0xb2c>
 8003882:	f018 0f01 	tst.w	r8, #1
 8003886:	f47f ae08 	bne.w	800349a <_svfprintf_r+0x90a>
 800388a:	e427      	b.n	80030dc <_svfprintf_r+0x54c>
 800388c:	aa2c      	add	r2, sp, #176	; 0xb0
 800388e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003890:	9807      	ldr	r0, [sp, #28]
 8003892:	f003 f855 	bl	8006940 <__ssprint_r>
 8003896:	2800      	cmp	r0, #0
 8003898:	f47f aa4e 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 800389c:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 800389e:	e454      	b.n	800314a <_svfprintf_r+0x5ba>
 80038a0:	f418 7f00 	tst.w	r8, #512	; 0x200
 80038a4:	f040 8315 	bne.w	8003ed2 <_svfprintf_r+0x1342>
 80038a8:	6814      	ldr	r4, [r2, #0]
 80038aa:	930d      	str	r3, [sp, #52]	; 0x34
 80038ac:	2500      	movs	r5, #0
 80038ae:	f7ff bb14 	b.w	8002eda <_svfprintf_r+0x34a>
 80038b2:	0598      	lsls	r0, r3, #22
 80038b4:	f100 8317 	bmi.w	8003ee6 <_svfprintf_r+0x1356>
 80038b8:	6814      	ldr	r4, [r2, #0]
 80038ba:	910d      	str	r1, [sp, #52]	; 0x34
 80038bc:	2201      	movs	r2, #1
 80038be:	2500      	movs	r5, #0
 80038c0:	f7ff ba5f 	b.w	8002d82 <_svfprintf_r+0x1f2>
 80038c4:	f418 7f00 	tst.w	r8, #512	; 0x200
 80038c8:	f040 831b 	bne.w	8003f02 <_svfprintf_r+0x1372>
 80038cc:	6814      	ldr	r4, [r2, #0]
 80038ce:	930d      	str	r3, [sp, #52]	; 0x34
 80038d0:	2500      	movs	r5, #0
 80038d2:	f7ff ba53 	b.w	8002d7c <_svfprintf_r+0x1ec>
 80038d6:	0598      	lsls	r0, r3, #22
 80038d8:	f100 830b 	bmi.w	8003ef2 <_svfprintf_r+0x1362>
 80038dc:	680c      	ldr	r4, [r1, #0]
 80038de:	920d      	str	r2, [sp, #52]	; 0x34
 80038e0:	17e5      	asrs	r5, r4, #31
 80038e2:	4620      	mov	r0, r4
 80038e4:	4629      	mov	r1, r5
 80038e6:	f7ff ba9a 	b.w	8002e1e <_svfprintf_r+0x28e>
 80038ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038ec:	4610      	mov	r0, r2
 80038ee:	17d1      	asrs	r1, r2, #31
 80038f0:	e9c3 0100 	strd	r0, r1, [r3]
 80038f4:	465e      	mov	r6, fp
 80038f6:	e43e      	b.n	8003176 <_svfprintf_r+0x5e6>
 80038f8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80038fa:	4622      	mov	r2, r4
 80038fc:	4620      	mov	r0, r4
 80038fe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8003900:	4623      	mov	r3, r4
 8003902:	4621      	mov	r1, r4
 8003904:	f004 ff80 	bl	8008808 <__aeabi_dcmpun>
 8003908:	2800      	cmp	r0, #0
 800390a:	f040 85a1 	bne.w	8004450 <_svfprintf_r+0x18c0>
 800390e:	2f61      	cmp	r7, #97	; 0x61
 8003910:	f000 8406 	beq.w	8004120 <_svfprintf_r+0x1590>
 8003914:	2f41      	cmp	r7, #65	; 0x41
 8003916:	f000 82ff 	beq.w	8003f18 <_svfprintf_r+0x1388>
 800391a:	f027 0320 	bic.w	r3, r7, #32
 800391e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
 8003922:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8003926:	9308      	str	r3, [sp, #32]
 8003928:	9212      	str	r2, [sp, #72]	; 0x48
 800392a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800392c:	f000 8520 	beq.w	8004370 <_svfprintf_r+0x17e0>
 8003930:	2b47      	cmp	r3, #71	; 0x47
 8003932:	f000 8517 	beq.w	8004364 <_svfprintf_r+0x17d4>
 8003936:	2d00      	cmp	r5, #0
 8003938:	f2c0 83e9 	blt.w	800410e <_svfprintf_r+0x157e>
 800393c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8003940:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003942:	930c      	str	r3, [sp, #48]	; 0x30
 8003944:	2f66      	cmp	r7, #102	; 0x66
 8003946:	f000 84dc 	beq.w	8004302 <_svfprintf_r+0x1772>
 800394a:	2f46      	cmp	r7, #70	; 0x46
 800394c:	f000 8567 	beq.w	800441e <_svfprintf_r+0x188e>
 8003950:	9b08      	ldr	r3, [sp, #32]
 8003952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003954:	2b45      	cmp	r3, #69	; 0x45
 8003956:	bf06      	itte	eq
 8003958:	f10a 0301 	addeq.w	r3, sl, #1
 800395c:	930e      	streq	r3, [sp, #56]	; 0x38
 800395e:	f8cd a038 	strne.w	sl, [sp, #56]	; 0x38
 8003962:	a82a      	add	r0, sp, #168	; 0xa8
 8003964:	a927      	add	r1, sp, #156	; 0x9c
 8003966:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003968:	9004      	str	r0, [sp, #16]
 800396a:	9103      	str	r1, [sp, #12]
 800396c:	a826      	add	r0, sp, #152	; 0x98
 800396e:	2102      	movs	r1, #2
 8003970:	9002      	str	r0, [sp, #8]
 8003972:	462b      	mov	r3, r5
 8003974:	9401      	str	r4, [sp, #4]
 8003976:	9100      	str	r1, [sp, #0]
 8003978:	9807      	ldr	r0, [sp, #28]
 800397a:	f000 fe85 	bl	8004688 <_dtoa_r>
 800397e:	2f67      	cmp	r7, #103	; 0x67
 8003980:	4606      	mov	r6, r0
 8003982:	f040 859a 	bne.w	80044ba <_svfprintf_r+0x192a>
 8003986:	f018 0f01 	tst.w	r8, #1
 800398a:	f040 84f5 	bne.w	8004378 <_svfprintf_r+0x17e8>
 800398e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003990:	4640      	mov	r0, r8
 8003992:	1b9b      	subs	r3, r3, r6
 8003994:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8003998:	9314      	str	r3, [sp, #80]	; 0x50
 800399a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800399c:	9315      	str	r3, [sp, #84]	; 0x54
 800399e:	9b08      	ldr	r3, [sp, #32]
 80039a0:	2b47      	cmp	r3, #71	; 0x47
 80039a2:	f000 836e 	beq.w	8004082 <_svfprintf_r+0x14f2>
 80039a6:	9b08      	ldr	r3, [sp, #32]
 80039a8:	2b46      	cmp	r3, #70	; 0x46
 80039aa:	f000 8403 	beq.w	80041b4 <_svfprintf_r+0x1624>
 80039ae:	9908      	ldr	r1, [sp, #32]
 80039b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80039b2:	b2fa      	uxtb	r2, r7
 80039b4:	2941      	cmp	r1, #65	; 0x41
 80039b6:	bf08      	it	eq
 80039b8:	320f      	addeq	r2, #15
 80039ba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80039be:	bf06      	itte	eq
 80039c0:	b2d2      	uxtbeq	r2, r2
 80039c2:	2101      	moveq	r1, #1
 80039c4:	2100      	movne	r1, #0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	9326      	str	r3, [sp, #152]	; 0x98
 80039ca:	bfb8      	it	lt
 80039cc:	9b15      	ldrlt	r3, [sp, #84]	; 0x54
 80039ce:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 80039d2:	bfba      	itte	lt
 80039d4:	f1c3 0301 	rsblt	r3, r3, #1
 80039d8:	222d      	movlt	r2, #45	; 0x2d
 80039da:	222b      	movge	r2, #43	; 0x2b
 80039dc:	2b09      	cmp	r3, #9
 80039de:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
 80039e2:	f300 84e5 	bgt.w	80043b0 <_svfprintf_r+0x1820>
 80039e6:	2900      	cmp	r1, #0
 80039e8:	f040 856f 	bne.w	80044ca <_svfprintf_r+0x193a>
 80039ec:	2230      	movs	r2, #48	; 0x30
 80039ee:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
 80039f2:	f10d 02a3 	add.w	r2, sp, #163	; 0xa3
 80039f6:	3330      	adds	r3, #48	; 0x30
 80039f8:	7013      	strb	r3, [r2, #0]
 80039fa:	1c53      	adds	r3, r2, #1
 80039fc:	aa28      	add	r2, sp, #160	; 0xa0
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003a02:	931f      	str	r3, [sp, #124]	; 0x7c
 8003a04:	2a01      	cmp	r2, #1
 8003a06:	4413      	add	r3, r2
 8003a08:	930c      	str	r3, [sp, #48]	; 0x30
 8003a0a:	f340 852d 	ble.w	8004468 <_svfprintf_r+0x18d8>
 8003a0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003a12:	4413      	add	r3, r2
 8003a14:	930c      	str	r3, [sp, #48]	; 0x30
 8003a16:	2300      	movs	r3, #0
 8003a18:	9313      	str	r3, [sp, #76]	; 0x4c
 8003a1a:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8003a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a20:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8003a24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003a28:	f440 7880 	orr.w	r8, r0, #256	; 0x100
 8003a2c:	9308      	str	r3, [sp, #32]
 8003a2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f040 8339 	bne.w	80040a8 <_svfprintf_r+0x1518>
 8003a36:	469a      	mov	sl, r3
 8003a38:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 8003a3c:	f7ff b9ca 	b.w	8002dd4 <_svfprintf_r+0x244>
 8003a40:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8003a42:	4913      	ldr	r1, [pc, #76]	; (8003a90 <_svfprintf_r+0xf00>)
 8003a44:	f8c9 1000 	str.w	r1, [r9]
 8003a48:	3201      	adds	r2, #1
 8003a4a:	3401      	adds	r4, #1
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	2a07      	cmp	r2, #7
 8003a50:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 8003a54:	f8c9 1004 	str.w	r1, [r9, #4]
 8003a58:	f73f adae 	bgt.w	80035b8 <_svfprintf_r+0xa28>
 8003a5c:	f109 0908 	add.w	r9, r9, #8
 8003a60:	e5b6      	b.n	80035d0 <_svfprintf_r+0xa40>
 8003a62:	2140      	movs	r1, #64	; 0x40
 8003a64:	9807      	ldr	r0, [sp, #28]
 8003a66:	f001 fe6b 	bl	8005740 <_malloc_r>
 8003a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a6c:	6018      	str	r0, [r3, #0]
 8003a6e:	6118      	str	r0, [r3, #16]
 8003a70:	2800      	cmp	r0, #0
 8003a72:	f000 8565 	beq.w	8004540 <_svfprintf_r+0x19b0>
 8003a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a78:	2340      	movs	r3, #64	; 0x40
 8003a7a:	6153      	str	r3, [r2, #20]
 8003a7c:	f7ff b89f 	b.w	8002bbe <_svfprintf_r+0x2e>
 8003a80:	4252      	negs	r2, r2
 8003a82:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a84:	930d      	str	r3, [sp, #52]	; 0x34
 8003a86:	f7ff ba55 	b.w	8002f34 <_svfprintf_r+0x3a4>
 8003a8a:	bf00      	nop
 8003a8c:	08008c14 	.word	0x08008c14
 8003a90:	08008c00 	.word	0x08008c00
 8003a94:	aa2c      	add	r2, sp, #176	; 0xb0
 8003a96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003a98:	9807      	ldr	r0, [sp, #28]
 8003a9a:	f002 ff51 	bl	8006940 <__ssprint_r>
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	f47f a94a 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003aa4:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	920c      	str	r2, [sp, #48]	; 0x30
 8003aac:	930e      	str	r3, [sp, #56]	; 0x38
 8003aae:	f10d 09c4 	add.w	r9, sp, #196	; 0xc4
 8003ab2:	af2f      	add	r7, sp, #188	; 0xbc
 8003ab4:	e602      	b.n	80036bc <_svfprintf_r+0xb2c>
 8003ab6:	aa2c      	add	r2, sp, #176	; 0xb0
 8003ab8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003aba:	9807      	ldr	r0, [sp, #28]
 8003abc:	f002 ff40 	bl	8006940 <__ssprint_r>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	f47f a939 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003ac6:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8003ac8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8003acc:	e4f5      	b.n	80034ba <_svfprintf_r+0x92a>
 8003ace:	4653      	mov	r3, sl
 8003ad0:	2b06      	cmp	r3, #6
 8003ad2:	bf28      	it	cs
 8003ad4:	2306      	movcs	r3, #6
 8003ad6:	46b2      	mov	sl, r6
 8003ad8:	9613      	str	r6, [sp, #76]	; 0x4c
 8003ada:	e9cd 6615 	strd	r6, r6, [sp, #84]	; 0x54
 8003ade:	9610      	str	r6, [sp, #64]	; 0x40
 8003ae0:	4632      	mov	r2, r6
 8003ae2:	9308      	str	r3, [sp, #32]
 8003ae4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003ae8:	4ea4      	ldr	r6, [pc, #656]	; (8003d7c <_svfprintf_r+0x11ec>)
 8003aea:	f7ff b973 	b.w	8002dd4 <_svfprintf_r+0x244>
 8003aee:	aa2c      	add	r2, sp, #176	; 0xb0
 8003af0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003af2:	9807      	ldr	r0, [sp, #28]
 8003af4:	f002 ff24 	bl	8006940 <__ssprint_r>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	f47f a91d 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003afe:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 8003b02:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8003b04:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8003b08:	f7ff ba76 	b.w	8002ff8 <_svfprintf_r+0x468>
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	4631      	mov	r1, r6
 8003b10:	464e      	mov	r6, r9
 8003b12:	4699      	mov	r9, r3
 8003b14:	460b      	mov	r3, r1
 8003b16:	3201      	adds	r2, #1
 8003b18:	442c      	add	r4, r5
 8003b1a:	2a07      	cmp	r2, #7
 8003b1c:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 8003b20:	e9c9 3500 	strd	r3, r5, [r9]
 8003b24:	f340 81d2 	ble.w	8003ecc <_svfprintf_r+0x133c>
 8003b28:	aa2c      	add	r2, sp, #176	; 0xb0
 8003b2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003b2c:	9807      	ldr	r0, [sp, #28]
 8003b2e:	f002 ff07 	bl	8006940 <__ssprint_r>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	f47f a900 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003b38:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8003b3a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8003b3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003b40:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8003b44:	4433      	add	r3, r6
 8003b46:	469a      	mov	sl, r3
 8003b48:	f040 811c 	bne.w	8003d84 <_svfprintf_r+0x11f4>
 8003b4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003b4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003b50:	4293      	cmp	r3, r2
 8003b52:	db49      	blt.n	8003be8 <_svfprintf_r+0x1058>
 8003b54:	f018 0f01 	tst.w	r8, #1
 8003b58:	d146      	bne.n	8003be8 <_svfprintf_r+0x1058>
 8003b5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003b5c:	18b5      	adds	r5, r6, r2
 8003b5e:	eba5 050a 	sub.w	r5, r5, sl
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	429d      	cmp	r5, r3
 8003b66:	bfa8      	it	ge
 8003b68:	461d      	movge	r5, r3
 8003b6a:	2d00      	cmp	r5, #0
 8003b6c:	dd0d      	ble.n	8003b8a <_svfprintf_r+0xffa>
 8003b6e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8003b70:	f8c9 a000 	str.w	sl, [r9]
 8003b74:	3201      	adds	r2, #1
 8003b76:	442c      	add	r4, r5
 8003b78:	2a07      	cmp	r2, #7
 8003b7a:	942e      	str	r4, [sp, #184]	; 0xb8
 8003b7c:	f8c9 5004 	str.w	r5, [r9, #4]
 8003b80:	922d      	str	r2, [sp, #180]	; 0xb4
 8003b82:	f300 8336 	bgt.w	80041f2 <_svfprintf_r+0x1662>
 8003b86:	f109 0908 	add.w	r9, r9, #8
 8003b8a:	2d00      	cmp	r5, #0
 8003b8c:	bfac      	ite	ge
 8003b8e:	1b5d      	subge	r5, r3, r5
 8003b90:	461d      	movlt	r5, r3
 8003b92:	2d00      	cmp	r5, #0
 8003b94:	f77f aaa2 	ble.w	80030dc <_svfprintf_r+0x54c>
 8003b98:	2d10      	cmp	r5, #16
 8003b9a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8003b9c:	4b78      	ldr	r3, [pc, #480]	; (8003d80 <_svfprintf_r+0x11f0>)
 8003b9e:	f340 80ac 	ble.w	8003cfa <_svfprintf_r+0x116a>
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	2610      	movs	r6, #16
 8003ba6:	4623      	mov	r3, r4
 8003ba8:	9f07      	ldr	r7, [sp, #28]
 8003baa:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003bae:	460c      	mov	r4, r1
 8003bb0:	e005      	b.n	8003bbe <_svfprintf_r+0x102e>
 8003bb2:	f109 0908 	add.w	r9, r9, #8
 8003bb6:	3d10      	subs	r5, #16
 8003bb8:	2d10      	cmp	r5, #16
 8003bba:	f340 809b 	ble.w	8003cf4 <_svfprintf_r+0x1164>
 8003bbe:	3201      	adds	r2, #1
 8003bc0:	3310      	adds	r3, #16
 8003bc2:	2a07      	cmp	r2, #7
 8003bc4:	e9cd 232d 	strd	r2, r3, [sp, #180]	; 0xb4
 8003bc8:	e9c9 4600 	strd	r4, r6, [r9]
 8003bcc:	ddf1      	ble.n	8003bb2 <_svfprintf_r+0x1022>
 8003bce:	aa2c      	add	r2, sp, #176	; 0xb0
 8003bd0:	4651      	mov	r1, sl
 8003bd2:	4638      	mov	r0, r7
 8003bd4:	f002 feb4 	bl	8006940 <__ssprint_r>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	f47f a8ad 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003bde:	e9dd 232d 	ldrd	r2, r3, [sp, #180]	; 0xb4
 8003be2:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8003be6:	e7e6      	b.n	8003bb6 <_svfprintf_r+0x1026>
 8003be8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8003bea:	991d      	ldr	r1, [sp, #116]	; 0x74
 8003bec:	f8c9 1000 	str.w	r1, [r9]
 8003bf0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003bf2:	f8c9 1004 	str.w	r1, [r9, #4]
 8003bf6:	3201      	adds	r2, #1
 8003bf8:	440c      	add	r4, r1
 8003bfa:	2a07      	cmp	r2, #7
 8003bfc:	942e      	str	r4, [sp, #184]	; 0xb8
 8003bfe:	922d      	str	r2, [sp, #180]	; 0xb4
 8003c00:	f300 82af 	bgt.w	8004162 <_svfprintf_r+0x15d2>
 8003c04:	f109 0908 	add.w	r9, r9, #8
 8003c08:	e7a7      	b.n	8003b5a <_svfprintf_r+0xfca>
 8003c0a:	2d00      	cmp	r5, #0
 8003c0c:	bf08      	it	eq
 8003c0e:	2c0a      	cmpeq	r4, #10
 8003c10:	4698      	mov	r8, r3
 8003c12:	f4ff ad6a 	bcc.w	80036ea <_svfprintf_r+0xb5a>
 8003c16:	f408 6380 	and.w	r3, r8, #1024	; 0x400
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8003c20:	9710      	str	r7, [sp, #64]	; 0x40
 8003c22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003c26:	ae58      	add	r6, sp, #352	; 0x160
 8003c28:	4691      	mov	r9, r2
 8003c2a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003c2e:	461f      	mov	r7, r3
 8003c30:	e00a      	b.n	8003c48 <_svfprintf_r+0x10b8>
 8003c32:	2300      	movs	r3, #0
 8003c34:	4620      	mov	r0, r4
 8003c36:	4629      	mov	r1, r5
 8003c38:	220a      	movs	r2, #10
 8003c3a:	f004 fe23 	bl	8008884 <__aeabi_uldivmod>
 8003c3e:	4604      	mov	r4, r0
 8003c40:	460d      	mov	r5, r1
 8003c42:	ea54 0305 	orrs.w	r3, r4, r5
 8003c46:	d047      	beq.n	8003cd8 <_svfprintf_r+0x1148>
 8003c48:	220a      	movs	r2, #10
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	4629      	mov	r1, r5
 8003c50:	f004 fe18 	bl	8008884 <__aeabi_uldivmod>
 8003c54:	3230      	adds	r2, #48	; 0x30
 8003c56:	f806 2c01 	strb.w	r2, [r6, #-1]
 8003c5a:	f109 0901 	add.w	r9, r9, #1
 8003c5e:	3e01      	subs	r6, #1
 8003c60:	2f00      	cmp	r7, #0
 8003c62:	d0e6      	beq.n	8003c32 <_svfprintf_r+0x10a2>
 8003c64:	f898 3000 	ldrb.w	r3, [r8]
 8003c68:	4599      	cmp	r9, r3
 8003c6a:	d1e2      	bne.n	8003c32 <_svfprintf_r+0x10a2>
 8003c6c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8003c70:	d0df      	beq.n	8003c32 <_svfprintf_r+0x10a2>
 8003c72:	2d00      	cmp	r5, #0
 8003c74:	bf08      	it	eq
 8003c76:	2c0a      	cmpeq	r4, #10
 8003c78:	d3db      	bcc.n	8003c32 <_svfprintf_r+0x10a2>
 8003c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c7c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003c7e:	1af6      	subs	r6, r6, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	4630      	mov	r0, r6
 8003c84:	f002 fe2a 	bl	80068dc <strncpy>
 8003c88:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8387 	beq.w	80043a0 <_svfprintf_r+0x1810>
 8003c92:	f108 0801 	add.w	r8, r8, #1
 8003c96:	f04f 0900 	mov.w	r9, #0
 8003c9a:	e7ca      	b.n	8003c32 <_svfprintf_r+0x10a2>
 8003c9c:	aa2c      	add	r2, sp, #176	; 0xb0
 8003c9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003ca0:	9807      	ldr	r0, [sp, #28]
 8003ca2:	f002 fe4d 	bl	8006940 <__ssprint_r>
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	f47f a846 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003cac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8003cae:	930c      	str	r3, [sp, #48]	; 0x30
 8003cb0:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003cb2:	af2f      	add	r7, sp, #188	; 0xbc
 8003cb4:	e4d0      	b.n	8003658 <_svfprintf_r+0xac8>
 8003cb6:	aa2c      	add	r2, sp, #176	; 0xb0
 8003cb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003cba:	9807      	ldr	r0, [sp, #28]
 8003cbc:	f002 fe40 	bl	8006940 <__ssprint_r>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	f47f a839 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003cc6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8003cc8:	930c      	str	r3, [sp, #48]	; 0x30
 8003cca:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8003ccc:	af2f      	add	r7, sp, #188	; 0xbc
 8003cce:	e4d1      	b.n	8003674 <_svfprintf_r+0xae4>
 8003cd0:	2a01      	cmp	r2, #1
 8003cd2:	f47f a8be 	bne.w	8002e52 <_svfprintf_r+0x2c2>
 8003cd6:	e508      	b.n	80036ea <_svfprintf_r+0xb5a>
 8003cd8:	9b08      	ldr	r3, [sp, #32]
 8003cda:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8003cde:	1b9b      	subs	r3, r3, r6
 8003ce0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8003ce4:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
 8003ce8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003cea:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8003cee:	930c      	str	r3, [sp, #48]	; 0x30
 8003cf0:	f7ff b864 	b.w	8002dbc <_svfprintf_r+0x22c>
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	461c      	mov	r4, r3
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	3201      	adds	r2, #1
 8003cfc:	442c      	add	r4, r5
 8003cfe:	2a07      	cmp	r2, #7
 8003d00:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 8003d04:	e9c9 3500 	strd	r3, r5, [r9]
 8003d08:	f77f a9e6 	ble.w	80030d8 <_svfprintf_r+0x548>
 8003d0c:	e482      	b.n	8003614 <_svfprintf_r+0xa84>
 8003d0e:	aa2c      	add	r2, sp, #176	; 0xb0
 8003d10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d12:	9807      	ldr	r0, [sp, #28]
 8003d14:	f002 fe14 	bl	8006940 <__ssprint_r>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	f47f a80d 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003d1e:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8003d20:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8003d24:	f7ff b98c 	b.w	8003040 <_svfprintf_r+0x4b0>
 8003d28:	aa2c      	add	r2, sp, #176	; 0xb0
 8003d2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d2c:	9807      	ldr	r0, [sp, #28]
 8003d2e:	f002 fe07 	bl	8006940 <__ssprint_r>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	f47f a800 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003d38:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8003d3c:	f7ff bba7 	b.w	800348e <_svfprintf_r+0x8fe>
 8003d40:	920c      	str	r2, [sp, #48]	; 0x30
 8003d42:	463a      	mov	r2, r7
 8003d44:	461f      	mov	r7, r3
 8003d46:	4613      	mov	r3, r2
 8003d48:	1c6a      	adds	r2, r5, #1
 8003d4a:	920e      	str	r2, [sp, #56]	; 0x38
 8003d4c:	f107 0208 	add.w	r2, r7, #8
 8003d50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d52:	e9c7 3a00 	strd	r3, sl, [r7]
 8003d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d58:	932d      	str	r3, [sp, #180]	; 0xb4
 8003d5a:	4451      	add	r1, sl
 8003d5c:	2b07      	cmp	r3, #7
 8003d5e:	910c      	str	r1, [sp, #48]	; 0x30
 8003d60:	912e      	str	r1, [sp, #184]	; 0xb8
 8003d62:	f73f ae97 	bgt.w	8003a94 <_svfprintf_r+0xf04>
 8003d66:	3301      	adds	r3, #1
 8003d68:	930e      	str	r3, [sp, #56]	; 0x38
 8003d6a:	f102 0908 	add.w	r9, r2, #8
 8003d6e:	4617      	mov	r7, r2
 8003d70:	e4a4      	b.n	80036bc <_svfprintf_r+0xb2c>
 8003d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	465e      	mov	r6, fp
 8003d78:	f7ff b9fd 	b.w	8003176 <_svfprintf_r+0x5e6>
 8003d7c:	08008bf8 	.word	0x08008bf8
 8003d80:	08008c14 	.word	0x08008c14
 8003d84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003d86:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003d8a:	18f3      	adds	r3, r6, r3
 8003d8c:	930c      	str	r3, [sp, #48]	; 0x30
 8003d8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003d90:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8003d94:	464a      	mov	r2, r9
 8003d96:	9612      	str	r6, [sp, #72]	; 0x48
 8003d98:	4fbf      	ldr	r7, [pc, #764]	; (8004098 <_svfprintf_r+0x1508>)
 8003d9a:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 8003d9e:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003da2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8003da6:	4656      	mov	r6, sl
 8003da8:	4621      	mov	r1, r4
 8003daa:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d05e      	beq.n	8003e70 <_svfprintf_r+0x12e0>
 8003db2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d15f      	bne.n	8003e78 <_svfprintf_r+0x12e8>
 8003db8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003dc0:	9316      	str	r3, [sp, #88]	; 0x58
 8003dc2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8003dc4:	981e      	ldr	r0, [sp, #120]	; 0x78
 8003dc6:	6010      	str	r0, [r2, #0]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	4449      	add	r1, r9
 8003dcc:	2b07      	cmp	r3, #7
 8003dce:	912e      	str	r1, [sp, #184]	; 0xb8
 8003dd0:	f8c2 9004 	str.w	r9, [r2, #4]
 8003dd4:	932d      	str	r3, [sp, #180]	; 0xb4
 8003dd6:	dc53      	bgt.n	8003e80 <_svfprintf_r+0x12f0>
 8003dd8:	3208      	adds	r2, #8
 8003dda:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ddc:	f898 3000 	ldrb.w	r3, [r8]
 8003de0:	1b85      	subs	r5, r0, r6
 8003de2:	429d      	cmp	r5, r3
 8003de4:	bfa8      	it	ge
 8003de6:	461d      	movge	r5, r3
 8003de8:	2d00      	cmp	r5, #0
 8003dea:	dd0b      	ble.n	8003e04 <_svfprintf_r+0x1274>
 8003dec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8003dee:	6016      	str	r6, [r2, #0]
 8003df0:	3301      	adds	r3, #1
 8003df2:	4429      	add	r1, r5
 8003df4:	2b07      	cmp	r3, #7
 8003df6:	912e      	str	r1, [sp, #184]	; 0xb8
 8003df8:	6055      	str	r5, [r2, #4]
 8003dfa:	932d      	str	r3, [sp, #180]	; 0xb4
 8003dfc:	dc4b      	bgt.n	8003e96 <_svfprintf_r+0x1306>
 8003dfe:	f898 3000 	ldrb.w	r3, [r8]
 8003e02:	3208      	adds	r2, #8
 8003e04:	2d00      	cmp	r5, #0
 8003e06:	bfac      	ite	ge
 8003e08:	1b5d      	subge	r5, r3, r5
 8003e0a:	461d      	movlt	r5, r3
 8003e0c:	2d00      	cmp	r5, #0
 8003e0e:	dd2b      	ble.n	8003e68 <_svfprintf_r+0x12d8>
 8003e10:	2d10      	cmp	r5, #16
 8003e12:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8003e14:	dd1c      	ble.n	8003e50 <_svfprintf_r+0x12c0>
 8003e16:	2410      	movs	r4, #16
 8003e18:	e004      	b.n	8003e24 <_svfprintf_r+0x1294>
 8003e1a:	3d10      	subs	r5, #16
 8003e1c:	2d10      	cmp	r5, #16
 8003e1e:	f102 0208 	add.w	r2, r2, #8
 8003e22:	dd15      	ble.n	8003e50 <_svfprintf_r+0x12c0>
 8003e24:	3001      	adds	r0, #1
 8003e26:	3110      	adds	r1, #16
 8003e28:	2807      	cmp	r0, #7
 8003e2a:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
 8003e2e:	e9c2 7400 	strd	r7, r4, [r2]
 8003e32:	ddf2      	ble.n	8003e1a <_svfprintf_r+0x128a>
 8003e34:	aa2c      	add	r2, sp, #176	; 0xb0
 8003e36:	4659      	mov	r1, fp
 8003e38:	4650      	mov	r0, sl
 8003e3a:	f002 fd81 	bl	8006940 <__ssprint_r>
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	f47e af7a 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003e44:	3d10      	subs	r5, #16
 8003e46:	2d10      	cmp	r5, #16
 8003e48:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	; 0xb4
 8003e4c:	aa2f      	add	r2, sp, #188	; 0xbc
 8003e4e:	dce9      	bgt.n	8003e24 <_svfprintf_r+0x1294>
 8003e50:	3001      	adds	r0, #1
 8003e52:	4429      	add	r1, r5
 8003e54:	2807      	cmp	r0, #7
 8003e56:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
 8003e5a:	e9c2 7500 	strd	r7, r5, [r2]
 8003e5e:	f73e af63 	bgt.w	8002d28 <_svfprintf_r+0x198>
 8003e62:	f898 3000 	ldrb.w	r3, [r8]
 8003e66:	3208      	adds	r2, #8
 8003e68:	441e      	add	r6, r3
 8003e6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1a0      	bne.n	8003db2 <_svfprintf_r+0x1222>
 8003e70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80f5 	beq.w	8004062 <_svfprintf_r+0x14d2>
 8003e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8003e7e:	e7a0      	b.n	8003dc2 <_svfprintf_r+0x1232>
 8003e80:	aa2c      	add	r2, sp, #176	; 0xb0
 8003e82:	4659      	mov	r1, fp
 8003e84:	4650      	mov	r0, sl
 8003e86:	f002 fd5b 	bl	8006940 <__ssprint_r>
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	f47e af54 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003e90:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8003e92:	aa2f      	add	r2, sp, #188	; 0xbc
 8003e94:	e7a1      	b.n	8003dda <_svfprintf_r+0x124a>
 8003e96:	aa2c      	add	r2, sp, #176	; 0xb0
 8003e98:	4659      	mov	r1, fp
 8003e9a:	4650      	mov	r0, sl
 8003e9c:	f002 fd50 	bl	8006940 <__ssprint_r>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	f47e af49 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8003ea6:	f898 3000 	ldrb.w	r3, [r8]
 8003eaa:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8003eac:	aa2f      	add	r2, sp, #188	; 0xbc
 8003eae:	e7a9      	b.n	8003e04 <_svfprintf_r+0x1274>
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	f002 fca5 	bl	8006800 <strlen>
 8003eb6:	46aa      	mov	sl, r5
 8003eb8:	4603      	mov	r3, r0
 8003eba:	900c      	str	r0, [sp, #48]	; 0x30
 8003ebc:	f7ff b9a4 	b.w	8003208 <_svfprintf_r+0x678>
 8003ec0:	f898 3000 	ldrb.w	r3, [r8]
 8003ec4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8003ec6:	aa2f      	add	r2, sp, #188	; 0xbc
 8003ec8:	441e      	add	r6, r3
 8003eca:	e7ce      	b.n	8003e6a <_svfprintf_r+0x12da>
 8003ecc:	f109 0908 	add.w	r9, r9, #8
 8003ed0:	e635      	b.n	8003b3e <_svfprintf_r+0xfae>
 8003ed2:	7814      	ldrb	r4, [r2, #0]
 8003ed4:	930d      	str	r3, [sp, #52]	; 0x34
 8003ed6:	2500      	movs	r5, #0
 8003ed8:	f7fe bfff 	b.w	8002eda <_svfprintf_r+0x34a>
 8003edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ede:	801a      	strh	r2, [r3, #0]
 8003ee0:	465e      	mov	r6, fp
 8003ee2:	f7ff b948 	b.w	8003176 <_svfprintf_r+0x5e6>
 8003ee6:	7814      	ldrb	r4, [r2, #0]
 8003ee8:	910d      	str	r1, [sp, #52]	; 0x34
 8003eea:	2500      	movs	r5, #0
 8003eec:	2201      	movs	r2, #1
 8003eee:	f7fe bf48 	b.w	8002d82 <_svfprintf_r+0x1f2>
 8003ef2:	f991 4000 	ldrsb.w	r4, [r1]
 8003ef6:	920d      	str	r2, [sp, #52]	; 0x34
 8003ef8:	17e5      	asrs	r5, r4, #31
 8003efa:	4620      	mov	r0, r4
 8003efc:	4629      	mov	r1, r5
 8003efe:	f7fe bf8e 	b.w	8002e1e <_svfprintf_r+0x28e>
 8003f02:	7814      	ldrb	r4, [r2, #0]
 8003f04:	930d      	str	r3, [sp, #52]	; 0x34
 8003f06:	2500      	movs	r5, #0
 8003f08:	f7fe bf38 	b.w	8002d7c <_svfprintf_r+0x1ec>
 8003f0c:	f018 0f01 	tst.w	r8, #1
 8003f10:	f43f a8e4 	beq.w	80030dc <_svfprintf_r+0x54c>
 8003f14:	f7ff bb61 	b.w	80035da <_svfprintf_r+0xa4a>
 8003f18:	2330      	movs	r3, #48	; 0x30
 8003f1a:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
 8003f1e:	2358      	movs	r3, #88	; 0x58
 8003f20:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
 8003f24:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
 8003f28:	f048 0402 	orr.w	r4, r8, #2
 8003f2c:	f300 81ad 	bgt.w	800428a <_svfprintf_r+0x16fa>
 8003f30:	f448 7381 	orr.w	r3, r8, #258	; 0x102
 8003f34:	9312      	str	r3, [sp, #72]	; 0x48
 8003f36:	f027 0320 	bic.w	r3, r7, #32
 8003f3a:	9308      	str	r3, [sp, #32]
 8003f3c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8003f3e:	2300      	movs	r3, #0
 8003f40:	46a0      	mov	r8, r4
 8003f42:	9310      	str	r3, [sp, #64]	; 0x40
 8003f44:	ae3f      	add	r6, sp, #252	; 0xfc
 8003f46:	2d00      	cmp	r5, #0
 8003f48:	f2c0 80e2 	blt.w	8004110 <_svfprintf_r+0x1580>
 8003f4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003f4e:	930c      	str	r3, [sp, #48]	; 0x30
 8003f50:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8003f52:	2300      	movs	r3, #0
 8003f54:	9311      	str	r3, [sp, #68]	; 0x44
 8003f56:	2f61      	cmp	r7, #97	; 0x61
 8003f58:	f000 815a 	beq.w	8004210 <_svfprintf_r+0x1680>
 8003f5c:	2f41      	cmp	r7, #65	; 0x41
 8003f5e:	f47f acf1 	bne.w	8003944 <_svfprintf_r+0xdb4>
 8003f62:	aa26      	add	r2, sp, #152	; 0x98
 8003f64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f66:	4629      	mov	r1, r5
 8003f68:	f002 fbee 	bl	8006748 <frexp>
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003f72:	f004 f9af 	bl	80082d4 <__aeabi_dmul>
 8003f76:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 8003f7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003f7e:	f004 fc11 	bl	80087a4 <__aeabi_dcmpeq>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	f040 8243 	bne.w	800440e <_svfprintf_r+0x187e>
 8003f88:	4b44      	ldr	r3, [pc, #272]	; (800409c <_svfprintf_r+0x150c>)
 8003f8a:	930c      	str	r3, [sp, #48]	; 0x30
 8003f8c:	e9cd 7a15 	strd	r7, sl, [sp, #84]	; 0x54
 8003f90:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
 8003f94:	e9cd 9b13 	strd	r9, fp, [sp, #76]	; 0x4c
 8003f98:	9623      	str	r6, [sp, #140]	; 0x8c
 8003f9a:	46b1      	mov	r9, r6
 8003f9c:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 8003fa0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003fa4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8003fa8:	e003      	b.n	8003fb2 <_svfprintf_r+0x1422>
 8003faa:	f004 fbfb 	bl	80087a4 <__aeabi_dcmpeq>
 8003fae:	bb10      	cbnz	r0, 8003ff6 <_svfprintf_r+0x1466>
 8003fb0:	46a9      	mov	r9, r5
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	4b3a      	ldr	r3, [pc, #232]	; (80040a0 <_svfprintf_r+0x1510>)
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	4639      	mov	r1, r7
 8003fba:	f004 f98b 	bl	80082d4 <__aeabi_dmul>
 8003fbe:	460f      	mov	r7, r1
 8003fc0:	4606      	mov	r6, r0
 8003fc2:	f004 fc37 	bl	8008834 <__aeabi_d2iz>
 8003fc6:	4680      	mov	r8, r0
 8003fc8:	f004 f91a 	bl	8008200 <__aeabi_i2d>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	4639      	mov	r1, r7
 8003fd4:	f003 ffc6 	bl	8007f64 <__aeabi_dsub>
 8003fd8:	464d      	mov	r5, r9
 8003fda:	f81a c008 	ldrb.w	ip, [sl, r8]
 8003fde:	f805 cb01 	strb.w	ip, [r5], #1
 8003fe2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003fe6:	46a3      	mov	fp, r4
 8003fe8:	4606      	mov	r6, r0
 8003fea:	460f      	mov	r7, r1
 8003fec:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 8003ff0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003ff4:	d1d9      	bne.n	8003faa <_svfprintf_r+0x141a>
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	4639      	mov	r1, r7
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	4b29      	ldr	r3, [pc, #164]	; (80040a4 <_svfprintf_r+0x1514>)
 8003ffe:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8004000:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 8004004:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 8004008:	4644      	mov	r4, r8
 800400a:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800400e:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8004012:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004016:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8004018:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800401c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004020:	f004 fbe8 	bl	80087f4 <__aeabi_dcmpgt>
 8004024:	2800      	cmp	r0, #0
 8004026:	f040 80a9 	bne.w	800417c <_svfprintf_r+0x15ec>
 800402a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800402e:	2200      	movs	r2, #0
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <_svfprintf_r+0x1514>)
 8004032:	f004 fbb7 	bl	80087a4 <__aeabi_dcmpeq>
 8004036:	b118      	cbz	r0, 8004040 <_svfprintf_r+0x14b0>
 8004038:	4623      	mov	r3, r4
 800403a:	07db      	lsls	r3, r3, #31
 800403c:	f100 809e 	bmi.w	800417c <_svfprintf_r+0x15ec>
 8004040:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004042:	2b00      	cmp	r3, #0
 8004044:	db07      	blt.n	8004056 <_svfprintf_r+0x14c6>
 8004046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004048:	3301      	adds	r3, #1
 800404a:	442b      	add	r3, r5
 800404c:	2230      	movs	r2, #48	; 0x30
 800404e:	f805 2b01 	strb.w	r2, [r5], #1
 8004052:	42ab      	cmp	r3, r5
 8004054:	d1fb      	bne.n	800404e <_svfprintf_r+0x14be>
 8004056:	1bab      	subs	r3, r5, r6
 8004058:	4640      	mov	r0, r8
 800405a:	9314      	str	r3, [sp, #80]	; 0x50
 800405c:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8004060:	e49b      	b.n	800399a <_svfprintf_r+0xe0a>
 8004062:	46b2      	mov	sl, r6
 8004064:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004066:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8004068:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
 800406c:	18f3      	adds	r3, r6, r3
 800406e:	459a      	cmp	sl, r3
 8004070:	4691      	mov	r9, r2
 8004072:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8004076:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800407a:	460c      	mov	r4, r1
 800407c:	bf28      	it	cs
 800407e:	469a      	movcs	sl, r3
 8004080:	e564      	b.n	8003b4c <_svfprintf_r+0xfbc>
 8004082:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004084:	1cda      	adds	r2, r3, #3
 8004086:	db01      	blt.n	800408c <_svfprintf_r+0x14fc>
 8004088:	4553      	cmp	r3, sl
 800408a:	dd14      	ble.n	80040b6 <_svfprintf_r+0x1526>
 800408c:	3f02      	subs	r7, #2
 800408e:	f027 0320 	bic.w	r3, r7, #32
 8004092:	9308      	str	r3, [sp, #32]
 8004094:	e48b      	b.n	80039ae <_svfprintf_r+0xe1e>
 8004096:	bf00      	nop
 8004098:	08008c14 	.word	0x08008c14
 800409c:	08008be4 	.word	0x08008be4
 80040a0:	40300000 	.word	0x40300000
 80040a4:	3fe00000 	.word	0x3fe00000
 80040a8:	222d      	movs	r2, #45	; 0x2d
 80040aa:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
 80040ae:	f04f 0a00 	mov.w	sl, #0
 80040b2:	f7fe be92 	b.w	8002dda <_svfprintf_r+0x24a>
 80040b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80040b8:	9914      	ldr	r1, [sp, #80]	; 0x50
 80040ba:	428b      	cmp	r3, r1
 80040bc:	f2c0 808f 	blt.w	80041de <_svfprintf_r+0x164e>
 80040c0:	07c2      	lsls	r2, r0, #31
 80040c2:	f140 81a9 	bpl.w	8004418 <_svfprintf_r+0x1888>
 80040c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80040c8:	4413      	add	r3, r2
 80040ca:	930c      	str	r3, [sp, #48]	; 0x30
 80040cc:	0547      	lsls	r7, r0, #21
 80040ce:	d503      	bpl.n	80040d8 <_svfprintf_r+0x1548>
 80040d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f300 80ec 	bgt.w	80042b0 <_svfprintf_r+0x1720>
 80040d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80040de:	9308      	str	r3, [sp, #32]
 80040e0:	2767      	movs	r7, #103	; 0x67
 80040e2:	2300      	movs	r3, #0
 80040e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80040e6:	9316      	str	r3, [sp, #88]	; 0x58
 80040e8:	e4a1      	b.n	8003a2e <_svfprintf_r+0xe9e>
 80040ea:	222d      	movs	r2, #45	; 0x2d
 80040ec:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
 80040f0:	f7ff b918 	b.w	8003324 <_svfprintf_r+0x794>
 80040f4:	aa2c      	add	r2, sp, #176	; 0xb0
 80040f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040f8:	9807      	ldr	r0, [sp, #28]
 80040fa:	f002 fc21 	bl	8006940 <__ssprint_r>
 80040fe:	2800      	cmp	r0, #0
 8004100:	f47e ae1a 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8004104:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8004106:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 800410a:	f7ff bb34 	b.w	8003776 <_svfprintf_r+0xbe6>
 800410e:	9010      	str	r0, [sp, #64]	; 0x40
 8004110:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004112:	930c      	str	r3, [sp, #48]	; 0x30
 8004114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004116:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
 800411a:	232d      	movs	r3, #45	; 0x2d
 800411c:	9311      	str	r3, [sp, #68]	; 0x44
 800411e:	e71a      	b.n	8003f56 <_svfprintf_r+0x13c6>
 8004120:	2330      	movs	r3, #48	; 0x30
 8004122:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
 8004126:	2378      	movs	r3, #120	; 0x78
 8004128:	e6fa      	b.n	8003f20 <_svfprintf_r+0x1390>
 800412a:	f8cd a020 	str.w	sl, [sp, #32]
 800412e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004132:	940d      	str	r4, [sp, #52]	; 0x34
 8004134:	4682      	mov	sl, r0
 8004136:	9013      	str	r0, [sp, #76]	; 0x4c
 8004138:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
 800413c:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 8004140:	f7fe be48 	b.w	8002dd4 <_svfprintf_r+0x244>
 8004144:	aa2c      	add	r2, sp, #176	; 0xb0
 8004146:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004148:	9807      	ldr	r0, [sp, #28]
 800414a:	f002 fbf9 	bl	8006940 <__ssprint_r>
 800414e:	2800      	cmp	r0, #0
 8004150:	f47e adf2 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8004154:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004156:	e9dd 242d 	ldrd	r2, r4, [sp, #180]	; 0xb4
 800415a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 800415e:	f7ff ba4c 	b.w	80035fa <_svfprintf_r+0xa6a>
 8004162:	aa2c      	add	r2, sp, #176	; 0xb0
 8004164:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004166:	9807      	ldr	r0, [sp, #28]
 8004168:	f002 fbea 	bl	8006940 <__ssprint_r>
 800416c:	2800      	cmp	r0, #0
 800416e:	f47e ade3 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8004172:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004174:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8004176:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 800417a:	e4ee      	b.n	8003b5a <_svfprintf_r+0xfca>
 800417c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800417e:	932a      	str	r3, [sp, #168]	; 0xa8
 8004180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004182:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004186:	7bd9      	ldrb	r1, [r3, #15]
 8004188:	4291      	cmp	r1, r2
 800418a:	462b      	mov	r3, r5
 800418c:	d109      	bne.n	80041a2 <_svfprintf_r+0x1612>
 800418e:	2030      	movs	r0, #48	; 0x30
 8004190:	f803 0c01 	strb.w	r0, [r3, #-1]
 8004194:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004196:	1e5a      	subs	r2, r3, #1
 8004198:	922a      	str	r2, [sp, #168]	; 0xa8
 800419a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800419e:	4291      	cmp	r1, r2
 80041a0:	d0f6      	beq.n	8004190 <_svfprintf_r+0x1600>
 80041a2:	2a39      	cmp	r2, #57	; 0x39
 80041a4:	bf0b      	itete	eq
 80041a6:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
 80041a8:	3201      	addne	r2, #1
 80041aa:	7a92      	ldrbeq	r2, [r2, #10]
 80041ac:	b2d2      	uxtbne	r2, r2
 80041ae:	f803 2c01 	strb.w	r2, [r3, #-1]
 80041b2:	e750      	b.n	8004056 <_svfprintf_r+0x14c6>
 80041b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f340 815b 	ble.w	8004472 <_svfprintf_r+0x18e2>
 80041bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041be:	f1ba 0f00 	cmp.w	sl, #0
 80041c2:	f040 80ef 	bne.w	80043a4 <_svfprintf_r+0x1814>
 80041c6:	07c4      	lsls	r4, r0, #31
 80041c8:	f100 80ec 	bmi.w	80043a4 <_svfprintf_r+0x1814>
 80041cc:	930c      	str	r3, [sp, #48]	; 0x30
 80041ce:	2766      	movs	r7, #102	; 0x66
 80041d0:	0543      	lsls	r3, r0, #21
 80041d2:	d46e      	bmi.n	80042b2 <_svfprintf_r+0x1722>
 80041d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80041da:	9308      	str	r3, [sp, #32]
 80041dc:	e781      	b.n	80040e2 <_svfprintf_r+0x1552>
 80041de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80041e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80041e2:	4413      	add	r3, r2
 80041e4:	930c      	str	r3, [sp, #48]	; 0x30
 80041e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f340 8151 	ble.w	8004490 <_svfprintf_r+0x1900>
 80041ee:	2767      	movs	r7, #103	; 0x67
 80041f0:	e7ee      	b.n	80041d0 <_svfprintf_r+0x1640>
 80041f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80041f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80041f6:	9807      	ldr	r0, [sp, #28]
 80041f8:	f002 fba2 	bl	8006940 <__ssprint_r>
 80041fc:	2800      	cmp	r0, #0
 80041fe:	f47e ad9b 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8004202:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004204:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004206:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 800420e:	e4bc      	b.n	8003b8a <_svfprintf_r+0xffa>
 8004210:	aa26      	add	r2, sp, #152	; 0x98
 8004212:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004214:	4629      	mov	r1, r5
 8004216:	f002 fa97 	bl	8006748 <frexp>
 800421a:	2200      	movs	r2, #0
 800421c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004220:	f004 f858 	bl	80082d4 <__aeabi_dmul>
 8004224:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 8004228:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800422c:	f004 faba 	bl	80087a4 <__aeabi_dcmpeq>
 8004230:	b108      	cbz	r0, 8004236 <_svfprintf_r+0x16a6>
 8004232:	2301      	movs	r3, #1
 8004234:	9326      	str	r3, [sp, #152]	; 0x98
 8004236:	4bb3      	ldr	r3, [pc, #716]	; (8004504 <_svfprintf_r+0x1974>)
 8004238:	930c      	str	r3, [sp, #48]	; 0x30
 800423a:	e6a7      	b.n	8003f8c <_svfprintf_r+0x13fc>
 800423c:	425d      	negs	r5, r3
 800423e:	3310      	adds	r3, #16
 8004240:	4bb1      	ldr	r3, [pc, #708]	; (8004508 <_svfprintf_r+0x1978>)
 8004242:	f280 80a0 	bge.w	8004386 <_svfprintf_r+0x17f6>
 8004246:	4619      	mov	r1, r3
 8004248:	2710      	movs	r7, #16
 800424a:	4623      	mov	r3, r4
 800424c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004250:	460c      	mov	r4, r1
 8004252:	e005      	b.n	8004260 <_svfprintf_r+0x16d0>
 8004254:	f109 0908 	add.w	r9, r9, #8
 8004258:	3d10      	subs	r5, #16
 800425a:	2d10      	cmp	r5, #16
 800425c:	f340 8090 	ble.w	8004380 <_svfprintf_r+0x17f0>
 8004260:	3201      	adds	r2, #1
 8004262:	3310      	adds	r3, #16
 8004264:	2a07      	cmp	r2, #7
 8004266:	e9cd 232d 	strd	r2, r3, [sp, #180]	; 0xb4
 800426a:	e9c9 4700 	strd	r4, r7, [r9]
 800426e:	ddf1      	ble.n	8004254 <_svfprintf_r+0x16c4>
 8004270:	aa2c      	add	r2, sp, #176	; 0xb0
 8004272:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004274:	4650      	mov	r0, sl
 8004276:	f002 fb63 	bl	8006940 <__ssprint_r>
 800427a:	2800      	cmp	r0, #0
 800427c:	f47e ad5c 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 8004280:	e9dd 232d 	ldrd	r2, r3, [sp, #180]	; 0xb4
 8004284:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8004288:	e7e6      	b.n	8004258 <_svfprintf_r+0x16c8>
 800428a:	f10a 0101 	add.w	r1, sl, #1
 800428e:	9807      	ldr	r0, [sp, #28]
 8004290:	f001 fa56 	bl	8005740 <_malloc_r>
 8004294:	4606      	mov	r6, r0
 8004296:	2800      	cmp	r0, #0
 8004298:	f000 815a 	beq.w	8004550 <_svfprintf_r+0x19c0>
 800429c:	f448 7381 	orr.w	r3, r8, #258	; 0x102
 80042a0:	9312      	str	r3, [sp, #72]	; 0x48
 80042a2:	f027 0320 	bic.w	r3, r7, #32
 80042a6:	9308      	str	r3, [sp, #32]
 80042a8:	46a0      	mov	r8, r4
 80042aa:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80042ac:	9010      	str	r0, [sp, #64]	; 0x40
 80042ae:	e64a      	b.n	8003f46 <_svfprintf_r+0x13b6>
 80042b0:	2767      	movs	r7, #103	; 0x67
 80042b2:	9820      	ldr	r0, [sp, #128]	; 0x80
 80042b4:	2200      	movs	r2, #0
 80042b6:	9213      	str	r2, [sp, #76]	; 0x4c
 80042b8:	9216      	str	r2, [sp, #88]	; 0x58
 80042ba:	7803      	ldrb	r3, [r0, #0]
 80042bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80042be:	2bff      	cmp	r3, #255	; 0xff
 80042c0:	d00c      	beq.n	80042dc <_svfprintf_r+0x174c>
 80042c2:	4293      	cmp	r3, r2
 80042c4:	da0a      	bge.n	80042dc <_svfprintf_r+0x174c>
 80042c6:	7841      	ldrb	r1, [r0, #1]
 80042c8:	1ad2      	subs	r2, r2, r3
 80042ca:	b1b1      	cbz	r1, 80042fa <_svfprintf_r+0x176a>
 80042cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80042ce:	3301      	adds	r3, #1
 80042d0:	9316      	str	r3, [sp, #88]	; 0x58
 80042d2:	460b      	mov	r3, r1
 80042d4:	2bff      	cmp	r3, #255	; 0xff
 80042d6:	f100 0001 	add.w	r0, r0, #1
 80042da:	d1f2      	bne.n	80042c2 <_svfprintf_r+0x1732>
 80042dc:	9215      	str	r2, [sp, #84]	; 0x54
 80042de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80042e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80042e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042e4:	9020      	str	r0, [sp, #128]	; 0x80
 80042e6:	4413      	add	r3, r2
 80042e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80042ea:	fb02 1303 	mla	r3, r2, r3, r1
 80042ee:	930c      	str	r3, [sp, #48]	; 0x30
 80042f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80042f4:	9308      	str	r3, [sp, #32]
 80042f6:	f7ff bb9a 	b.w	8003a2e <_svfprintf_r+0xe9e>
 80042fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80042fc:	3101      	adds	r1, #1
 80042fe:	9113      	str	r1, [sp, #76]	; 0x4c
 8004300:	e7dd      	b.n	80042be <_svfprintf_r+0x172e>
 8004302:	a82a      	add	r0, sp, #168	; 0xa8
 8004304:	a927      	add	r1, sp, #156	; 0x9c
 8004306:	9004      	str	r0, [sp, #16]
 8004308:	9103      	str	r1, [sp, #12]
 800430a:	a826      	add	r0, sp, #152	; 0x98
 800430c:	2103      	movs	r1, #3
 800430e:	9002      	str	r0, [sp, #8]
 8004310:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004312:	f8cd a004 	str.w	sl, [sp, #4]
 8004316:	462b      	mov	r3, r5
 8004318:	9100      	str	r1, [sp, #0]
 800431a:	9807      	ldr	r0, [sp, #28]
 800431c:	f000 f9b4 	bl	8004688 <_dtoa_r>
 8004320:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004324:	4606      	mov	r6, r0
 8004326:	eb00 040a 	add.w	r4, r0, sl
 800432a:	7833      	ldrb	r3, [r6, #0]
 800432c:	2b30      	cmp	r3, #48	; 0x30
 800432e:	f000 80d0 	beq.w	80044d2 <_svfprintf_r+0x1942>
 8004332:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004334:	441c      	add	r4, r3
 8004336:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004338:	980c      	ldr	r0, [sp, #48]	; 0x30
 800433a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800433c:	4629      	mov	r1, r5
 800433e:	f004 fa31 	bl	80087a4 <__aeabi_dcmpeq>
 8004342:	b110      	cbz	r0, 800434a <_svfprintf_r+0x17ba>
 8004344:	4623      	mov	r3, r4
 8004346:	f7ff bb23 	b.w	8003990 <_svfprintf_r+0xe00>
 800434a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800434c:	42a3      	cmp	r3, r4
 800434e:	f4bf ab1f 	bcs.w	8003990 <_svfprintf_r+0xe00>
 8004352:	2130      	movs	r1, #48	; 0x30
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	922a      	str	r2, [sp, #168]	; 0xa8
 8004358:	7019      	strb	r1, [r3, #0]
 800435a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800435c:	429c      	cmp	r4, r3
 800435e:	d8f9      	bhi.n	8004354 <_svfprintf_r+0x17c4>
 8004360:	f7ff bb16 	b.w	8003990 <_svfprintf_r+0xe00>
 8004364:	f1ba 0f00 	cmp.w	sl, #0
 8004368:	f000 808d 	beq.w	8004486 <_svfprintf_r+0x18f6>
 800436c:	9010      	str	r0, [sp, #64]	; 0x40
 800436e:	e5ea      	b.n	8003f46 <_svfprintf_r+0x13b6>
 8004370:	9010      	str	r0, [sp, #64]	; 0x40
 8004372:	f04f 0a06 	mov.w	sl, #6
 8004376:	e5e6      	b.n	8003f46 <_svfprintf_r+0x13b6>
 8004378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800437a:	4433      	add	r3, r6
 800437c:	461c      	mov	r4, r3
 800437e:	e7da      	b.n	8004336 <_svfprintf_r+0x17a6>
 8004380:	4621      	mov	r1, r4
 8004382:	461c      	mov	r4, r3
 8004384:	460b      	mov	r3, r1
 8004386:	3201      	adds	r2, #1
 8004388:	442c      	add	r4, r5
 800438a:	2a07      	cmp	r2, #7
 800438c:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 8004390:	e9c9 3500 	strd	r3, r5, [r9]
 8004394:	f300 80c2 	bgt.w	800451c <_svfprintf_r+0x198c>
 8004398:	f109 0908 	add.w	r9, r9, #8
 800439c:	f7ff b930 	b.w	8003600 <_svfprintf_r+0xa70>
 80043a0:	4699      	mov	r9, r3
 80043a2:	e446      	b.n	8003c32 <_svfprintf_r+0x10a2>
 80043a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80043a6:	4413      	add	r3, r2
 80043a8:	4453      	add	r3, sl
 80043aa:	930c      	str	r3, [sp, #48]	; 0x30
 80043ac:	2766      	movs	r7, #102	; 0x66
 80043ae:	e70f      	b.n	80041d0 <_svfprintf_r+0x1640>
 80043b0:	f10d 0caf 	add.w	ip, sp, #175	; 0xaf
 80043b4:	4664      	mov	r4, ip
 80043b6:	4d55      	ldr	r5, [pc, #340]	; (800450c <_svfprintf_r+0x197c>)
 80043b8:	e000      	b.n	80043bc <_svfprintf_r+0x182c>
 80043ba:	4614      	mov	r4, r2
 80043bc:	fba5 1203 	umull	r1, r2, r5, r3
 80043c0:	08d2      	lsrs	r2, r2, #3
 80043c2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80043c6:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80043ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80043ce:	4613      	mov	r3, r2
 80043d0:	2b09      	cmp	r3, #9
 80043d2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80043d6:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 80043da:	dcee      	bgt.n	80043ba <_svfprintf_r+0x182a>
 80043dc:	3330      	adds	r3, #48	; 0x30
 80043de:	3c02      	subs	r4, #2
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	45a4      	cmp	ip, r4
 80043e4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80043e8:	f240 80a6 	bls.w	8004538 <_svfprintf_r+0x19a8>
 80043ec:	f10d 04a2 	add.w	r4, sp, #162	; 0xa2
 80043f0:	4611      	mov	r1, r2
 80043f2:	e001      	b.n	80043f8 <_svfprintf_r+0x1868>
 80043f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043f8:	f804 3b01 	strb.w	r3, [r4], #1
 80043fc:	458c      	cmp	ip, r1
 80043fe:	d1f9      	bne.n	80043f4 <_svfprintf_r+0x1864>
 8004400:	ab2c      	add	r3, sp, #176	; 0xb0
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	f10d 02a2 	add.w	r2, sp, #162	; 0xa2
 8004408:	4413      	add	r3, r2
 800440a:	f7ff baf7 	b.w	80039fc <_svfprintf_r+0xe6c>
 800440e:	2301      	movs	r3, #1
 8004410:	9326      	str	r3, [sp, #152]	; 0x98
 8004412:	4b3f      	ldr	r3, [pc, #252]	; (8004510 <_svfprintf_r+0x1980>)
 8004414:	930c      	str	r3, [sp, #48]	; 0x30
 8004416:	e5b9      	b.n	8003f8c <_svfprintf_r+0x13fc>
 8004418:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800441a:	930c      	str	r3, [sp, #48]	; 0x30
 800441c:	e656      	b.n	80040cc <_svfprintf_r+0x153c>
 800441e:	a82a      	add	r0, sp, #168	; 0xa8
 8004420:	a927      	add	r1, sp, #156	; 0x9c
 8004422:	9004      	str	r0, [sp, #16]
 8004424:	9103      	str	r1, [sp, #12]
 8004426:	a826      	add	r0, sp, #152	; 0x98
 8004428:	2103      	movs	r1, #3
 800442a:	9002      	str	r0, [sp, #8]
 800442c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800442e:	f8cd a004 	str.w	sl, [sp, #4]
 8004432:	462b      	mov	r3, r5
 8004434:	9100      	str	r1, [sp, #0]
 8004436:	9807      	ldr	r0, [sp, #28]
 8004438:	f000 f926 	bl	8004688 <_dtoa_r>
 800443c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004440:	4606      	mov	r6, r0
 8004442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004444:	2f46      	cmp	r7, #70	; 0x46
 8004446:	eb06 0403 	add.w	r4, r6, r3
 800444a:	f43f af6e 	beq.w	800432a <_svfprintf_r+0x179a>
 800444e:	e772      	b.n	8004336 <_svfprintf_r+0x17a6>
 8004450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004452:	4e30      	ldr	r6, [pc, #192]	; (8004514 <_svfprintf_r+0x1984>)
 8004454:	2b00      	cmp	r3, #0
 8004456:	bfb6      	itet	lt
 8004458:	222d      	movlt	r2, #45	; 0x2d
 800445a:	f89d 2093 	ldrbge.w	r2, [sp, #147]	; 0x93
 800445e:	f88d 2093 	strblt.w	r2, [sp, #147]	; 0x93
 8004462:	4b2d      	ldr	r3, [pc, #180]	; (8004518 <_svfprintf_r+0x1988>)
 8004464:	f7fe bf60 	b.w	8003328 <_svfprintf_r+0x798>
 8004468:	07c5      	lsls	r5, r0, #31
 800446a:	f57f aad4 	bpl.w	8003a16 <_svfprintf_r+0xe86>
 800446e:	f7ff bace 	b.w	8003a0e <_svfprintf_r+0xe7e>
 8004472:	f1ba 0f00 	cmp.w	sl, #0
 8004476:	d117      	bne.n	80044a8 <_svfprintf_r+0x1918>
 8004478:	07c1      	lsls	r1, r0, #31
 800447a:	d415      	bmi.n	80044a8 <_svfprintf_r+0x1918>
 800447c:	2301      	movs	r3, #1
 800447e:	9308      	str	r3, [sp, #32]
 8004480:	930c      	str	r3, [sp, #48]	; 0x30
 8004482:	2766      	movs	r7, #102	; 0x66
 8004484:	e62d      	b.n	80040e2 <_svfprintf_r+0x1552>
 8004486:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800448a:	f04f 0a01 	mov.w	sl, #1
 800448e:	e55a      	b.n	8003f46 <_svfprintf_r+0x13b6>
 8004490:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004492:	f1c3 0301 	rsb	r3, r3, #1
 8004496:	441a      	add	r2, r3
 8004498:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800449c:	920c      	str	r2, [sp, #48]	; 0x30
 800449e:	9308      	str	r3, [sp, #32]
 80044a0:	2767      	movs	r7, #103	; 0x67
 80044a2:	e61e      	b.n	80040e2 <_svfprintf_r+0x1552>
 80044a4:	464a      	mov	r2, r9
 80044a6:	e453      	b.n	8003d50 <_svfprintf_r+0x11c0>
 80044a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80044aa:	3301      	adds	r3, #1
 80044ac:	4453      	add	r3, sl
 80044ae:	930c      	str	r3, [sp, #48]	; 0x30
 80044b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80044b4:	9308      	str	r3, [sp, #32]
 80044b6:	2766      	movs	r7, #102	; 0x66
 80044b8:	e613      	b.n	80040e2 <_svfprintf_r+0x1552>
 80044ba:	2f47      	cmp	r7, #71	; 0x47
 80044bc:	f47f af5c 	bne.w	8004378 <_svfprintf_r+0x17e8>
 80044c0:	f018 0f01 	tst.w	r8, #1
 80044c4:	f43f aa63 	beq.w	800398e <_svfprintf_r+0xdfe>
 80044c8:	e7bb      	b.n	8004442 <_svfprintf_r+0x18b2>
 80044ca:	f10d 02a2 	add.w	r2, sp, #162	; 0xa2
 80044ce:	f7ff ba92 	b.w	80039f6 <_svfprintf_r+0xe66>
 80044d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80044d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80044d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80044d8:	4629      	mov	r1, r5
 80044da:	f004 f963 	bl	80087a4 <__aeabi_dcmpeq>
 80044de:	2800      	cmp	r0, #0
 80044e0:	f47f af27 	bne.w	8004332 <_svfprintf_r+0x17a2>
 80044e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044e6:	f1c3 0301 	rsb	r3, r3, #1
 80044ea:	9326      	str	r3, [sp, #152]	; 0x98
 80044ec:	e722      	b.n	8004334 <_svfprintf_r+0x17a4>
 80044ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044f0:	f89b 7001 	ldrb.w	r7, [fp, #1]
 80044f4:	680b      	ldr	r3, [r1, #0]
 80044f6:	ea43 7ae3 	orr.w	sl, r3, r3, asr #31
 80044fa:	1d0b      	adds	r3, r1, #4
 80044fc:	4693      	mov	fp, r2
 80044fe:	930d      	str	r3, [sp, #52]	; 0x34
 8004500:	f7fe bba0 	b.w	8002c44 <_svfprintf_r+0xb4>
 8004504:	08008bd0 	.word	0x08008bd0
 8004508:	08008c14 	.word	0x08008c14
 800450c:	cccccccd 	.word	0xcccccccd
 8004510:	08008be4 	.word	0x08008be4
 8004514:	08008bcc 	.word	0x08008bcc
 8004518:	08008bc8 	.word	0x08008bc8
 800451c:	aa2c      	add	r2, sp, #176	; 0xb0
 800451e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004520:	9807      	ldr	r0, [sp, #28]
 8004522:	f002 fa0d 	bl	8006940 <__ssprint_r>
 8004526:	2800      	cmp	r0, #0
 8004528:	f47e ac06 	bne.w	8002d38 <_svfprintf_r+0x1a8>
 800452c:	e9dd 242d 	ldrd	r2, r4, [sp, #180]	; 0xb4
 8004530:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8004534:	f7ff b864 	b.w	8003600 <_svfprintf_r+0xa70>
 8004538:	f10d 03a2 	add.w	r3, sp, #162	; 0xa2
 800453c:	f7ff ba5e 	b.w	80039fc <_svfprintf_r+0xe6c>
 8004540:	9a07      	ldr	r2, [sp, #28]
 8004542:	230c      	movs	r3, #12
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800454a:	9309      	str	r3, [sp, #36]	; 0x24
 800454c:	f7fe bc03 	b.w	8002d56 <_svfprintf_r+0x1c6>
 8004550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004552:	8993      	ldrh	r3, [r2, #12]
 8004554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004558:	8193      	strh	r3, [r2, #12]
 800455a:	f7fe bbf5 	b.w	8002d48 <_svfprintf_r+0x1b8>
 800455e:	bf00      	nop

08004560 <quorem>:
 8004560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004564:	6903      	ldr	r3, [r0, #16]
 8004566:	690f      	ldr	r7, [r1, #16]
 8004568:	42bb      	cmp	r3, r7
 800456a:	b083      	sub	sp, #12
 800456c:	f2c0 8086 	blt.w	800467c <quorem+0x11c>
 8004570:	3f01      	subs	r7, #1
 8004572:	f101 0914 	add.w	r9, r1, #20
 8004576:	f100 0a14 	add.w	sl, r0, #20
 800457a:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
 800457e:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 8004582:	00bc      	lsls	r4, r7, #2
 8004584:	3201      	adds	r2, #1
 8004586:	fbb3 f8f2 	udiv	r8, r3, r2
 800458a:	eb0a 0304 	add.w	r3, sl, r4
 800458e:	9400      	str	r4, [sp, #0]
 8004590:	eb09 0b04 	add.w	fp, r9, r4
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	f1b8 0f00 	cmp.w	r8, #0
 800459a:	d038      	beq.n	800460e <quorem+0xae>
 800459c:	2500      	movs	r5, #0
 800459e:	462e      	mov	r6, r5
 80045a0:	46ce      	mov	lr, r9
 80045a2:	46d4      	mov	ip, sl
 80045a4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80045a8:	f8dc 3000 	ldr.w	r3, [ip]
 80045ac:	b2a2      	uxth	r2, r4
 80045ae:	fb08 5502 	mla	r5, r8, r2, r5
 80045b2:	0c22      	lsrs	r2, r4, #16
 80045b4:	0c2c      	lsrs	r4, r5, #16
 80045b6:	fb08 4202 	mla	r2, r8, r2, r4
 80045ba:	b2ad      	uxth	r5, r5
 80045bc:	1b75      	subs	r5, r6, r5
 80045be:	b296      	uxth	r6, r2
 80045c0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
 80045c4:	fa15 f383 	uxtah	r3, r5, r3
 80045c8:	eb06 4623 	add.w	r6, r6, r3, asr #16
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80045d2:	45f3      	cmp	fp, lr
 80045d4:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80045d8:	f84c 3b04 	str.w	r3, [ip], #4
 80045dc:	ea4f 4626 	mov.w	r6, r6, asr #16
 80045e0:	d2e0      	bcs.n	80045a4 <quorem+0x44>
 80045e2:	9b00      	ldr	r3, [sp, #0]
 80045e4:	f85a 3003 	ldr.w	r3, [sl, r3]
 80045e8:	b98b      	cbnz	r3, 800460e <quorem+0xae>
 80045ea:	9a01      	ldr	r2, [sp, #4]
 80045ec:	1f13      	subs	r3, r2, #4
 80045ee:	459a      	cmp	sl, r3
 80045f0:	d20c      	bcs.n	800460c <quorem+0xac>
 80045f2:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80045f6:	b94b      	cbnz	r3, 800460c <quorem+0xac>
 80045f8:	f1a2 0308 	sub.w	r3, r2, #8
 80045fc:	e002      	b.n	8004604 <quorem+0xa4>
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	3b04      	subs	r3, #4
 8004602:	b91a      	cbnz	r2, 800460c <quorem+0xac>
 8004604:	459a      	cmp	sl, r3
 8004606:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800460a:	d3f8      	bcc.n	80045fe <quorem+0x9e>
 800460c:	6107      	str	r7, [r0, #16]
 800460e:	4604      	mov	r4, r0
 8004610:	f001 fe96 	bl	8006340 <__mcmp>
 8004614:	2800      	cmp	r0, #0
 8004616:	db2d      	blt.n	8004674 <quorem+0x114>
 8004618:	f108 0801 	add.w	r8, r8, #1
 800461c:	4655      	mov	r5, sl
 800461e:	2300      	movs	r3, #0
 8004620:	f859 1b04 	ldr.w	r1, [r9], #4
 8004624:	6828      	ldr	r0, [r5, #0]
 8004626:	b28a      	uxth	r2, r1
 8004628:	1a9a      	subs	r2, r3, r2
 800462a:	0c0b      	lsrs	r3, r1, #16
 800462c:	fa12 f280 	uxtah	r2, r2, r0
 8004630:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
 8004634:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8004638:	b292      	uxth	r2, r2
 800463a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800463e:	45cb      	cmp	fp, r9
 8004640:	f845 2b04 	str.w	r2, [r5], #4
 8004644:	ea4f 4323 	mov.w	r3, r3, asr #16
 8004648:	d2ea      	bcs.n	8004620 <quorem+0xc0>
 800464a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 800464e:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
 8004652:	b97a      	cbnz	r2, 8004674 <quorem+0x114>
 8004654:	1f1a      	subs	r2, r3, #4
 8004656:	4592      	cmp	sl, r2
 8004658:	d20b      	bcs.n	8004672 <quorem+0x112>
 800465a:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800465e:	b942      	cbnz	r2, 8004672 <quorem+0x112>
 8004660:	3b08      	subs	r3, #8
 8004662:	e002      	b.n	800466a <quorem+0x10a>
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	3b04      	subs	r3, #4
 8004668:	b91a      	cbnz	r2, 8004672 <quorem+0x112>
 800466a:	459a      	cmp	sl, r3
 800466c:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8004670:	d3f8      	bcc.n	8004664 <quorem+0x104>
 8004672:	6127      	str	r7, [r4, #16]
 8004674:	4640      	mov	r0, r8
 8004676:	b003      	add	sp, #12
 8004678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800467c:	2000      	movs	r0, #0
 800467e:	b003      	add	sp, #12
 8004680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004684:	0000      	movs	r0, r0
	...

08004688 <_dtoa_r>:
 8004688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800468e:	b097      	sub	sp, #92	; 0x5c
 8004690:	4614      	mov	r4, r2
 8004692:	461d      	mov	r5, r3
 8004694:	4683      	mov	fp, r0
 8004696:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800469a:	b149      	cbz	r1, 80046b0 <_dtoa_r+0x28>
 800469c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800469e:	604a      	str	r2, [r1, #4]
 80046a0:	2301      	movs	r3, #1
 80046a2:	4093      	lsls	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
 80046a6:	f001 fc0f 	bl	8005ec8 <_Bfree>
 80046aa:	2300      	movs	r3, #0
 80046ac:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 80046b0:	1e2e      	subs	r6, r5, #0
 80046b2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80046b4:	bfb4      	ite	lt
 80046b6:	2301      	movlt	r3, #1
 80046b8:	2300      	movge	r3, #0
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	4b78      	ldr	r3, [pc, #480]	; (80048a0 <_dtoa_r+0x218>)
 80046be:	bfbc      	itt	lt
 80046c0:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
 80046c4:	9603      	strlt	r6, [sp, #12]
 80046c6:	43b3      	bics	r3, r6
 80046c8:	f000 80a8 	beq.w	800481c <_dtoa_r+0x194>
 80046cc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80046d0:	2200      	movs	r2, #0
 80046d2:	4640      	mov	r0, r8
 80046d4:	4649      	mov	r1, r9
 80046d6:	2300      	movs	r3, #0
 80046d8:	f004 f864 	bl	80087a4 <__aeabi_dcmpeq>
 80046dc:	4605      	mov	r5, r0
 80046de:	b178      	cbz	r0, 8004700 <_dtoa_r+0x78>
 80046e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80046e2:	2301      	movs	r3, #1
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80c4 	beq.w	8004876 <_dtoa_r+0x1ee>
 80046ee:	4b6d      	ldr	r3, [pc, #436]	; (80048a4 <_dtoa_r+0x21c>)
 80046f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	9304      	str	r3, [sp, #16]
 80046f8:	9804      	ldr	r0, [sp, #16]
 80046fa:	b017      	add	sp, #92	; 0x5c
 80046fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004700:	aa14      	add	r2, sp, #80	; 0x50
 8004702:	ab15      	add	r3, sp, #84	; 0x54
 8004704:	e9cd 3200 	strd	r3, r2, [sp]
 8004708:	4658      	mov	r0, fp
 800470a:	4642      	mov	r2, r8
 800470c:	464b      	mov	r3, r9
 800470e:	f001 ff2b 	bl	8006568 <__d2b>
 8004712:	0d34      	lsrs	r4, r6, #20
 8004714:	4682      	mov	sl, r0
 8004716:	f040 80a3 	bne.w	8004860 <_dtoa_r+0x1d8>
 800471a:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
 800471e:	442c      	add	r4, r5
 8004720:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004724:	2b20      	cmp	r3, #32
 8004726:	f340 8417 	ble.w	8004f58 <_dtoa_r+0x8d0>
 800472a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800472e:	409e      	lsls	r6, r3
 8004730:	9b02      	ldr	r3, [sp, #8]
 8004732:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8004736:	fa23 f000 	lsr.w	r0, r3, r0
 800473a:	4330      	orrs	r0, r6
 800473c:	f003 fd50 	bl	80081e0 <__aeabi_ui2d>
 8004740:	2301      	movs	r3, #1
 8004742:	4680      	mov	r8, r0
 8004744:	3c01      	subs	r4, #1
 8004746:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800474a:	9312      	str	r3, [sp, #72]	; 0x48
 800474c:	2200      	movs	r2, #0
 800474e:	4b56      	ldr	r3, [pc, #344]	; (80048a8 <_dtoa_r+0x220>)
 8004750:	4640      	mov	r0, r8
 8004752:	4649      	mov	r1, r9
 8004754:	f003 fc06 	bl	8007f64 <__aeabi_dsub>
 8004758:	a34b      	add	r3, pc, #300	; (adr r3, 8004888 <_dtoa_r+0x200>)
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	f003 fdb9 	bl	80082d4 <__aeabi_dmul>
 8004762:	a34b      	add	r3, pc, #300	; (adr r3, 8004890 <_dtoa_r+0x208>)
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f003 fbfe 	bl	8007f68 <__adddf3>
 800476c:	4606      	mov	r6, r0
 800476e:	4620      	mov	r0, r4
 8004770:	460f      	mov	r7, r1
 8004772:	f003 fd45 	bl	8008200 <__aeabi_i2d>
 8004776:	a348      	add	r3, pc, #288	; (adr r3, 8004898 <_dtoa_r+0x210>)
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f003 fdaa 	bl	80082d4 <__aeabi_dmul>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4630      	mov	r0, r6
 8004786:	4639      	mov	r1, r7
 8004788:	f003 fbee 	bl	8007f68 <__adddf3>
 800478c:	4606      	mov	r6, r0
 800478e:	460f      	mov	r7, r1
 8004790:	f004 f850 	bl	8008834 <__aeabi_d2iz>
 8004794:	2200      	movs	r2, #0
 8004796:	9005      	str	r0, [sp, #20]
 8004798:	2300      	movs	r3, #0
 800479a:	4630      	mov	r0, r6
 800479c:	4639      	mov	r1, r7
 800479e:	f004 f80b 	bl	80087b8 <__aeabi_dcmplt>
 80047a2:	2800      	cmp	r0, #0
 80047a4:	f040 826e 	bne.w	8004c84 <_dtoa_r+0x5fc>
 80047a8:	9e05      	ldr	r6, [sp, #20]
 80047aa:	2e16      	cmp	r6, #22
 80047ac:	f200 825f 	bhi.w	8004c6e <_dtoa_r+0x5e6>
 80047b0:	4b3e      	ldr	r3, [pc, #248]	; (80048ac <_dtoa_r+0x224>)
 80047b2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80047b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047be:	f004 f819 	bl	80087f4 <__aeabi_dcmpgt>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	f000 83c4 	beq.w	8004f50 <_dtoa_r+0x8c8>
 80047c8:	1e73      	subs	r3, r6, #1
 80047ca:	9305      	str	r3, [sp, #20]
 80047cc:	2300      	movs	r3, #0
 80047ce:	930a      	str	r3, [sp, #40]	; 0x28
 80047d0:	1b2c      	subs	r4, r5, r4
 80047d2:	9b05      	ldr	r3, [sp, #20]
 80047d4:	f1b4 0801 	subs.w	r8, r4, #1
 80047d8:	bf46      	itte	mi
 80047da:	f1c4 0901 	rsbmi	r9, r4, #1
 80047de:	f04f 0800 	movmi.w	r8, #0
 80047e2:	f04f 0900 	movpl.w	r9, #0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f2c0 8244 	blt.w	8004c74 <_dtoa_r+0x5ec>
 80047ec:	4498      	add	r8, r3
 80047ee:	9309      	str	r3, [sp, #36]	; 0x24
 80047f0:	2300      	movs	r3, #0
 80047f2:	9308      	str	r3, [sp, #32]
 80047f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047f6:	2b09      	cmp	r3, #9
 80047f8:	d860      	bhi.n	80048bc <_dtoa_r+0x234>
 80047fa:	2b05      	cmp	r3, #5
 80047fc:	f340 83aa 	ble.w	8004f54 <_dtoa_r+0x8cc>
 8004800:	3b04      	subs	r3, #4
 8004802:	9320      	str	r3, [sp, #128]	; 0x80
 8004804:	2500      	movs	r5, #0
 8004806:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004808:	3b02      	subs	r3, #2
 800480a:	2b03      	cmp	r3, #3
 800480c:	f200 848d 	bhi.w	800512a <_dtoa_r+0xaa2>
 8004810:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004814:	03a903c9 	.word	0x03a903c9
 8004818:	04ea03d3 	.word	0x04ea03d3
 800481c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800481e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	9b02      	ldr	r3, [sp, #8]
 8004826:	b97b      	cbnz	r3, 8004848 <_dtoa_r+0x1c0>
 8004828:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800482c:	b966      	cbnz	r6, 8004848 <_dtoa_r+0x1c0>
 800482e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8612 	beq.w	800545a <_dtoa_r+0xdd2>
 8004836:	4b1e      	ldr	r3, [pc, #120]	; (80048b0 <_dtoa_r+0x228>)
 8004838:	9304      	str	r3, [sp, #16]
 800483a:	3308      	adds	r3, #8
 800483c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800483e:	9804      	ldr	r0, [sp, #16]
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	b017      	add	sp, #92	; 0x5c
 8004844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004848:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800484a:	b92b      	cbnz	r3, 8004858 <_dtoa_r+0x1d0>
 800484c:	4b19      	ldr	r3, [pc, #100]	; (80048b4 <_dtoa_r+0x22c>)
 800484e:	9304      	str	r3, [sp, #16]
 8004850:	9804      	ldr	r0, [sp, #16]
 8004852:	b017      	add	sp, #92	; 0x5c
 8004854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004858:	4b16      	ldr	r3, [pc, #88]	; (80048b4 <_dtoa_r+0x22c>)
 800485a:	9304      	str	r3, [sp, #16]
 800485c:	3303      	adds	r3, #3
 800485e:	e7ed      	b.n	800483c <_dtoa_r+0x1b4>
 8004860:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004864:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004868:	9512      	str	r5, [sp, #72]	; 0x48
 800486a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800486e:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004872:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004874:	e76a      	b.n	800474c <_dtoa_r+0xc4>
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <_dtoa_r+0x230>)
 8004878:	9304      	str	r3, [sp, #16]
 800487a:	9804      	ldr	r0, [sp, #16]
 800487c:	b017      	add	sp, #92	; 0x5c
 800487e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004882:	bf00      	nop
 8004884:	f3af 8000 	nop.w
 8004888:	636f4361 	.word	0x636f4361
 800488c:	3fd287a7 	.word	0x3fd287a7
 8004890:	8b60c8b3 	.word	0x8b60c8b3
 8004894:	3fc68a28 	.word	0x3fc68a28
 8004898:	509f79fb 	.word	0x509f79fb
 800489c:	3fd34413 	.word	0x3fd34413
 80048a0:	7ff00000 	.word	0x7ff00000
 80048a4:	08008c01 	.word	0x08008c01
 80048a8:	3ff80000 	.word	0x3ff80000
 80048ac:	08008c60 	.word	0x08008c60
 80048b0:	08008c24 	.word	0x08008c24
 80048b4:	08008c30 	.word	0x08008c30
 80048b8:	08008c00 	.word	0x08008c00
 80048bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80048c0:	2501      	movs	r5, #1
 80048c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80048c6:	2300      	movs	r3, #0
 80048c8:	9320      	str	r3, [sp, #128]	; 0x80
 80048ca:	9321      	str	r3, [sp, #132]	; 0x84
 80048cc:	2100      	movs	r1, #0
 80048ce:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 80048d2:	940b      	str	r4, [sp, #44]	; 0x2c
 80048d4:	4658      	mov	r0, fp
 80048d6:	f001 fad1 	bl	8005e7c <_Balloc>
 80048da:	2c0e      	cmp	r4, #14
 80048dc:	9004      	str	r0, [sp, #16]
 80048de:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80048e2:	f200 80f9 	bhi.w	8004ad8 <_dtoa_r+0x450>
 80048e6:	2d00      	cmp	r5, #0
 80048e8:	f000 80f6 	beq.w	8004ad8 <_dtoa_r+0x450>
 80048ec:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80048f0:	9905      	ldr	r1, [sp, #20]
 80048f2:	461d      	mov	r5, r3
 80048f4:	4626      	mov	r6, r4
 80048f6:	2900      	cmp	r1, #0
 80048f8:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
 80048fc:	f340 83d3 	ble.w	80050a6 <_dtoa_r+0xa1e>
 8004900:	4b9a      	ldr	r3, [pc, #616]	; (8004b6c <_dtoa_r+0x4e4>)
 8004902:	f001 020f 	and.w	r2, r1, #15
 8004906:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	110c      	asrs	r4, r1, #4
 8004910:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004914:	06e3      	lsls	r3, r4, #27
 8004916:	f140 8488 	bpl.w	800522a <_dtoa_r+0xba2>
 800491a:	4b95      	ldr	r3, [pc, #596]	; (8004b70 <_dtoa_r+0x4e8>)
 800491c:	4631      	mov	r1, r6
 800491e:	4628      	mov	r0, r5
 8004920:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004924:	f003 fe00 	bl	8008528 <__aeabi_ddiv>
 8004928:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800492c:	f004 040f 	and.w	r4, r4, #15
 8004930:	2603      	movs	r6, #3
 8004932:	b17c      	cbz	r4, 8004954 <_dtoa_r+0x2cc>
 8004934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004938:	4d8d      	ldr	r5, [pc, #564]	; (8004b70 <_dtoa_r+0x4e8>)
 800493a:	07e7      	lsls	r7, r4, #31
 800493c:	d504      	bpl.n	8004948 <_dtoa_r+0x2c0>
 800493e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004942:	3601      	adds	r6, #1
 8004944:	f003 fcc6 	bl	80082d4 <__aeabi_dmul>
 8004948:	1064      	asrs	r4, r4, #1
 800494a:	f105 0508 	add.w	r5, r5, #8
 800494e:	d1f4      	bne.n	800493a <_dtoa_r+0x2b2>
 8004950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004958:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800495c:	f003 fde4 	bl	8008528 <__aeabi_ddiv>
 8004960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004966:	b143      	cbz	r3, 800497a <_dtoa_r+0x2f2>
 8004968:	2200      	movs	r2, #0
 800496a:	4b82      	ldr	r3, [pc, #520]	; (8004b74 <_dtoa_r+0x4ec>)
 800496c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004970:	f003 ff22 	bl	80087b8 <__aeabi_dcmplt>
 8004974:	2800      	cmp	r0, #0
 8004976:	f040 84eb 	bne.w	8005350 <_dtoa_r+0xcc8>
 800497a:	4630      	mov	r0, r6
 800497c:	f003 fc40 	bl	8008200 <__aeabi_i2d>
 8004980:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004984:	f003 fca6 	bl	80082d4 <__aeabi_dmul>
 8004988:	4b7b      	ldr	r3, [pc, #492]	; (8004b78 <_dtoa_r+0x4f0>)
 800498a:	2200      	movs	r2, #0
 800498c:	f003 faec 	bl	8007f68 <__adddf3>
 8004990:	9b06      	ldr	r3, [sp, #24]
 8004992:	4606      	mov	r6, r0
 8004994:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 840a 	beq.w	80051b2 <_dtoa_r+0xb2a>
 800499e:	9b05      	ldr	r3, [sp, #20]
 80049a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80049a2:	9b06      	ldr	r3, [sp, #24]
 80049a4:	930e      	str	r3, [sp, #56]	; 0x38
 80049a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049aa:	f003 ff43 	bl	8008834 <__aeabi_d2iz>
 80049ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049b0:	4b6e      	ldr	r3, [pc, #440]	; (8004b6c <_dtoa_r+0x4e4>)
 80049b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049b6:	e953 3402 	ldrd	r3, r4, [r3, #-8]
 80049ba:	f100 0530 	add.w	r5, r0, #48	; 0x30
 80049be:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80049c2:	f003 fc1d 	bl	8008200 <__aeabi_i2d>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80049d2:	f003 fac7 	bl	8007f64 <__aeabi_dsub>
 80049d6:	9b04      	ldr	r3, [sp, #16]
 80049d8:	4606      	mov	r6, r0
 80049da:	9807      	ldr	r0, [sp, #28]
 80049dc:	1c5c      	adds	r4, r3, #1
 80049de:	b2ed      	uxtb	r5, r5
 80049e0:	460f      	mov	r7, r1
 80049e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049e6:	2800      	cmp	r0, #0
 80049e8:	f000 8445 	beq.w	8005276 <_dtoa_r+0xbee>
 80049ec:	2000      	movs	r0, #0
 80049ee:	4963      	ldr	r1, [pc, #396]	; (8004b7c <_dtoa_r+0x4f4>)
 80049f0:	f003 fd9a 	bl	8008528 <__aeabi_ddiv>
 80049f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049f8:	f003 fab4 	bl	8007f64 <__aeabi_dsub>
 80049fc:	9a04      	ldr	r2, [sp, #16]
 80049fe:	463b      	mov	r3, r7
 8004a00:	7015      	strb	r5, [r2, #0]
 8004a02:	4632      	mov	r2, r6
 8004a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a08:	f003 fef4 	bl	80087f4 <__aeabi_dcmpgt>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	f040 84ef 	bne.w	80053f0 <_dtoa_r+0xd68>
 8004a12:	4632      	mov	r2, r6
 8004a14:	463b      	mov	r3, r7
 8004a16:	2000      	movs	r0, #0
 8004a18:	4956      	ldr	r1, [pc, #344]	; (8004b74 <_dtoa_r+0x4ec>)
 8004a1a:	f003 faa3 	bl	8007f64 <__aeabi_dsub>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a26:	f003 fee5 	bl	80087f4 <__aeabi_dcmpgt>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	f040 84e5 	bne.w	80053fa <_dtoa_r+0xd72>
 8004a30:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004a32:	2901      	cmp	r1, #1
 8004a34:	d04c      	beq.n	8004ad0 <_dtoa_r+0x448>
 8004a36:	9a04      	ldr	r2, [sp, #16]
 8004a38:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004a3c:	4411      	add	r1, r2
 8004a3e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004a42:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004a46:	f8cd a008 	str.w	sl, [sp, #8]
 8004a4a:	468a      	mov	sl, r1
 8004a4c:	e00c      	b.n	8004a68 <_dtoa_r+0x3e0>
 8004a4e:	2000      	movs	r0, #0
 8004a50:	4948      	ldr	r1, [pc, #288]	; (8004b74 <_dtoa_r+0x4ec>)
 8004a52:	f003 fa87 	bl	8007f64 <__aeabi_dsub>
 8004a56:	4642      	mov	r2, r8
 8004a58:	464b      	mov	r3, r9
 8004a5a:	f003 fead 	bl	80087b8 <__aeabi_dcmplt>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	f040 84c9 	bne.w	80053f6 <_dtoa_r+0xd6e>
 8004a64:	4554      	cmp	r4, sl
 8004a66:	d02d      	beq.n	8004ac4 <_dtoa_r+0x43c>
 8004a68:	4640      	mov	r0, r8
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	4b44      	ldr	r3, [pc, #272]	; (8004b80 <_dtoa_r+0x4f8>)
 8004a70:	f003 fc30 	bl	80082d4 <__aeabi_dmul>
 8004a74:	2200      	movs	r2, #0
 8004a76:	4b42      	ldr	r3, [pc, #264]	; (8004b80 <_dtoa_r+0x4f8>)
 8004a78:	4680      	mov	r8, r0
 8004a7a:	4689      	mov	r9, r1
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	4639      	mov	r1, r7
 8004a80:	f003 fc28 	bl	80082d4 <__aeabi_dmul>
 8004a84:	460f      	mov	r7, r1
 8004a86:	4606      	mov	r6, r0
 8004a88:	f003 fed4 	bl	8008834 <__aeabi_d2iz>
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	f003 fbb7 	bl	8008200 <__aeabi_i2d>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4630      	mov	r0, r6
 8004a98:	4639      	mov	r1, r7
 8004a9a:	f003 fa63 	bl	8007f64 <__aeabi_dsub>
 8004a9e:	3530      	adds	r5, #48	; 0x30
 8004aa0:	b2ed      	uxtb	r5, r5
 8004aa2:	4642      	mov	r2, r8
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	f804 5b01 	strb.w	r5, [r4], #1
 8004aaa:	4606      	mov	r6, r0
 8004aac:	460f      	mov	r7, r1
 8004aae:	f003 fe83 	bl	80087b8 <__aeabi_dcmplt>
 8004ab2:	4632      	mov	r2, r6
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d0c9      	beq.n	8004a4e <_dtoa_r+0x3c6>
 8004aba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004abc:	f8dd a008 	ldr.w	sl, [sp, #8]
 8004ac0:	9305      	str	r3, [sp, #20]
 8004ac2:	e219      	b.n	8004ef8 <_dtoa_r+0x870>
 8004ac4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004ac8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8004acc:	f8dd a008 	ldr.w	sl, [sp, #8]
 8004ad0:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004ad4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004ad8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f2c0 80ad 	blt.w	8004c3a <_dtoa_r+0x5b2>
 8004ae0:	9a05      	ldr	r2, [sp, #20]
 8004ae2:	2a0e      	cmp	r2, #14
 8004ae4:	f300 80a9 	bgt.w	8004c3a <_dtoa_r+0x5b2>
 8004ae8:	4b20      	ldr	r3, [pc, #128]	; (8004b6c <_dtoa_r+0x4e4>)
 8004aea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004aee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004af2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f2c0 82b3 	blt.w	8005060 <_dtoa_r+0x9d8>
 8004afa:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004afe:	4642      	mov	r2, r8
 8004b00:	464b      	mov	r3, r9
 8004b02:	4630      	mov	r0, r6
 8004b04:	4639      	mov	r1, r7
 8004b06:	f003 fd0f 	bl	8008528 <__aeabi_ddiv>
 8004b0a:	f003 fe93 	bl	8008834 <__aeabi_d2iz>
 8004b0e:	4605      	mov	r5, r0
 8004b10:	f003 fb76 	bl	8008200 <__aeabi_i2d>
 8004b14:	4642      	mov	r2, r8
 8004b16:	464b      	mov	r3, r9
 8004b18:	f003 fbdc 	bl	80082d4 <__aeabi_dmul>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4630      	mov	r0, r6
 8004b22:	4639      	mov	r1, r7
 8004b24:	f003 fa1e 	bl	8007f64 <__aeabi_dsub>
 8004b28:	9a04      	ldr	r2, [sp, #16]
 8004b2a:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8004b2e:	7013      	strb	r3, [r2, #0]
 8004b30:	9b06      	ldr	r3, [sp, #24]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	4606      	mov	r6, r0
 8004b36:	460f      	mov	r7, r1
 8004b38:	f102 0401 	add.w	r4, r2, #1
 8004b3c:	d053      	beq.n	8004be6 <_dtoa_r+0x55e>
 8004b3e:	2200      	movs	r2, #0
 8004b40:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <_dtoa_r+0x4f8>)
 8004b42:	f003 fbc7 	bl	80082d4 <__aeabi_dmul>
 8004b46:	2200      	movs	r2, #0
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	460f      	mov	r7, r1
 8004b4e:	f003 fe29 	bl	80087a4 <__aeabi_dcmpeq>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	f040 81d0 	bne.w	8004ef8 <_dtoa_r+0x870>
 8004b58:	f8cd a008 	str.w	sl, [sp, #8]
 8004b5c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8004b60:	f8cd b018 	str.w	fp, [sp, #24]
 8004b64:	f8dd b010 	ldr.w	fp, [sp, #16]
 8004b68:	e017      	b.n	8004b9a <_dtoa_r+0x512>
 8004b6a:	bf00      	nop
 8004b6c:	08008c60 	.word	0x08008c60
 8004b70:	08008c38 	.word	0x08008c38
 8004b74:	3ff00000 	.word	0x3ff00000
 8004b78:	401c0000 	.word	0x401c0000
 8004b7c:	3fe00000 	.word	0x3fe00000
 8004b80:	40240000 	.word	0x40240000
 8004b84:	f003 fba6 	bl	80082d4 <__aeabi_dmul>
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	4606      	mov	r6, r0
 8004b8e:	460f      	mov	r7, r1
 8004b90:	f003 fe08 	bl	80087a4 <__aeabi_dcmpeq>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	f040 8331 	bne.w	80051fc <_dtoa_r+0xb74>
 8004b9a:	4642      	mov	r2, r8
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	4639      	mov	r1, r7
 8004ba2:	f003 fcc1 	bl	8008528 <__aeabi_ddiv>
 8004ba6:	f003 fe45 	bl	8008834 <__aeabi_d2iz>
 8004baa:	4605      	mov	r5, r0
 8004bac:	f003 fb28 	bl	8008200 <__aeabi_i2d>
 8004bb0:	4642      	mov	r2, r8
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	f003 fb8e 	bl	80082d4 <__aeabi_dmul>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	4639      	mov	r1, r7
 8004bc0:	f003 f9d0 	bl	8007f64 <__aeabi_dsub>
 8004bc4:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8004bc8:	f804 cb01 	strb.w	ip, [r4], #1
 8004bcc:	eba4 0c0b 	sub.w	ip, r4, fp
 8004bd0:	45e2      	cmp	sl, ip
 8004bd2:	4606      	mov	r6, r0
 8004bd4:	460f      	mov	r7, r1
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	4bb8      	ldr	r3, [pc, #736]	; (8004ebc <_dtoa_r+0x834>)
 8004bdc:	d1d2      	bne.n	8004b84 <_dtoa_r+0x4fc>
 8004bde:	f8dd a008 	ldr.w	sl, [sp, #8]
 8004be2:	f8dd b018 	ldr.w	fp, [sp, #24]
 8004be6:	4632      	mov	r2, r6
 8004be8:	463b      	mov	r3, r7
 8004bea:	4630      	mov	r0, r6
 8004bec:	4639      	mov	r1, r7
 8004bee:	f003 f9bb 	bl	8007f68 <__adddf3>
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	460f      	mov	r7, r1
 8004bfa:	f003 fdfb 	bl	80087f4 <__aeabi_dcmpgt>
 8004bfe:	b958      	cbnz	r0, 8004c18 <_dtoa_r+0x590>
 8004c00:	4642      	mov	r2, r8
 8004c02:	464b      	mov	r3, r9
 8004c04:	4630      	mov	r0, r6
 8004c06:	4639      	mov	r1, r7
 8004c08:	f003 fdcc 	bl	80087a4 <__aeabi_dcmpeq>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	f000 8173 	beq.w	8004ef8 <_dtoa_r+0x870>
 8004c12:	07eb      	lsls	r3, r5, #31
 8004c14:	f140 8170 	bpl.w	8004ef8 <_dtoa_r+0x870>
 8004c18:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 8004c1c:	9a04      	ldr	r2, [sp, #16]
 8004c1e:	e005      	b.n	8004c2c <_dtoa_r+0x5a4>
 8004c20:	429a      	cmp	r2, r3
 8004c22:	f000 831e 	beq.w	8005262 <_dtoa_r+0xbda>
 8004c26:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 8004c2a:	461c      	mov	r4, r3
 8004c2c:	2d39      	cmp	r5, #57	; 0x39
 8004c2e:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 8004c32:	d0f5      	beq.n	8004c20 <_dtoa_r+0x598>
 8004c34:	3501      	adds	r5, #1
 8004c36:	701d      	strb	r5, [r3, #0]
 8004c38:	e15e      	b.n	8004ef8 <_dtoa_r+0x870>
 8004c3a:	9a07      	ldr	r2, [sp, #28]
 8004c3c:	b392      	cbz	r2, 8004ca4 <_dtoa_r+0x61c>
 8004c3e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c40:	2a01      	cmp	r2, #1
 8004c42:	f340 8202 	ble.w	800504a <_dtoa_r+0x9c2>
 8004c46:	9b06      	ldr	r3, [sp, #24]
 8004c48:	1e5f      	subs	r7, r3, #1
 8004c4a:	9b08      	ldr	r3, [sp, #32]
 8004c4c:	42bb      	cmp	r3, r7
 8004c4e:	f2c0 82da 	blt.w	8005206 <_dtoa_r+0xb7e>
 8004c52:	1bdf      	subs	r7, r3, r7
 8004c54:	9b06      	ldr	r3, [sp, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f2c0 82f9 	blt.w	800524e <_dtoa_r+0xbc6>
 8004c5c:	464c      	mov	r4, r9
 8004c5e:	4498      	add	r8, r3
 8004c60:	4499      	add	r9, r3
 8004c62:	2101      	movs	r1, #1
 8004c64:	4658      	mov	r0, fp
 8004c66:	f001 fa15 	bl	8006094 <__i2b>
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	e01d      	b.n	8004caa <_dtoa_r+0x622>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	930a      	str	r3, [sp, #40]	; 0x28
 8004c72:	e5ad      	b.n	80047d0 <_dtoa_r+0x148>
 8004c74:	9b05      	ldr	r3, [sp, #20]
 8004c76:	eba9 0903 	sub.w	r9, r9, r3
 8004c7a:	425b      	negs	r3, r3
 8004c7c:	9308      	str	r3, [sp, #32]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	9309      	str	r3, [sp, #36]	; 0x24
 8004c82:	e5b7      	b.n	80047f4 <_dtoa_r+0x16c>
 8004c84:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004c88:	4640      	mov	r0, r8
 8004c8a:	f003 fab9 	bl	8008200 <__aeabi_i2d>
 8004c8e:	4632      	mov	r2, r6
 8004c90:	463b      	mov	r3, r7
 8004c92:	f003 fd87 	bl	80087a4 <__aeabi_dcmpeq>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	f47f ad86 	bne.w	80047a8 <_dtoa_r+0x120>
 8004c9c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8004ca0:	9305      	str	r3, [sp, #20]
 8004ca2:	e581      	b.n	80047a8 <_dtoa_r+0x120>
 8004ca4:	9f08      	ldr	r7, [sp, #32]
 8004ca6:	9d07      	ldr	r5, [sp, #28]
 8004ca8:	464c      	mov	r4, r9
 8004caa:	2c00      	cmp	r4, #0
 8004cac:	dd0b      	ble.n	8004cc6 <_dtoa_r+0x63e>
 8004cae:	f1b8 0f00 	cmp.w	r8, #0
 8004cb2:	dd08      	ble.n	8004cc6 <_dtoa_r+0x63e>
 8004cb4:	4544      	cmp	r4, r8
 8004cb6:	4623      	mov	r3, r4
 8004cb8:	bfa8      	it	ge
 8004cba:	4643      	movge	r3, r8
 8004cbc:	eba9 0903 	sub.w	r9, r9, r3
 8004cc0:	1ae4      	subs	r4, r4, r3
 8004cc2:	eba8 0803 	sub.w	r8, r8, r3
 8004cc6:	9b08      	ldr	r3, [sp, #32]
 8004cc8:	b16b      	cbz	r3, 8004ce6 <_dtoa_r+0x65e>
 8004cca:	9a07      	ldr	r2, [sp, #28]
 8004ccc:	2a00      	cmp	r2, #0
 8004cce:	f000 828e 	beq.w	80051ee <_dtoa_r+0xb66>
 8004cd2:	1bde      	subs	r6, r3, r7
 8004cd4:	2f00      	cmp	r7, #0
 8004cd6:	f040 818e 	bne.w	8004ff6 <_dtoa_r+0x96e>
 8004cda:	4651      	mov	r1, sl
 8004cdc:	4632      	mov	r2, r6
 8004cde:	4658      	mov	r0, fp
 8004ce0:	f001 fa88 	bl	80061f4 <__pow5mult>
 8004ce4:	4682      	mov	sl, r0
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	4658      	mov	r0, fp
 8004cea:	f001 f9d3 	bl	8006094 <__i2b>
 8004cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	2a00      	cmp	r2, #0
 8004cf4:	f040 8118 	bne.w	8004f28 <_dtoa_r+0x8a0>
 8004cf8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	f340 8160 	ble.w	8004fc0 <_dtoa_r+0x938>
 8004d00:	2001      	movs	r0, #1
 8004d02:	4440      	add	r0, r8
 8004d04:	f010 001f 	ands.w	r0, r0, #31
 8004d08:	f000 8109 	beq.w	8004f1e <_dtoa_r+0x896>
 8004d0c:	f1c0 0320 	rsb	r3, r0, #32
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	f340 83a6 	ble.w	8005462 <_dtoa_r+0xdda>
 8004d16:	f1c0 001c 	rsb	r0, r0, #28
 8004d1a:	4481      	add	r9, r0
 8004d1c:	4404      	add	r4, r0
 8004d1e:	4480      	add	r8, r0
 8004d20:	f1b9 0f00 	cmp.w	r9, #0
 8004d24:	dd05      	ble.n	8004d32 <_dtoa_r+0x6aa>
 8004d26:	4651      	mov	r1, sl
 8004d28:	464a      	mov	r2, r9
 8004d2a:	4658      	mov	r0, fp
 8004d2c:	f001 fab2 	bl	8006294 <__lshift>
 8004d30:	4682      	mov	sl, r0
 8004d32:	f1b8 0f00 	cmp.w	r8, #0
 8004d36:	dd05      	ble.n	8004d44 <_dtoa_r+0x6bc>
 8004d38:	4631      	mov	r1, r6
 8004d3a:	4642      	mov	r2, r8
 8004d3c:	4658      	mov	r0, fp
 8004d3e:	f001 faa9 	bl	8006294 <__lshift>
 8004d42:	4606      	mov	r6, r0
 8004d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d173      	bne.n	8004e32 <_dtoa_r+0x7aa>
 8004d4a:	9b06      	ldr	r3, [sp, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f340 8209 	ble.w	8005164 <_dtoa_r+0xadc>
 8004d52:	9b07      	ldr	r3, [sp, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8085 	beq.w	8004e64 <_dtoa_r+0x7dc>
 8004d5a:	2c00      	cmp	r4, #0
 8004d5c:	f300 8160 	bgt.w	8005020 <_dtoa_r+0x998>
 8004d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f040 81c8 	bne.w	80050f8 <_dtoa_r+0xa70>
 8004d68:	46a8      	mov	r8, r5
 8004d6a:	9a02      	ldr	r2, [sp, #8]
 8004d6c:	9f04      	ldr	r7, [sp, #16]
 8004d6e:	f002 0201 	and.w	r2, r2, #1
 8004d72:	9209      	str	r2, [sp, #36]	; 0x24
 8004d74:	9a06      	ldr	r2, [sp, #24]
 8004d76:	1e7b      	subs	r3, r7, #1
 8004d78:	441a      	add	r2, r3
 8004d7a:	9207      	str	r2, [sp, #28]
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4650      	mov	r0, sl
 8004d80:	f7ff fbee 	bl	8004560 <quorem>
 8004d84:	4629      	mov	r1, r5
 8004d86:	4681      	mov	r9, r0
 8004d88:	9008      	str	r0, [sp, #32]
 8004d8a:	4650      	mov	r0, sl
 8004d8c:	f001 fad8 	bl	8006340 <__mcmp>
 8004d90:	4631      	mov	r1, r6
 8004d92:	9002      	str	r0, [sp, #8]
 8004d94:	4642      	mov	r2, r8
 8004d96:	4658      	mov	r0, fp
 8004d98:	f001 faee 	bl	8006378 <__mdiff>
 8004d9c:	68c3      	ldr	r3, [r0, #12]
 8004d9e:	4604      	mov	r4, r0
 8004da0:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8004da4:	4601      	mov	r1, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f040 81d7 	bne.w	800515a <_dtoa_r+0xad2>
 8004dac:	4650      	mov	r0, sl
 8004dae:	f001 fac7 	bl	8006340 <__mcmp>
 8004db2:	4621      	mov	r1, r4
 8004db4:	9006      	str	r0, [sp, #24]
 8004db6:	4658      	mov	r0, fp
 8004db8:	f001 f886 	bl	8005ec8 <_Bfree>
 8004dbc:	9b06      	ldr	r3, [sp, #24]
 8004dbe:	b933      	cbnz	r3, 8004dce <_dtoa_r+0x746>
 8004dc0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004dc2:	b922      	cbnz	r2, 8004dce <_dtoa_r+0x746>
 8004dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 831b 	beq.w	8005402 <_dtoa_r+0xd7a>
 8004dcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004dce:	9a02      	ldr	r2, [sp, #8]
 8004dd0:	2a00      	cmp	r2, #0
 8004dd2:	f2c0 8220 	blt.w	8005216 <_dtoa_r+0xb8e>
 8004dd6:	d105      	bne.n	8004de4 <_dtoa_r+0x75c>
 8004dd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004dda:	b91a      	cbnz	r2, 8004de4 <_dtoa_r+0x75c>
 8004ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dde:	2a00      	cmp	r2, #0
 8004de0:	f000 8219 	beq.w	8005216 <_dtoa_r+0xb8e>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f107 0401 	add.w	r4, r7, #1
 8004dea:	f300 8225 	bgt.w	8005238 <_dtoa_r+0xbb0>
 8004dee:	9b07      	ldr	r3, [sp, #28]
 8004df0:	f887 9000 	strb.w	r9, [r7]
 8004df4:	42bb      	cmp	r3, r7
 8004df6:	f000 822e 	beq.w	8005256 <_dtoa_r+0xbce>
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	220a      	movs	r2, #10
 8004e00:	4658      	mov	r0, fp
 8004e02:	f001 f86b 	bl	8005edc <__multadd>
 8004e06:	4545      	cmp	r5, r8
 8004e08:	4682      	mov	sl, r0
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	f04f 020a 	mov.w	r2, #10
 8004e14:	4658      	mov	r0, fp
 8004e16:	f000 819a 	beq.w	800514e <_dtoa_r+0xac6>
 8004e1a:	f001 f85f 	bl	8005edc <__multadd>
 8004e1e:	4641      	mov	r1, r8
 8004e20:	4605      	mov	r5, r0
 8004e22:	2300      	movs	r3, #0
 8004e24:	220a      	movs	r2, #10
 8004e26:	4658      	mov	r0, fp
 8004e28:	f001 f858 	bl	8005edc <__multadd>
 8004e2c:	4627      	mov	r7, r4
 8004e2e:	4680      	mov	r8, r0
 8004e30:	e7a4      	b.n	8004d7c <_dtoa_r+0x6f4>
 8004e32:	4631      	mov	r1, r6
 8004e34:	4650      	mov	r0, sl
 8004e36:	f001 fa83 	bl	8006340 <__mcmp>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	da85      	bge.n	8004d4a <_dtoa_r+0x6c2>
 8004e3e:	9f05      	ldr	r7, [sp, #20]
 8004e40:	4651      	mov	r1, sl
 8004e42:	2300      	movs	r3, #0
 8004e44:	220a      	movs	r2, #10
 8004e46:	4658      	mov	r0, fp
 8004e48:	3f01      	subs	r7, #1
 8004e4a:	9705      	str	r7, [sp, #20]
 8004e4c:	f001 f846 	bl	8005edc <__multadd>
 8004e50:	9b07      	ldr	r3, [sp, #28]
 8004e52:	4682      	mov	sl, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f040 82e4 	bne.w	8005422 <_dtoa_r+0xd9a>
 8004e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f340 82ec 	ble.w	800543a <_dtoa_r+0xdb2>
 8004e62:	9306      	str	r3, [sp, #24]
 8004e64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004e68:	9f06      	ldr	r7, [sp, #24]
 8004e6a:	4644      	mov	r4, r8
 8004e6c:	e002      	b.n	8004e74 <_dtoa_r+0x7ec>
 8004e6e:	f001 f835 	bl	8005edc <__multadd>
 8004e72:	4682      	mov	sl, r0
 8004e74:	4631      	mov	r1, r6
 8004e76:	4650      	mov	r0, sl
 8004e78:	f7ff fb72 	bl	8004560 <quorem>
 8004e7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004e80:	f804 9b01 	strb.w	r9, [r4], #1
 8004e84:	eba4 0308 	sub.w	r3, r4, r8
 8004e88:	429f      	cmp	r7, r3
 8004e8a:	f04f 020a 	mov.w	r2, #10
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	4651      	mov	r1, sl
 8004e94:	4658      	mov	r0, fp
 8004e96:	dcea      	bgt.n	8004e6e <_dtoa_r+0x7e6>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	9302      	str	r3, [sp, #8]
 8004e9c:	4651      	mov	r1, sl
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	4658      	mov	r0, fp
 8004ea2:	f001 f9f7 	bl	8006294 <__lshift>
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4682      	mov	sl, r0
 8004eaa:	f001 fa49 	bl	8006340 <__mcmp>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8004eb4:	f340 80bb 	ble.w	800502e <_dtoa_r+0x9a6>
 8004eb8:	9904      	ldr	r1, [sp, #16]
 8004eba:	e007      	b.n	8004ecc <_dtoa_r+0x844>
 8004ebc:	40240000 	.word	0x40240000
 8004ec0:	4299      	cmp	r1, r3
 8004ec2:	f000 815c 	beq.w	800517e <_dtoa_r+0xaf6>
 8004ec6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8004eca:	461c      	mov	r4, r3
 8004ecc:	2a39      	cmp	r2, #57	; 0x39
 8004ece:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 8004ed2:	d0f5      	beq.n	8004ec0 <_dtoa_r+0x838>
 8004ed4:	3201      	adds	r2, #1
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	4631      	mov	r1, r6
 8004eda:	4658      	mov	r0, fp
 8004edc:	f000 fff4 	bl	8005ec8 <_Bfree>
 8004ee0:	b155      	cbz	r5, 8004ef8 <_dtoa_r+0x870>
 8004ee2:	9902      	ldr	r1, [sp, #8]
 8004ee4:	b121      	cbz	r1, 8004ef0 <_dtoa_r+0x868>
 8004ee6:	42a9      	cmp	r1, r5
 8004ee8:	d002      	beq.n	8004ef0 <_dtoa_r+0x868>
 8004eea:	4658      	mov	r0, fp
 8004eec:	f000 ffec 	bl	8005ec8 <_Bfree>
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	4658      	mov	r0, fp
 8004ef4:	f000 ffe8 	bl	8005ec8 <_Bfree>
 8004ef8:	4651      	mov	r1, sl
 8004efa:	4658      	mov	r0, fp
 8004efc:	f000 ffe4 	bl	8005ec8 <_Bfree>
 8004f00:	2200      	movs	r2, #0
 8004f02:	9b05      	ldr	r3, [sp, #20]
 8004f04:	7022      	strb	r2, [r4, #0]
 8004f06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f08:	3301      	adds	r3, #1
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f43f abf2 	beq.w	80046f8 <_dtoa_r+0x70>
 8004f14:	9804      	ldr	r0, [sp, #16]
 8004f16:	601c      	str	r4, [r3, #0]
 8004f18:	b017      	add	sp, #92	; 0x5c
 8004f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1e:	201c      	movs	r0, #28
 8004f20:	4481      	add	r9, r0
 8004f22:	4404      	add	r4, r0
 8004f24:	4480      	add	r8, r0
 8004f26:	e6fb      	b.n	8004d20 <_dtoa_r+0x698>
 8004f28:	4601      	mov	r1, r0
 8004f2a:	4658      	mov	r0, fp
 8004f2c:	f001 f962 	bl	80061f4 <__pow5mult>
 8004f30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	4606      	mov	r6, r0
 8004f36:	f340 80f3 	ble.w	8005120 <_dtoa_r+0xa98>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3e:	6933      	ldr	r3, [r6, #16]
 8004f40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004f44:	6918      	ldr	r0, [r3, #16]
 8004f46:	f001 f855 	bl	8005ff4 <__hi0bits>
 8004f4a:	f1c0 0020 	rsb	r0, r0, #32
 8004f4e:	e6d8      	b.n	8004d02 <_dtoa_r+0x67a>
 8004f50:	900a      	str	r0, [sp, #40]	; 0x28
 8004f52:	e43d      	b.n	80047d0 <_dtoa_r+0x148>
 8004f54:	2501      	movs	r5, #1
 8004f56:	e456      	b.n	8004806 <_dtoa_r+0x17e>
 8004f58:	f1c3 0620 	rsb	r6, r3, #32
 8004f5c:	9b02      	ldr	r3, [sp, #8]
 8004f5e:	fa03 f006 	lsl.w	r0, r3, r6
 8004f62:	f7ff bbeb 	b.w	800473c <_dtoa_r+0xb4>
 8004f66:	2300      	movs	r3, #0
 8004f68:	9307      	str	r3, [sp, #28]
 8004f6a:	9b05      	ldr	r3, [sp, #20]
 8004f6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f6e:	4413      	add	r3, r2
 8004f70:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f72:	3301      	adds	r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	461e      	mov	r6, r3
 8004f78:	9306      	str	r3, [sp, #24]
 8004f7a:	bfb8      	it	lt
 8004f7c:	2601      	movlt	r6, #1
 8004f7e:	2100      	movs	r1, #0
 8004f80:	2e17      	cmp	r6, #23
 8004f82:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 8004f86:	9c06      	ldr	r4, [sp, #24]
 8004f88:	f77f aca4 	ble.w	80048d4 <_dtoa_r+0x24c>
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	2304      	movs	r3, #4
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	f103 0014 	add.w	r0, r3, #20
 8004f96:	42b0      	cmp	r0, r6
 8004f98:	4611      	mov	r1, r2
 8004f9a:	f102 0201 	add.w	r2, r2, #1
 8004f9e:	d9f7      	bls.n	8004f90 <_dtoa_r+0x908>
 8004fa0:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 8004fa4:	e496      	b.n	80048d4 <_dtoa_r+0x24c>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9307      	str	r3, [sp, #28]
 8004faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f340 80ed 	ble.w	800518c <_dtoa_r+0xb04>
 8004fb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fb4:	9306      	str	r3, [sp, #24]
 8004fb6:	461e      	mov	r6, r3
 8004fb8:	e7e1      	b.n	8004f7e <_dtoa_r+0x8f6>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	9307      	str	r3, [sp, #28]
 8004fbe:	e7f4      	b.n	8004faa <_dtoa_r+0x922>
 8004fc0:	9b02      	ldr	r3, [sp, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f47f ae9c 	bne.w	8004d00 <_dtoa_r+0x678>
 8004fc8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004fcc:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f040 8199 	bne.w	8005308 <_dtoa_r+0xc80>
 8004fd6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8004fda:	0d1b      	lsrs	r3, r3, #20
 8004fdc:	051b      	lsls	r3, r3, #20
 8004fde:	b123      	cbz	r3, 8004fea <_dtoa_r+0x962>
 8004fe0:	f109 0901 	add.w	r9, r9, #1
 8004fe4:	f108 0801 	add.w	r8, r8, #1
 8004fe8:	2301      	movs	r3, #1
 8004fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fec:	9309      	str	r3, [sp, #36]	; 0x24
 8004fee:	2a00      	cmp	r2, #0
 8004ff0:	f43f ae86 	beq.w	8004d00 <_dtoa_r+0x678>
 8004ff4:	e7a3      	b.n	8004f3e <_dtoa_r+0x8b6>
 8004ff6:	463a      	mov	r2, r7
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	4658      	mov	r0, fp
 8004ffc:	f001 f8fa 	bl	80061f4 <__pow5mult>
 8005000:	4652      	mov	r2, sl
 8005002:	4601      	mov	r1, r0
 8005004:	4605      	mov	r5, r0
 8005006:	4658      	mov	r0, fp
 8005008:	f001 f84e 	bl	80060a8 <__multiply>
 800500c:	4651      	mov	r1, sl
 800500e:	4607      	mov	r7, r0
 8005010:	4658      	mov	r0, fp
 8005012:	f000 ff59 	bl	8005ec8 <_Bfree>
 8005016:	46ba      	mov	sl, r7
 8005018:	2e00      	cmp	r6, #0
 800501a:	f43f ae64 	beq.w	8004ce6 <_dtoa_r+0x65e>
 800501e:	e65c      	b.n	8004cda <_dtoa_r+0x652>
 8005020:	4629      	mov	r1, r5
 8005022:	4622      	mov	r2, r4
 8005024:	4658      	mov	r0, fp
 8005026:	f001 f935 	bl	8006294 <__lshift>
 800502a:	4605      	mov	r5, r0
 800502c:	e698      	b.n	8004d60 <_dtoa_r+0x6d8>
 800502e:	d107      	bne.n	8005040 <_dtoa_r+0x9b8>
 8005030:	f019 0f01 	tst.w	r9, #1
 8005034:	f47f af40 	bne.w	8004eb8 <_dtoa_r+0x830>
 8005038:	e002      	b.n	8005040 <_dtoa_r+0x9b8>
 800503a:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 800503e:	461c      	mov	r4, r3
 8005040:	2a30      	cmp	r2, #48	; 0x30
 8005042:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 8005046:	d0f8      	beq.n	800503a <_dtoa_r+0x9b2>
 8005048:	e746      	b.n	8004ed8 <_dtoa_r+0x850>
 800504a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800504c:	2a00      	cmp	r2, #0
 800504e:	f000 8153 	beq.w	80052f8 <_dtoa_r+0xc70>
 8005052:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005056:	464c      	mov	r4, r9
 8005058:	4498      	add	r8, r3
 800505a:	4499      	add	r9, r3
 800505c:	9f08      	ldr	r7, [sp, #32]
 800505e:	e600      	b.n	8004c62 <_dtoa_r+0x5da>
 8005060:	9b06      	ldr	r3, [sp, #24]
 8005062:	2b00      	cmp	r3, #0
 8005064:	f73f ad49 	bgt.w	8004afa <_dtoa_r+0x472>
 8005068:	f040 80bb 	bne.w	80051e2 <_dtoa_r+0xb5a>
 800506c:	2200      	movs	r2, #0
 800506e:	4bb2      	ldr	r3, [pc, #712]	; (8005338 <_dtoa_r+0xcb0>)
 8005070:	4640      	mov	r0, r8
 8005072:	4649      	mov	r1, r9
 8005074:	f003 f92e 	bl	80082d4 <__aeabi_dmul>
 8005078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800507c:	f003 fbb0 	bl	80087e0 <__aeabi_dcmpge>
 8005080:	9e06      	ldr	r6, [sp, #24]
 8005082:	4635      	mov	r5, r6
 8005084:	2800      	cmp	r0, #0
 8005086:	d175      	bne.n	8005174 <_dtoa_r+0xaec>
 8005088:	9a05      	ldr	r2, [sp, #20]
 800508a:	3201      	adds	r2, #1
 800508c:	9205      	str	r2, [sp, #20]
 800508e:	9a04      	ldr	r2, [sp, #16]
 8005090:	2331      	movs	r3, #49	; 0x31
 8005092:	7013      	strb	r3, [r2, #0]
 8005094:	1c54      	adds	r4, r2, #1
 8005096:	4631      	mov	r1, r6
 8005098:	4658      	mov	r0, fp
 800509a:	f000 ff15 	bl	8005ec8 <_Bfree>
 800509e:	2d00      	cmp	r5, #0
 80050a0:	f47f af26 	bne.w	8004ef0 <_dtoa_r+0x868>
 80050a4:	e728      	b.n	8004ef8 <_dtoa_r+0x870>
 80050a6:	f000 813f 	beq.w	8005328 <_dtoa_r+0xca0>
 80050aa:	9b05      	ldr	r3, [sp, #20]
 80050ac:	425c      	negs	r4, r3
 80050ae:	4ba3      	ldr	r3, [pc, #652]	; (800533c <_dtoa_r+0xcb4>)
 80050b0:	f004 020f 	and.w	r2, r4, #15
 80050b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050c0:	f003 f908 	bl	80082d4 <__aeabi_dmul>
 80050c4:	1124      	asrs	r4, r4, #4
 80050c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050ca:	f000 81bb 	beq.w	8005444 <_dtoa_r+0xdbc>
 80050ce:	4d9c      	ldr	r5, [pc, #624]	; (8005340 <_dtoa_r+0xcb8>)
 80050d0:	2300      	movs	r3, #0
 80050d2:	2602      	movs	r6, #2
 80050d4:	07e2      	lsls	r2, r4, #31
 80050d6:	d505      	bpl.n	80050e4 <_dtoa_r+0xa5c>
 80050d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050dc:	f003 f8fa 	bl	80082d4 <__aeabi_dmul>
 80050e0:	3601      	adds	r6, #1
 80050e2:	2301      	movs	r3, #1
 80050e4:	1064      	asrs	r4, r4, #1
 80050e6:	f105 0508 	add.w	r5, r5, #8
 80050ea:	d1f3      	bne.n	80050d4 <_dtoa_r+0xa4c>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f43f ac39 	beq.w	8004964 <_dtoa_r+0x2dc>
 80050f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050f6:	e435      	b.n	8004964 <_dtoa_r+0x2dc>
 80050f8:	6869      	ldr	r1, [r5, #4]
 80050fa:	4658      	mov	r0, fp
 80050fc:	f000 febe 	bl	8005e7c <_Balloc>
 8005100:	692b      	ldr	r3, [r5, #16]
 8005102:	3302      	adds	r3, #2
 8005104:	009a      	lsls	r2, r3, #2
 8005106:	4604      	mov	r4, r0
 8005108:	f105 010c 	add.w	r1, r5, #12
 800510c:	300c      	adds	r0, #12
 800510e:	f000 fe0f 	bl	8005d30 <memcpy>
 8005112:	4621      	mov	r1, r4
 8005114:	2201      	movs	r2, #1
 8005116:	4658      	mov	r0, fp
 8005118:	f001 f8bc 	bl	8006294 <__lshift>
 800511c:	4680      	mov	r8, r0
 800511e:	e624      	b.n	8004d6a <_dtoa_r+0x6e2>
 8005120:	9b02      	ldr	r3, [sp, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f43f af50 	beq.w	8004fc8 <_dtoa_r+0x940>
 8005128:	e707      	b.n	8004f3a <_dtoa_r+0x8b2>
 800512a:	2400      	movs	r4, #0
 800512c:	f8cb 4044 	str.w	r4, [fp, #68]	; 0x44
 8005130:	4621      	mov	r1, r4
 8005132:	4658      	mov	r0, fp
 8005134:	f000 fea2 	bl	8005e7c <_Balloc>
 8005138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800513c:	930b      	str	r3, [sp, #44]	; 0x2c
 800513e:	9306      	str	r3, [sp, #24]
 8005140:	2301      	movs	r3, #1
 8005142:	9004      	str	r0, [sp, #16]
 8005144:	9421      	str	r4, [sp, #132]	; 0x84
 8005146:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 800514a:	9307      	str	r3, [sp, #28]
 800514c:	e4c4      	b.n	8004ad8 <_dtoa_r+0x450>
 800514e:	f000 fec5 	bl	8005edc <__multadd>
 8005152:	4627      	mov	r7, r4
 8005154:	4605      	mov	r5, r0
 8005156:	4680      	mov	r8, r0
 8005158:	e610      	b.n	8004d7c <_dtoa_r+0x6f4>
 800515a:	4658      	mov	r0, fp
 800515c:	f000 feb4 	bl	8005ec8 <_Bfree>
 8005160:	2301      	movs	r3, #1
 8005162:	e634      	b.n	8004dce <_dtoa_r+0x746>
 8005164:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005166:	2b02      	cmp	r3, #2
 8005168:	f77f adf3 	ble.w	8004d52 <_dtoa_r+0x6ca>
 800516c:	9b06      	ldr	r3, [sp, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 80cc 	beq.w	800530c <_dtoa_r+0xc84>
 8005174:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005176:	9c04      	ldr	r4, [sp, #16]
 8005178:	43db      	mvns	r3, r3
 800517a:	9305      	str	r3, [sp, #20]
 800517c:	e78b      	b.n	8005096 <_dtoa_r+0xa0e>
 800517e:	9a05      	ldr	r2, [sp, #20]
 8005180:	3201      	adds	r2, #1
 8005182:	9205      	str	r2, [sp, #20]
 8005184:	9a04      	ldr	r2, [sp, #16]
 8005186:	2331      	movs	r3, #49	; 0x31
 8005188:	7013      	strb	r3, [r2, #0]
 800518a:	e6a5      	b.n	8004ed8 <_dtoa_r+0x850>
 800518c:	2401      	movs	r4, #1
 800518e:	9421      	str	r4, [sp, #132]	; 0x84
 8005190:	9406      	str	r4, [sp, #24]
 8005192:	f7ff bb9b 	b.w	80048cc <_dtoa_r+0x244>
 8005196:	4630      	mov	r0, r6
 8005198:	f003 f832 	bl	8008200 <__aeabi_i2d>
 800519c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051a0:	f003 f898 	bl	80082d4 <__aeabi_dmul>
 80051a4:	2200      	movs	r2, #0
 80051a6:	4b67      	ldr	r3, [pc, #412]	; (8005344 <_dtoa_r+0xcbc>)
 80051a8:	f002 fede 	bl	8007f68 <__adddf3>
 80051ac:	4606      	mov	r6, r0
 80051ae:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80051b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051b6:	2200      	movs	r2, #0
 80051b8:	4b5f      	ldr	r3, [pc, #380]	; (8005338 <_dtoa_r+0xcb0>)
 80051ba:	f002 fed3 	bl	8007f64 <__aeabi_dsub>
 80051be:	4632      	mov	r2, r6
 80051c0:	463b      	mov	r3, r7
 80051c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c6:	f003 fb15 	bl	80087f4 <__aeabi_dcmpgt>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d146      	bne.n	800525c <_dtoa_r+0xbd4>
 80051ce:	4632      	mov	r2, r6
 80051d0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80051d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051d8:	f003 faee 	bl	80087b8 <__aeabi_dcmplt>
 80051dc:	2800      	cmp	r0, #0
 80051de:	f43f ac77 	beq.w	8004ad0 <_dtoa_r+0x448>
 80051e2:	2600      	movs	r6, #0
 80051e4:	4635      	mov	r5, r6
 80051e6:	e7c5      	b.n	8005174 <_dtoa_r+0xaec>
 80051e8:	2301      	movs	r3, #1
 80051ea:	9307      	str	r3, [sp, #28]
 80051ec:	e6bd      	b.n	8004f6a <_dtoa_r+0x8e2>
 80051ee:	4651      	mov	r1, sl
 80051f0:	9a08      	ldr	r2, [sp, #32]
 80051f2:	4658      	mov	r0, fp
 80051f4:	f000 fffe 	bl	80061f4 <__pow5mult>
 80051f8:	4682      	mov	sl, r0
 80051fa:	e574      	b.n	8004ce6 <_dtoa_r+0x65e>
 80051fc:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005200:	f8dd b018 	ldr.w	fp, [sp, #24]
 8005204:	e678      	b.n	8004ef8 <_dtoa_r+0x870>
 8005206:	9b08      	ldr	r3, [sp, #32]
 8005208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800520a:	1afb      	subs	r3, r7, r3
 800520c:	441a      	add	r2, r3
 800520e:	e9cd 7208 	strd	r7, r2, [sp, #32]
 8005212:	2700      	movs	r7, #0
 8005214:	e51e      	b.n	8004c54 <_dtoa_r+0x5cc>
 8005216:	2b00      	cmp	r3, #0
 8005218:	f107 0401 	add.w	r4, r7, #1
 800521c:	f300 80bc 	bgt.w	8005398 <_dtoa_r+0xd10>
 8005220:	9502      	str	r5, [sp, #8]
 8005222:	f887 9000 	strb.w	r9, [r7]
 8005226:	4645      	mov	r5, r8
 8005228:	e656      	b.n	8004ed8 <_dtoa_r+0x850>
 800522a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800522e:	2602      	movs	r6, #2
 8005230:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005234:	f7ff bb7d 	b.w	8004932 <_dtoa_r+0x2aa>
 8005238:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800523c:	f000 80be 	beq.w	80053bc <_dtoa_r+0xd34>
 8005240:	f109 0901 	add.w	r9, r9, #1
 8005244:	9502      	str	r5, [sp, #8]
 8005246:	f887 9000 	strb.w	r9, [r7]
 800524a:	4645      	mov	r5, r8
 800524c:	e644      	b.n	8004ed8 <_dtoa_r+0x850>
 800524e:	9b06      	ldr	r3, [sp, #24]
 8005250:	eba9 0403 	sub.w	r4, r9, r3
 8005254:	e505      	b.n	8004c62 <_dtoa_r+0x5da>
 8005256:	9502      	str	r5, [sp, #8]
 8005258:	4645      	mov	r5, r8
 800525a:	e61f      	b.n	8004e9c <_dtoa_r+0x814>
 800525c:	2600      	movs	r6, #0
 800525e:	4635      	mov	r5, r6
 8005260:	e712      	b.n	8005088 <_dtoa_r+0xa00>
 8005262:	9a04      	ldr	r2, [sp, #16]
 8005264:	2330      	movs	r3, #48	; 0x30
 8005266:	7013      	strb	r3, [r2, #0]
 8005268:	9b05      	ldr	r3, [sp, #20]
 800526a:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800526e:	3301      	adds	r3, #1
 8005270:	9305      	str	r3, [sp, #20]
 8005272:	4613      	mov	r3, r2
 8005274:	e4de      	b.n	8004c34 <_dtoa_r+0x5ac>
 8005276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800527a:	f003 f82b 	bl	80082d4 <__aeabi_dmul>
 800527e:	9b04      	ldr	r3, [sp, #16]
 8005280:	701d      	strb	r5, [r3, #0]
 8005282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005284:	2b01      	cmp	r3, #1
 8005286:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800528a:	d023      	beq.n	80052d4 <_dtoa_r+0xc4c>
 800528c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800528e:	9a04      	ldr	r2, [sp, #16]
 8005290:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005294:	4413      	add	r3, r2
 8005296:	46c1      	mov	r9, r8
 8005298:	4698      	mov	r8, r3
 800529a:	2200      	movs	r2, #0
 800529c:	4b2a      	ldr	r3, [pc, #168]	; (8005348 <_dtoa_r+0xcc0>)
 800529e:	4630      	mov	r0, r6
 80052a0:	4639      	mov	r1, r7
 80052a2:	f003 f817 	bl	80082d4 <__aeabi_dmul>
 80052a6:	460f      	mov	r7, r1
 80052a8:	4606      	mov	r6, r0
 80052aa:	f003 fac3 	bl	8008834 <__aeabi_d2iz>
 80052ae:	4605      	mov	r5, r0
 80052b0:	f002 ffa6 	bl	8008200 <__aeabi_i2d>
 80052b4:	3530      	adds	r5, #48	; 0x30
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4630      	mov	r0, r6
 80052bc:	4639      	mov	r1, r7
 80052be:	f002 fe51 	bl	8007f64 <__aeabi_dsub>
 80052c2:	f804 5b01 	strb.w	r5, [r4], #1
 80052c6:	4544      	cmp	r4, r8
 80052c8:	4606      	mov	r6, r0
 80052ca:	460f      	mov	r7, r1
 80052cc:	d1e5      	bne.n	800529a <_dtoa_r+0xc12>
 80052ce:	46c8      	mov	r8, r9
 80052d0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80052d4:	4b1d      	ldr	r3, [pc, #116]	; (800534c <_dtoa_r+0xcc4>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052dc:	f002 fe44 	bl	8007f68 <__adddf3>
 80052e0:	4632      	mov	r2, r6
 80052e2:	463b      	mov	r3, r7
 80052e4:	f003 fa68 	bl	80087b8 <__aeabi_dcmplt>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d06d      	beq.n	80053c8 <_dtoa_r+0xd40>
 80052ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80052ee:	9305      	str	r3, [sp, #20]
 80052f0:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 80052f4:	9a04      	ldr	r2, [sp, #16]
 80052f6:	e499      	b.n	8004c2c <_dtoa_r+0x5a4>
 80052f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80052fa:	9f08      	ldr	r7, [sp, #32]
 80052fc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005300:	464c      	mov	r4, r9
 8005302:	4498      	add	r8, r3
 8005304:	4499      	add	r9, r3
 8005306:	e4ac      	b.n	8004c62 <_dtoa_r+0x5da>
 8005308:	2300      	movs	r3, #0
 800530a:	e66e      	b.n	8004fea <_dtoa_r+0x962>
 800530c:	4631      	mov	r1, r6
 800530e:	2205      	movs	r2, #5
 8005310:	4658      	mov	r0, fp
 8005312:	f000 fde3 	bl	8005edc <__multadd>
 8005316:	4601      	mov	r1, r0
 8005318:	4606      	mov	r6, r0
 800531a:	4650      	mov	r0, sl
 800531c:	f001 f810 	bl	8006340 <__mcmp>
 8005320:	2800      	cmp	r0, #0
 8005322:	f73f aeb1 	bgt.w	8005088 <_dtoa_r+0xa00>
 8005326:	e725      	b.n	8005174 <_dtoa_r+0xaec>
 8005328:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800532c:	2602      	movs	r6, #2
 800532e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005332:	f7ff bb17 	b.w	8004964 <_dtoa_r+0x2dc>
 8005336:	bf00      	nop
 8005338:	40140000 	.word	0x40140000
 800533c:	08008c60 	.word	0x08008c60
 8005340:	08008c38 	.word	0x08008c38
 8005344:	401c0000 	.word	0x401c0000
 8005348:	40240000 	.word	0x40240000
 800534c:	3fe00000 	.word	0x3fe00000
 8005350:	9b06      	ldr	r3, [sp, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f43f af1f 	beq.w	8005196 <_dtoa_r+0xb0e>
 8005358:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800535a:	2c00      	cmp	r4, #0
 800535c:	f77f abb8 	ble.w	8004ad0 <_dtoa_r+0x448>
 8005360:	2200      	movs	r2, #0
 8005362:	4b42      	ldr	r3, [pc, #264]	; (800546c <_dtoa_r+0xde4>)
 8005364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005368:	f002 ffb4 	bl	80082d4 <__aeabi_dmul>
 800536c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005370:	1c70      	adds	r0, r6, #1
 8005372:	f002 ff45 	bl	8008200 <__aeabi_i2d>
 8005376:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800537a:	f002 ffab 	bl	80082d4 <__aeabi_dmul>
 800537e:	4b3c      	ldr	r3, [pc, #240]	; (8005470 <_dtoa_r+0xde8>)
 8005380:	2200      	movs	r2, #0
 8005382:	f002 fdf1 	bl	8007f68 <__adddf3>
 8005386:	9b05      	ldr	r3, [sp, #20]
 8005388:	940e      	str	r4, [sp, #56]	; 0x38
 800538a:	3b01      	subs	r3, #1
 800538c:	4606      	mov	r6, r0
 800538e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8005392:	9313      	str	r3, [sp, #76]	; 0x4c
 8005394:	f7ff bb07 	b.w	80049a6 <_dtoa_r+0x31e>
 8005398:	4651      	mov	r1, sl
 800539a:	2201      	movs	r2, #1
 800539c:	4658      	mov	r0, fp
 800539e:	f000 ff79 	bl	8006294 <__lshift>
 80053a2:	4631      	mov	r1, r6
 80053a4:	4682      	mov	sl, r0
 80053a6:	f000 ffcb 	bl	8006340 <__mcmp>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	dd32      	ble.n	8005414 <_dtoa_r+0xd8c>
 80053ae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80053b2:	d003      	beq.n	80053bc <_dtoa_r+0xd34>
 80053b4:	9b08      	ldr	r3, [sp, #32]
 80053b6:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80053ba:	e731      	b.n	8005220 <_dtoa_r+0xb98>
 80053bc:	2239      	movs	r2, #57	; 0x39
 80053be:	9502      	str	r5, [sp, #8]
 80053c0:	703a      	strb	r2, [r7, #0]
 80053c2:	4645      	mov	r5, r8
 80053c4:	9904      	ldr	r1, [sp, #16]
 80053c6:	e581      	b.n	8004ecc <_dtoa_r+0x844>
 80053c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053cc:	2000      	movs	r0, #0
 80053ce:	4929      	ldr	r1, [pc, #164]	; (8005474 <_dtoa_r+0xdec>)
 80053d0:	f002 fdc8 	bl	8007f64 <__aeabi_dsub>
 80053d4:	4632      	mov	r2, r6
 80053d6:	463b      	mov	r3, r7
 80053d8:	f003 fa0c 	bl	80087f4 <__aeabi_dcmpgt>
 80053dc:	b910      	cbnz	r0, 80053e4 <_dtoa_r+0xd5c>
 80053de:	f7ff bb77 	b.w	8004ad0 <_dtoa_r+0x448>
 80053e2:	4614      	mov	r4, r2
 80053e4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80053e8:	2b30      	cmp	r3, #48	; 0x30
 80053ea:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 80053ee:	d0f8      	beq.n	80053e2 <_dtoa_r+0xd5a>
 80053f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053f2:	9305      	str	r3, [sp, #20]
 80053f4:	e580      	b.n	8004ef8 <_dtoa_r+0x870>
 80053f6:	f8dd a008 	ldr.w	sl, [sp, #8]
 80053fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053fc:	9305      	str	r3, [sp, #20]
 80053fe:	9a04      	ldr	r2, [sp, #16]
 8005400:	e414      	b.n	8004c2c <_dtoa_r+0x5a4>
 8005402:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005406:	f107 0401 	add.w	r4, r7, #1
 800540a:	d0d7      	beq.n	80053bc <_dtoa_r+0xd34>
 800540c:	9b02      	ldr	r3, [sp, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	dcd0      	bgt.n	80053b4 <_dtoa_r+0xd2c>
 8005412:	e705      	b.n	8005220 <_dtoa_r+0xb98>
 8005414:	f47f af04 	bne.w	8005220 <_dtoa_r+0xb98>
 8005418:	f019 0f01 	tst.w	r9, #1
 800541c:	f43f af00 	beq.w	8005220 <_dtoa_r+0xb98>
 8005420:	e7c5      	b.n	80053ae <_dtoa_r+0xd26>
 8005422:	4629      	mov	r1, r5
 8005424:	2300      	movs	r3, #0
 8005426:	220a      	movs	r2, #10
 8005428:	4658      	mov	r0, fp
 800542a:	f000 fd57 	bl	8005edc <__multadd>
 800542e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005430:	2b00      	cmp	r3, #0
 8005432:	4605      	mov	r5, r0
 8005434:	dd09      	ble.n	800544a <_dtoa_r+0xdc2>
 8005436:	9306      	str	r3, [sp, #24]
 8005438:	e48f      	b.n	8004d5a <_dtoa_r+0x6d2>
 800543a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800543c:	2b02      	cmp	r3, #2
 800543e:	dc09      	bgt.n	8005454 <_dtoa_r+0xdcc>
 8005440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005442:	e50e      	b.n	8004e62 <_dtoa_r+0x7da>
 8005444:	2602      	movs	r6, #2
 8005446:	f7ff ba8d 	b.w	8004964 <_dtoa_r+0x2dc>
 800544a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800544c:	2b02      	cmp	r3, #2
 800544e:	dc01      	bgt.n	8005454 <_dtoa_r+0xdcc>
 8005450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005452:	e7f0      	b.n	8005436 <_dtoa_r+0xdae>
 8005454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005456:	9306      	str	r3, [sp, #24]
 8005458:	e688      	b.n	800516c <_dtoa_r+0xae4>
 800545a:	4b07      	ldr	r3, [pc, #28]	; (8005478 <_dtoa_r+0xdf0>)
 800545c:	9304      	str	r3, [sp, #16]
 800545e:	f7ff b94b 	b.w	80046f8 <_dtoa_r+0x70>
 8005462:	f43f ac5d 	beq.w	8004d20 <_dtoa_r+0x698>
 8005466:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800546a:	e559      	b.n	8004f20 <_dtoa_r+0x898>
 800546c:	40240000 	.word	0x40240000
 8005470:	401c0000 	.word	0x401c0000
 8005474:	3fe00000 	.word	0x3fe00000
 8005478:	08008c24 	.word	0x08008c24

0800547c <_malloc_trim_r>:
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	4f24      	ldr	r7, [pc, #144]	; (8005510 <_malloc_trim_r+0x94>)
 8005480:	460c      	mov	r4, r1
 8005482:	4606      	mov	r6, r0
 8005484:	f000 fcee 	bl	8005e64 <__malloc_lock>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	685d      	ldr	r5, [r3, #4]
 800548c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 8005490:	310f      	adds	r1, #15
 8005492:	f025 0503 	bic.w	r5, r5, #3
 8005496:	4429      	add	r1, r5
 8005498:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800549c:	f021 010f 	bic.w	r1, r1, #15
 80054a0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80054a4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80054a8:	db07      	blt.n	80054ba <_malloc_trim_r+0x3e>
 80054aa:	2100      	movs	r1, #0
 80054ac:	4630      	mov	r0, r6
 80054ae:	f001 f97d 	bl	80067ac <_sbrk_r>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	442b      	add	r3, r5
 80054b6:	4298      	cmp	r0, r3
 80054b8:	d004      	beq.n	80054c4 <_malloc_trim_r+0x48>
 80054ba:	4630      	mov	r0, r6
 80054bc:	f000 fcd8 	bl	8005e70 <__malloc_unlock>
 80054c0:	2000      	movs	r0, #0
 80054c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c4:	4261      	negs	r1, r4
 80054c6:	4630      	mov	r0, r6
 80054c8:	f001 f970 	bl	80067ac <_sbrk_r>
 80054cc:	3001      	adds	r0, #1
 80054ce:	d00d      	beq.n	80054ec <_malloc_trim_r+0x70>
 80054d0:	4b10      	ldr	r3, [pc, #64]	; (8005514 <_malloc_trim_r+0x98>)
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	1b2d      	subs	r5, r5, r4
 80054d8:	f045 0501 	orr.w	r5, r5, #1
 80054dc:	4630      	mov	r0, r6
 80054de:	1b09      	subs	r1, r1, r4
 80054e0:	6055      	str	r5, [r2, #4]
 80054e2:	6019      	str	r1, [r3, #0]
 80054e4:	f000 fcc4 	bl	8005e70 <__malloc_unlock>
 80054e8:	2001      	movs	r0, #1
 80054ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ec:	2100      	movs	r1, #0
 80054ee:	4630      	mov	r0, r6
 80054f0:	f001 f95c 	bl	80067ac <_sbrk_r>
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	1a83      	subs	r3, r0, r2
 80054f8:	2b0f      	cmp	r3, #15
 80054fa:	ddde      	ble.n	80054ba <_malloc_trim_r+0x3e>
 80054fc:	4c06      	ldr	r4, [pc, #24]	; (8005518 <_malloc_trim_r+0x9c>)
 80054fe:	4905      	ldr	r1, [pc, #20]	; (8005514 <_malloc_trim_r+0x98>)
 8005500:	6824      	ldr	r4, [r4, #0]
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	1b00      	subs	r0, r0, r4
 8005508:	6053      	str	r3, [r2, #4]
 800550a:	6008      	str	r0, [r1, #0]
 800550c:	e7d5      	b.n	80054ba <_malloc_trim_r+0x3e>
 800550e:	bf00      	nop
 8005510:	20000430 	.word	0x20000430
 8005514:	200009c0 	.word	0x200009c0
 8005518:	20000838 	.word	0x20000838

0800551c <_free_r>:
 800551c:	2900      	cmp	r1, #0
 800551e:	d053      	beq.n	80055c8 <_free_r+0xac>
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	460c      	mov	r4, r1
 8005524:	4606      	mov	r6, r0
 8005526:	f000 fc9d 	bl	8005e64 <__malloc_lock>
 800552a:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800552e:	4f71      	ldr	r7, [pc, #452]	; (80056f4 <_free_r+0x1d8>)
 8005530:	f02c 0101 	bic.w	r1, ip, #1
 8005534:	f1a4 0508 	sub.w	r5, r4, #8
 8005538:	186b      	adds	r3, r5, r1
 800553a:	68b8      	ldr	r0, [r7, #8]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	4298      	cmp	r0, r3
 8005540:	f022 0203 	bic.w	r2, r2, #3
 8005544:	d053      	beq.n	80055ee <_free_r+0xd2>
 8005546:	f01c 0f01 	tst.w	ip, #1
 800554a:	605a      	str	r2, [r3, #4]
 800554c:	eb03 0002 	add.w	r0, r3, r2
 8005550:	d13b      	bne.n	80055ca <_free_r+0xae>
 8005552:	f854 cc08 	ldr.w	ip, [r4, #-8]
 8005556:	6840      	ldr	r0, [r0, #4]
 8005558:	eba5 050c 	sub.w	r5, r5, ip
 800555c:	f107 0e08 	add.w	lr, r7, #8
 8005560:	68ac      	ldr	r4, [r5, #8]
 8005562:	4574      	cmp	r4, lr
 8005564:	4461      	add	r1, ip
 8005566:	f000 0001 	and.w	r0, r0, #1
 800556a:	d075      	beq.n	8005658 <_free_r+0x13c>
 800556c:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8005570:	f8c4 c00c 	str.w	ip, [r4, #12]
 8005574:	f8cc 4008 	str.w	r4, [ip, #8]
 8005578:	b360      	cbz	r0, 80055d4 <_free_r+0xb8>
 800557a:	f041 0301 	orr.w	r3, r1, #1
 800557e:	606b      	str	r3, [r5, #4]
 8005580:	5069      	str	r1, [r5, r1]
 8005582:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005586:	d350      	bcc.n	800562a <_free_r+0x10e>
 8005588:	0a4b      	lsrs	r3, r1, #9
 800558a:	2b04      	cmp	r3, #4
 800558c:	d870      	bhi.n	8005670 <_free_r+0x154>
 800558e:	098b      	lsrs	r3, r1, #6
 8005590:	f103 0439 	add.w	r4, r3, #57	; 0x39
 8005594:	00e4      	lsls	r4, r4, #3
 8005596:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800559a:	1938      	adds	r0, r7, r4
 800559c:	593b      	ldr	r3, [r7, r4]
 800559e:	3808      	subs	r0, #8
 80055a0:	4298      	cmp	r0, r3
 80055a2:	d078      	beq.n	8005696 <_free_r+0x17a>
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	f022 0203 	bic.w	r2, r2, #3
 80055aa:	428a      	cmp	r2, r1
 80055ac:	d971      	bls.n	8005692 <_free_r+0x176>
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4298      	cmp	r0, r3
 80055b2:	d1f7      	bne.n	80055a4 <_free_r+0x88>
 80055b4:	68c3      	ldr	r3, [r0, #12]
 80055b6:	e9c5 0302 	strd	r0, r3, [r5, #8]
 80055ba:	609d      	str	r5, [r3, #8]
 80055bc:	60c5      	str	r5, [r0, #12]
 80055be:	4630      	mov	r0, r6
 80055c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055c4:	f000 bc54 	b.w	8005e70 <__malloc_unlock>
 80055c8:	4770      	bx	lr
 80055ca:	6840      	ldr	r0, [r0, #4]
 80055cc:	f000 0001 	and.w	r0, r0, #1
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1d2      	bne.n	800557a <_free_r+0x5e>
 80055d4:	6898      	ldr	r0, [r3, #8]
 80055d6:	4c48      	ldr	r4, [pc, #288]	; (80056f8 <_free_r+0x1dc>)
 80055d8:	4411      	add	r1, r2
 80055da:	42a0      	cmp	r0, r4
 80055dc:	f041 0201 	orr.w	r2, r1, #1
 80055e0:	d062      	beq.n	80056a8 <_free_r+0x18c>
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	60c3      	str	r3, [r0, #12]
 80055e6:	6098      	str	r0, [r3, #8]
 80055e8:	606a      	str	r2, [r5, #4]
 80055ea:	5069      	str	r1, [r5, r1]
 80055ec:	e7c9      	b.n	8005582 <_free_r+0x66>
 80055ee:	f01c 0f01 	tst.w	ip, #1
 80055f2:	440a      	add	r2, r1
 80055f4:	d107      	bne.n	8005606 <_free_r+0xea>
 80055f6:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80055fa:	1aed      	subs	r5, r5, r3
 80055fc:	441a      	add	r2, r3
 80055fe:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8005602:	60cb      	str	r3, [r1, #12]
 8005604:	6099      	str	r1, [r3, #8]
 8005606:	4b3d      	ldr	r3, [pc, #244]	; (80056fc <_free_r+0x1e0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0101 	orr.w	r1, r2, #1
 800560e:	4293      	cmp	r3, r2
 8005610:	6069      	str	r1, [r5, #4]
 8005612:	60bd      	str	r5, [r7, #8]
 8005614:	d804      	bhi.n	8005620 <_free_r+0x104>
 8005616:	4b3a      	ldr	r3, [pc, #232]	; (8005700 <_free_r+0x1e4>)
 8005618:	4630      	mov	r0, r6
 800561a:	6819      	ldr	r1, [r3, #0]
 800561c:	f7ff ff2e 	bl	800547c <_malloc_trim_r>
 8005620:	4630      	mov	r0, r6
 8005622:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005626:	f000 bc23 	b.w	8005e70 <__malloc_unlock>
 800562a:	08c9      	lsrs	r1, r1, #3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	1c4a      	adds	r2, r1, #1
 8005630:	2301      	movs	r3, #1
 8005632:	1089      	asrs	r1, r1, #2
 8005634:	408b      	lsls	r3, r1
 8005636:	4303      	orrs	r3, r0
 8005638:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 800563c:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	3908      	subs	r1, #8
 8005644:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005648:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
 800564c:	60c5      	str	r5, [r0, #12]
 800564e:	4630      	mov	r0, r6
 8005650:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005654:	f000 bc0c 	b.w	8005e70 <__malloc_unlock>
 8005658:	2800      	cmp	r0, #0
 800565a:	d145      	bne.n	80056e8 <_free_r+0x1cc>
 800565c:	440a      	add	r2, r1
 800565e:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
 8005662:	f042 0001 	orr.w	r0, r2, #1
 8005666:	60cb      	str	r3, [r1, #12]
 8005668:	6099      	str	r1, [r3, #8]
 800566a:	6068      	str	r0, [r5, #4]
 800566c:	50aa      	str	r2, [r5, r2]
 800566e:	e7d7      	b.n	8005620 <_free_r+0x104>
 8005670:	2b14      	cmp	r3, #20
 8005672:	d908      	bls.n	8005686 <_free_r+0x16a>
 8005674:	2b54      	cmp	r3, #84	; 0x54
 8005676:	d81e      	bhi.n	80056b6 <_free_r+0x19a>
 8005678:	0b0b      	lsrs	r3, r1, #12
 800567a:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800567e:	00e4      	lsls	r4, r4, #3
 8005680:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8005684:	e789      	b.n	800559a <_free_r+0x7e>
 8005686:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800568a:	00e4      	lsls	r4, r4, #3
 800568c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8005690:	e783      	b.n	800559a <_free_r+0x7e>
 8005692:	4618      	mov	r0, r3
 8005694:	e78e      	b.n	80055b4 <_free_r+0x98>
 8005696:	1093      	asrs	r3, r2, #2
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	430b      	orrs	r3, r1
 80056a2:	607b      	str	r3, [r7, #4]
 80056a4:	4603      	mov	r3, r0
 80056a6:	e786      	b.n	80055b6 <_free_r+0x9a>
 80056a8:	e9c7 5504 	strd	r5, r5, [r7, #16]
 80056ac:	e9c5 0002 	strd	r0, r0, [r5, #8]
 80056b0:	606a      	str	r2, [r5, #4]
 80056b2:	5069      	str	r1, [r5, r1]
 80056b4:	e7b4      	b.n	8005620 <_free_r+0x104>
 80056b6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80056ba:	d806      	bhi.n	80056ca <_free_r+0x1ae>
 80056bc:	0bcb      	lsrs	r3, r1, #15
 80056be:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80056c2:	00e4      	lsls	r4, r4, #3
 80056c4:	f103 0277 	add.w	r2, r3, #119	; 0x77
 80056c8:	e767      	b.n	800559a <_free_r+0x7e>
 80056ca:	f240 5254 	movw	r2, #1364	; 0x554
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d806      	bhi.n	80056e0 <_free_r+0x1c4>
 80056d2:	0c8b      	lsrs	r3, r1, #18
 80056d4:	f103 047d 	add.w	r4, r3, #125	; 0x7d
 80056d8:	00e4      	lsls	r4, r4, #3
 80056da:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80056de:	e75c      	b.n	800559a <_free_r+0x7e>
 80056e0:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
 80056e4:	227e      	movs	r2, #126	; 0x7e
 80056e6:	e758      	b.n	800559a <_free_r+0x7e>
 80056e8:	f041 0201 	orr.w	r2, r1, #1
 80056ec:	606a      	str	r2, [r5, #4]
 80056ee:	6019      	str	r1, [r3, #0]
 80056f0:	e796      	b.n	8005620 <_free_r+0x104>
 80056f2:	bf00      	nop
 80056f4:	20000430 	.word	0x20000430
 80056f8:	20000438 	.word	0x20000438
 80056fc:	2000083c 	.word	0x2000083c
 8005700:	200009f0 	.word	0x200009f0

08005704 <__localeconv_l>:
 8005704:	30f0      	adds	r0, #240	; 0xf0
 8005706:	4770      	bx	lr

08005708 <_localeconv_r>:
 8005708:	4a04      	ldr	r2, [pc, #16]	; (800571c <_localeconv_r+0x14>)
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <_localeconv_r+0x18>)
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8005710:	2800      	cmp	r0, #0
 8005712:	bf08      	it	eq
 8005714:	4618      	moveq	r0, r3
 8005716:	30f0      	adds	r0, #240	; 0xf0
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000000 	.word	0x20000000
 8005720:	20000840 	.word	0x20000840

08005724 <localeconv>:
 8005724:	4a04      	ldr	r2, [pc, #16]	; (8005738 <localeconv+0x14>)
 8005726:	4b05      	ldr	r3, [pc, #20]	; (800573c <localeconv+0x18>)
 8005728:	6812      	ldr	r2, [r2, #0]
 800572a:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800572c:	2800      	cmp	r0, #0
 800572e:	bf08      	it	eq
 8005730:	4618      	moveq	r0, r3
 8005732:	30f0      	adds	r0, #240	; 0xf0
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000000 	.word	0x20000000
 800573c:	20000840 	.word	0x20000840

08005740 <_malloc_r>:
 8005740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005744:	f101 050b 	add.w	r5, r1, #11
 8005748:	2d16      	cmp	r5, #22
 800574a:	b083      	sub	sp, #12
 800574c:	4606      	mov	r6, r0
 800574e:	d823      	bhi.n	8005798 <_malloc_r+0x58>
 8005750:	2910      	cmp	r1, #16
 8005752:	f200 80b9 	bhi.w	80058c8 <_malloc_r+0x188>
 8005756:	f000 fb85 	bl	8005e64 <__malloc_lock>
 800575a:	2510      	movs	r5, #16
 800575c:	2318      	movs	r3, #24
 800575e:	2002      	movs	r0, #2
 8005760:	4fc5      	ldr	r7, [pc, #788]	; (8005a78 <_malloc_r+0x338>)
 8005762:	443b      	add	r3, r7
 8005764:	f1a3 0208 	sub.w	r2, r3, #8
 8005768:	685c      	ldr	r4, [r3, #4]
 800576a:	4294      	cmp	r4, r2
 800576c:	f000 8166 	beq.w	8005a3c <_malloc_r+0x2fc>
 8005770:	6863      	ldr	r3, [r4, #4]
 8005772:	f023 0303 	bic.w	r3, r3, #3
 8005776:	4423      	add	r3, r4
 8005778:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	60e9      	str	r1, [r5, #12]
 8005780:	f042 0201 	orr.w	r2, r2, #1
 8005784:	608d      	str	r5, [r1, #8]
 8005786:	4630      	mov	r0, r6
 8005788:	605a      	str	r2, [r3, #4]
 800578a:	f000 fb71 	bl	8005e70 <__malloc_unlock>
 800578e:	3408      	adds	r4, #8
 8005790:	4620      	mov	r0, r4
 8005792:	b003      	add	sp, #12
 8005794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005798:	f035 0507 	bics.w	r5, r5, #7
 800579c:	f100 8094 	bmi.w	80058c8 <_malloc_r+0x188>
 80057a0:	42a9      	cmp	r1, r5
 80057a2:	f200 8091 	bhi.w	80058c8 <_malloc_r+0x188>
 80057a6:	f000 fb5d 	bl	8005e64 <__malloc_lock>
 80057aa:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80057ae:	f0c0 8183 	bcc.w	8005ab8 <_malloc_r+0x378>
 80057b2:	0a6b      	lsrs	r3, r5, #9
 80057b4:	f000 808f 	beq.w	80058d6 <_malloc_r+0x196>
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	f200 8146 	bhi.w	8005a4a <_malloc_r+0x30a>
 80057be:	09ab      	lsrs	r3, r5, #6
 80057c0:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80057c4:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 80057c8:	00c3      	lsls	r3, r0, #3
 80057ca:	4fab      	ldr	r7, [pc, #684]	; (8005a78 <_malloc_r+0x338>)
 80057cc:	443b      	add	r3, r7
 80057ce:	f1a3 0108 	sub.w	r1, r3, #8
 80057d2:	685c      	ldr	r4, [r3, #4]
 80057d4:	42a1      	cmp	r1, r4
 80057d6:	d106      	bne.n	80057e6 <_malloc_r+0xa6>
 80057d8:	e00c      	b.n	80057f4 <_malloc_r+0xb4>
 80057da:	2a00      	cmp	r2, #0
 80057dc:	f280 811d 	bge.w	8005a1a <_malloc_r+0x2da>
 80057e0:	68e4      	ldr	r4, [r4, #12]
 80057e2:	42a1      	cmp	r1, r4
 80057e4:	d006      	beq.n	80057f4 <_malloc_r+0xb4>
 80057e6:	6863      	ldr	r3, [r4, #4]
 80057e8:	f023 0303 	bic.w	r3, r3, #3
 80057ec:	1b5a      	subs	r2, r3, r5
 80057ee:	2a0f      	cmp	r2, #15
 80057f0:	ddf3      	ble.n	80057da <_malloc_r+0x9a>
 80057f2:	4660      	mov	r0, ip
 80057f4:	693c      	ldr	r4, [r7, #16]
 80057f6:	f8df c294 	ldr.w	ip, [pc, #660]	; 8005a8c <_malloc_r+0x34c>
 80057fa:	4564      	cmp	r4, ip
 80057fc:	d071      	beq.n	80058e2 <_malloc_r+0x1a2>
 80057fe:	6863      	ldr	r3, [r4, #4]
 8005800:	f023 0303 	bic.w	r3, r3, #3
 8005804:	1b5a      	subs	r2, r3, r5
 8005806:	2a0f      	cmp	r2, #15
 8005808:	f300 8144 	bgt.w	8005a94 <_malloc_r+0x354>
 800580c:	2a00      	cmp	r2, #0
 800580e:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8005812:	f280 8126 	bge.w	8005a62 <_malloc_r+0x322>
 8005816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800581a:	f080 8169 	bcs.w	8005af0 <_malloc_r+0x3b0>
 800581e:	08db      	lsrs	r3, r3, #3
 8005820:	1c59      	adds	r1, r3, #1
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 8005828:	f8c4 8008 	str.w	r8, [r4, #8]
 800582c:	f04f 0e01 	mov.w	lr, #1
 8005830:	109b      	asrs	r3, r3, #2
 8005832:	fa0e f303 	lsl.w	r3, lr, r3
 8005836:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 800583a:	4313      	orrs	r3, r2
 800583c:	f1ae 0208 	sub.w	r2, lr, #8
 8005840:	60e2      	str	r2, [r4, #12]
 8005842:	607b      	str	r3, [r7, #4]
 8005844:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 8005848:	f8c8 400c 	str.w	r4, [r8, #12]
 800584c:	1082      	asrs	r2, r0, #2
 800584e:	2401      	movs	r4, #1
 8005850:	4094      	lsls	r4, r2
 8005852:	429c      	cmp	r4, r3
 8005854:	d84b      	bhi.n	80058ee <_malloc_r+0x1ae>
 8005856:	421c      	tst	r4, r3
 8005858:	d106      	bne.n	8005868 <_malloc_r+0x128>
 800585a:	f020 0003 	bic.w	r0, r0, #3
 800585e:	0064      	lsls	r4, r4, #1
 8005860:	421c      	tst	r4, r3
 8005862:	f100 0004 	add.w	r0, r0, #4
 8005866:	d0fa      	beq.n	800585e <_malloc_r+0x11e>
 8005868:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800586c:	46ce      	mov	lr, r9
 800586e:	4680      	mov	r8, r0
 8005870:	f8de 300c 	ldr.w	r3, [lr, #12]
 8005874:	459e      	cmp	lr, r3
 8005876:	d107      	bne.n	8005888 <_malloc_r+0x148>
 8005878:	e122      	b.n	8005ac0 <_malloc_r+0x380>
 800587a:	2a00      	cmp	r2, #0
 800587c:	f280 8129 	bge.w	8005ad2 <_malloc_r+0x392>
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	459e      	cmp	lr, r3
 8005884:	f000 811c 	beq.w	8005ac0 <_malloc_r+0x380>
 8005888:	6859      	ldr	r1, [r3, #4]
 800588a:	f021 0103 	bic.w	r1, r1, #3
 800588e:	1b4a      	subs	r2, r1, r5
 8005890:	2a0f      	cmp	r2, #15
 8005892:	ddf2      	ble.n	800587a <_malloc_r+0x13a>
 8005894:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 8005898:	195c      	adds	r4, r3, r5
 800589a:	f045 0501 	orr.w	r5, r5, #1
 800589e:	605d      	str	r5, [r3, #4]
 80058a0:	f042 0501 	orr.w	r5, r2, #1
 80058a4:	f8c8 e00c 	str.w	lr, [r8, #12]
 80058a8:	4630      	mov	r0, r6
 80058aa:	f8ce 8008 	str.w	r8, [lr, #8]
 80058ae:	e9c7 4404 	strd	r4, r4, [r7, #16]
 80058b2:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 80058b6:	6065      	str	r5, [r4, #4]
 80058b8:	505a      	str	r2, [r3, r1]
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	f000 fad8 	bl	8005e70 <__malloc_unlock>
 80058c0:	9b01      	ldr	r3, [sp, #4]
 80058c2:	f103 0408 	add.w	r4, r3, #8
 80058c6:	e763      	b.n	8005790 <_malloc_r+0x50>
 80058c8:	2400      	movs	r4, #0
 80058ca:	230c      	movs	r3, #12
 80058cc:	4620      	mov	r0, r4
 80058ce:	6033      	str	r3, [r6, #0]
 80058d0:	b003      	add	sp, #12
 80058d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058da:	2040      	movs	r0, #64	; 0x40
 80058dc:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 80058e0:	e773      	b.n	80057ca <_malloc_r+0x8a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	1082      	asrs	r2, r0, #2
 80058e6:	2401      	movs	r4, #1
 80058e8:	4094      	lsls	r4, r2
 80058ea:	429c      	cmp	r4, r3
 80058ec:	d9b3      	bls.n	8005856 <_malloc_r+0x116>
 80058ee:	68bc      	ldr	r4, [r7, #8]
 80058f0:	6863      	ldr	r3, [r4, #4]
 80058f2:	f023 0903 	bic.w	r9, r3, #3
 80058f6:	45a9      	cmp	r9, r5
 80058f8:	d303      	bcc.n	8005902 <_malloc_r+0x1c2>
 80058fa:	eba9 0305 	sub.w	r3, r9, r5
 80058fe:	2b0f      	cmp	r3, #15
 8005900:	dc7b      	bgt.n	80059fa <_malloc_r+0x2ba>
 8005902:	4b5e      	ldr	r3, [pc, #376]	; (8005a7c <_malloc_r+0x33c>)
 8005904:	f8df a188 	ldr.w	sl, [pc, #392]	; 8005a90 <_malloc_r+0x350>
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	f8da 3000 	ldr.w	r3, [sl]
 800590e:	3301      	adds	r3, #1
 8005910:	eb05 0802 	add.w	r8, r5, r2
 8005914:	f000 8148 	beq.w	8005ba8 <_malloc_r+0x468>
 8005918:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 800591c:	f108 080f 	add.w	r8, r8, #15
 8005920:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 8005924:	f028 080f 	bic.w	r8, r8, #15
 8005928:	4641      	mov	r1, r8
 800592a:	4630      	mov	r0, r6
 800592c:	f000 ff3e 	bl	80067ac <_sbrk_r>
 8005930:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005934:	4683      	mov	fp, r0
 8005936:	f000 8104 	beq.w	8005b42 <_malloc_r+0x402>
 800593a:	eb04 0009 	add.w	r0, r4, r9
 800593e:	4558      	cmp	r0, fp
 8005940:	f200 80fd 	bhi.w	8005b3e <_malloc_r+0x3fe>
 8005944:	4a4e      	ldr	r2, [pc, #312]	; (8005a80 <_malloc_r+0x340>)
 8005946:	6813      	ldr	r3, [r2, #0]
 8005948:	4443      	add	r3, r8
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	f000 814d 	beq.w	8005bea <_malloc_r+0x4aa>
 8005950:	f8da 1000 	ldr.w	r1, [sl]
 8005954:	3101      	adds	r1, #1
 8005956:	bf1b      	ittet	ne
 8005958:	ebab 0000 	subne.w	r0, fp, r0
 800595c:	181b      	addne	r3, r3, r0
 800595e:	f8ca b000 	streq.w	fp, [sl]
 8005962:	6013      	strne	r3, [r2, #0]
 8005964:	f01b 0307 	ands.w	r3, fp, #7
 8005968:	f000 8134 	beq.w	8005bd4 <_malloc_r+0x494>
 800596c:	f1c3 0108 	rsb	r1, r3, #8
 8005970:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005974:	448b      	add	fp, r1
 8005976:	3308      	adds	r3, #8
 8005978:	44d8      	add	r8, fp
 800597a:	f3c8 080b 	ubfx	r8, r8, #0, #12
 800597e:	eba3 0808 	sub.w	r8, r3, r8
 8005982:	4641      	mov	r1, r8
 8005984:	4630      	mov	r0, r6
 8005986:	9201      	str	r2, [sp, #4]
 8005988:	f000 ff10 	bl	80067ac <_sbrk_r>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	9a01      	ldr	r2, [sp, #4]
 8005990:	f000 8146 	beq.w	8005c20 <_malloc_r+0x4e0>
 8005994:	eba0 010b 	sub.w	r1, r0, fp
 8005998:	4441      	add	r1, r8
 800599a:	f041 0101 	orr.w	r1, r1, #1
 800599e:	6813      	ldr	r3, [r2, #0]
 80059a0:	f8c7 b008 	str.w	fp, [r7, #8]
 80059a4:	4443      	add	r3, r8
 80059a6:	42bc      	cmp	r4, r7
 80059a8:	f8cb 1004 	str.w	r1, [fp, #4]
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	d015      	beq.n	80059dc <_malloc_r+0x29c>
 80059b0:	f1b9 0f0f 	cmp.w	r9, #15
 80059b4:	f240 8130 	bls.w	8005c18 <_malloc_r+0x4d8>
 80059b8:	6860      	ldr	r0, [r4, #4]
 80059ba:	f1a9 010c 	sub.w	r1, r9, #12
 80059be:	f021 0107 	bic.w	r1, r1, #7
 80059c2:	f000 0001 	and.w	r0, r0, #1
 80059c6:	eb04 0c01 	add.w	ip, r4, r1
 80059ca:	4308      	orrs	r0, r1
 80059cc:	f04f 0e05 	mov.w	lr, #5
 80059d0:	290f      	cmp	r1, #15
 80059d2:	6060      	str	r0, [r4, #4]
 80059d4:	e9cc ee01 	strd	lr, lr, [ip, #4]
 80059d8:	f200 813a 	bhi.w	8005c50 <_malloc_r+0x510>
 80059dc:	4a29      	ldr	r2, [pc, #164]	; (8005a84 <_malloc_r+0x344>)
 80059de:	482a      	ldr	r0, [pc, #168]	; (8005a88 <_malloc_r+0x348>)
 80059e0:	6811      	ldr	r1, [r2, #0]
 80059e2:	68bc      	ldr	r4, [r7, #8]
 80059e4:	428b      	cmp	r3, r1
 80059e6:	6801      	ldr	r1, [r0, #0]
 80059e8:	bf88      	it	hi
 80059ea:	6013      	strhi	r3, [r2, #0]
 80059ec:	6862      	ldr	r2, [r4, #4]
 80059ee:	428b      	cmp	r3, r1
 80059f0:	f022 0203 	bic.w	r2, r2, #3
 80059f4:	bf88      	it	hi
 80059f6:	6003      	strhi	r3, [r0, #0]
 80059f8:	e0a7      	b.n	8005b4a <_malloc_r+0x40a>
 80059fa:	1962      	adds	r2, r4, r5
 80059fc:	f043 0301 	orr.w	r3, r3, #1
 8005a00:	f045 0501 	orr.w	r5, r5, #1
 8005a04:	6065      	str	r5, [r4, #4]
 8005a06:	4630      	mov	r0, r6
 8005a08:	60ba      	str	r2, [r7, #8]
 8005a0a:	6053      	str	r3, [r2, #4]
 8005a0c:	f000 fa30 	bl	8005e70 <__malloc_unlock>
 8005a10:	3408      	adds	r4, #8
 8005a12:	4620      	mov	r0, r4
 8005a14:	b003      	add	sp, #12
 8005a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1a:	4423      	add	r3, r4
 8005a1c:	68e1      	ldr	r1, [r4, #12]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	68a5      	ldr	r5, [r4, #8]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	60e9      	str	r1, [r5, #12]
 8005a28:	4630      	mov	r0, r6
 8005a2a:	608d      	str	r5, [r1, #8]
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	f000 fa1f 	bl	8005e70 <__malloc_unlock>
 8005a32:	3408      	adds	r4, #8
 8005a34:	4620      	mov	r0, r4
 8005a36:	b003      	add	sp, #12
 8005a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3c:	68dc      	ldr	r4, [r3, #12]
 8005a3e:	42a3      	cmp	r3, r4
 8005a40:	bf08      	it	eq
 8005a42:	3002      	addeq	r0, #2
 8005a44:	f43f aed6 	beq.w	80057f4 <_malloc_r+0xb4>
 8005a48:	e692      	b.n	8005770 <_malloc_r+0x30>
 8005a4a:	2b14      	cmp	r3, #20
 8005a4c:	d971      	bls.n	8005b32 <_malloc_r+0x3f2>
 8005a4e:	2b54      	cmp	r3, #84	; 0x54
 8005a50:	f200 80ad 	bhi.w	8005bae <_malloc_r+0x46e>
 8005a54:	0b2b      	lsrs	r3, r5, #12
 8005a56:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8005a5a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8005a5e:	00c3      	lsls	r3, r0, #3
 8005a60:	e6b3      	b.n	80057ca <_malloc_r+0x8a>
 8005a62:	4423      	add	r3, r4
 8005a64:	4630      	mov	r0, r6
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	f042 0201 	orr.w	r2, r2, #1
 8005a6c:	605a      	str	r2, [r3, #4]
 8005a6e:	3408      	adds	r4, #8
 8005a70:	f000 f9fe 	bl	8005e70 <__malloc_unlock>
 8005a74:	e68c      	b.n	8005790 <_malloc_r+0x50>
 8005a76:	bf00      	nop
 8005a78:	20000430 	.word	0x20000430
 8005a7c:	200009f0 	.word	0x200009f0
 8005a80:	200009c0 	.word	0x200009c0
 8005a84:	200009e8 	.word	0x200009e8
 8005a88:	200009ec 	.word	0x200009ec
 8005a8c:	20000438 	.word	0x20000438
 8005a90:	20000838 	.word	0x20000838
 8005a94:	1961      	adds	r1, r4, r5
 8005a96:	f045 0e01 	orr.w	lr, r5, #1
 8005a9a:	f042 0501 	orr.w	r5, r2, #1
 8005a9e:	f8c4 e004 	str.w	lr, [r4, #4]
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8005aa8:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8005aac:	604d      	str	r5, [r1, #4]
 8005aae:	50e2      	str	r2, [r4, r3]
 8005ab0:	f000 f9de 	bl	8005e70 <__malloc_unlock>
 8005ab4:	3408      	adds	r4, #8
 8005ab6:	e66b      	b.n	8005790 <_malloc_r+0x50>
 8005ab8:	08e8      	lsrs	r0, r5, #3
 8005aba:	f105 0308 	add.w	r3, r5, #8
 8005abe:	e64f      	b.n	8005760 <_malloc_r+0x20>
 8005ac0:	f108 0801 	add.w	r8, r8, #1
 8005ac4:	f018 0f03 	tst.w	r8, #3
 8005ac8:	f10e 0e08 	add.w	lr, lr, #8
 8005acc:	f47f aed0 	bne.w	8005870 <_malloc_r+0x130>
 8005ad0:	e052      	b.n	8005b78 <_malloc_r+0x438>
 8005ad2:	4419      	add	r1, r3
 8005ad4:	461c      	mov	r4, r3
 8005ad6:	684a      	ldr	r2, [r1, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	604a      	str	r2, [r1, #4]
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	60eb      	str	r3, [r5, #12]
 8005ae8:	609d      	str	r5, [r3, #8]
 8005aea:	f000 f9c1 	bl	8005e70 <__malloc_unlock>
 8005aee:	e64f      	b.n	8005790 <_malloc_r+0x50>
 8005af0:	0a5a      	lsrs	r2, r3, #9
 8005af2:	2a04      	cmp	r2, #4
 8005af4:	d935      	bls.n	8005b62 <_malloc_r+0x422>
 8005af6:	2a14      	cmp	r2, #20
 8005af8:	d86f      	bhi.n	8005bda <_malloc_r+0x49a>
 8005afa:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8005afe:	00c9      	lsls	r1, r1, #3
 8005b00:	325b      	adds	r2, #91	; 0x5b
 8005b02:	eb07 0e01 	add.w	lr, r7, r1
 8005b06:	5879      	ldr	r1, [r7, r1]
 8005b08:	f1ae 0e08 	sub.w	lr, lr, #8
 8005b0c:	458e      	cmp	lr, r1
 8005b0e:	d058      	beq.n	8005bc2 <_malloc_r+0x482>
 8005b10:	684a      	ldr	r2, [r1, #4]
 8005b12:	f022 0203 	bic.w	r2, r2, #3
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d902      	bls.n	8005b20 <_malloc_r+0x3e0>
 8005b1a:	6889      	ldr	r1, [r1, #8]
 8005b1c:	458e      	cmp	lr, r1
 8005b1e:	d1f7      	bne.n	8005b10 <_malloc_r+0x3d0>
 8005b20:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 8005b2a:	f8ce 4008 	str.w	r4, [lr, #8]
 8005b2e:	60cc      	str	r4, [r1, #12]
 8005b30:	e68c      	b.n	800584c <_malloc_r+0x10c>
 8005b32:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8005b36:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 8005b3a:	00c3      	lsls	r3, r0, #3
 8005b3c:	e645      	b.n	80057ca <_malloc_r+0x8a>
 8005b3e:	42bc      	cmp	r4, r7
 8005b40:	d072      	beq.n	8005c28 <_malloc_r+0x4e8>
 8005b42:	68bc      	ldr	r4, [r7, #8]
 8005b44:	6862      	ldr	r2, [r4, #4]
 8005b46:	f022 0203 	bic.w	r2, r2, #3
 8005b4a:	4295      	cmp	r5, r2
 8005b4c:	eba2 0305 	sub.w	r3, r2, r5
 8005b50:	d802      	bhi.n	8005b58 <_malloc_r+0x418>
 8005b52:	2b0f      	cmp	r3, #15
 8005b54:	f73f af51 	bgt.w	80059fa <_malloc_r+0x2ba>
 8005b58:	4630      	mov	r0, r6
 8005b5a:	f000 f989 	bl	8005e70 <__malloc_unlock>
 8005b5e:	2400      	movs	r4, #0
 8005b60:	e616      	b.n	8005790 <_malloc_r+0x50>
 8005b62:	099a      	lsrs	r2, r3, #6
 8005b64:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8005b68:	00c9      	lsls	r1, r1, #3
 8005b6a:	3238      	adds	r2, #56	; 0x38
 8005b6c:	e7c9      	b.n	8005b02 <_malloc_r+0x3c2>
 8005b6e:	f8d9 9000 	ldr.w	r9, [r9]
 8005b72:	4599      	cmp	r9, r3
 8005b74:	f040 8083 	bne.w	8005c7e <_malloc_r+0x53e>
 8005b78:	f010 0f03 	tst.w	r0, #3
 8005b7c:	f1a9 0308 	sub.w	r3, r9, #8
 8005b80:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8005b84:	d1f3      	bne.n	8005b6e <_malloc_r+0x42e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	ea23 0304 	bic.w	r3, r3, r4
 8005b8c:	607b      	str	r3, [r7, #4]
 8005b8e:	0064      	lsls	r4, r4, #1
 8005b90:	429c      	cmp	r4, r3
 8005b92:	f63f aeac 	bhi.w	80058ee <_malloc_r+0x1ae>
 8005b96:	b91c      	cbnz	r4, 8005ba0 <_malloc_r+0x460>
 8005b98:	e6a9      	b.n	80058ee <_malloc_r+0x1ae>
 8005b9a:	0064      	lsls	r4, r4, #1
 8005b9c:	f108 0804 	add.w	r8, r8, #4
 8005ba0:	421c      	tst	r4, r3
 8005ba2:	d0fa      	beq.n	8005b9a <_malloc_r+0x45a>
 8005ba4:	4640      	mov	r0, r8
 8005ba6:	e65f      	b.n	8005868 <_malloc_r+0x128>
 8005ba8:	f108 0810 	add.w	r8, r8, #16
 8005bac:	e6bc      	b.n	8005928 <_malloc_r+0x1e8>
 8005bae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005bb2:	d826      	bhi.n	8005c02 <_malloc_r+0x4c2>
 8005bb4:	0beb      	lsrs	r3, r5, #15
 8005bb6:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8005bba:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8005bbe:	00c3      	lsls	r3, r0, #3
 8005bc0:	e603      	b.n	80057ca <_malloc_r+0x8a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	1092      	asrs	r2, r2, #2
 8005bc6:	f04f 0801 	mov.w	r8, #1
 8005bca:	fa08 f202 	lsl.w	r2, r8, r2
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	607b      	str	r3, [r7, #4]
 8005bd2:	e7a8      	b.n	8005b26 <_malloc_r+0x3e6>
 8005bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bd8:	e6ce      	b.n	8005978 <_malloc_r+0x238>
 8005bda:	2a54      	cmp	r2, #84	; 0x54
 8005bdc:	d829      	bhi.n	8005c32 <_malloc_r+0x4f2>
 8005bde:	0b1a      	lsrs	r2, r3, #12
 8005be0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8005be4:	00c9      	lsls	r1, r1, #3
 8005be6:	326e      	adds	r2, #110	; 0x6e
 8005be8:	e78b      	b.n	8005b02 <_malloc_r+0x3c2>
 8005bea:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8005bee:	2900      	cmp	r1, #0
 8005bf0:	f47f aeae 	bne.w	8005950 <_malloc_r+0x210>
 8005bf4:	eb09 0208 	add.w	r2, r9, r8
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	604a      	str	r2, [r1, #4]
 8005c00:	e6ec      	b.n	80059dc <_malloc_r+0x29c>
 8005c02:	f240 5254 	movw	r2, #1364	; 0x554
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d81c      	bhi.n	8005c44 <_malloc_r+0x504>
 8005c0a:	0cab      	lsrs	r3, r5, #18
 8005c0c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8005c10:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8005c14:	00c3      	lsls	r3, r0, #3
 8005c16:	e5d8      	b.n	80057ca <_malloc_r+0x8a>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f8cb 3004 	str.w	r3, [fp, #4]
 8005c1e:	e79b      	b.n	8005b58 <_malloc_r+0x418>
 8005c20:	2101      	movs	r1, #1
 8005c22:	f04f 0800 	mov.w	r8, #0
 8005c26:	e6ba      	b.n	800599e <_malloc_r+0x25e>
 8005c28:	4a16      	ldr	r2, [pc, #88]	; (8005c84 <_malloc_r+0x544>)
 8005c2a:	6813      	ldr	r3, [r2, #0]
 8005c2c:	4443      	add	r3, r8
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	e68e      	b.n	8005950 <_malloc_r+0x210>
 8005c32:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005c36:	d814      	bhi.n	8005c62 <_malloc_r+0x522>
 8005c38:	0bda      	lsrs	r2, r3, #15
 8005c3a:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8005c3e:	00c9      	lsls	r1, r1, #3
 8005c40:	3277      	adds	r2, #119	; 0x77
 8005c42:	e75e      	b.n	8005b02 <_malloc_r+0x3c2>
 8005c44:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8005c48:	207f      	movs	r0, #127	; 0x7f
 8005c4a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8005c4e:	e5bc      	b.n	80057ca <_malloc_r+0x8a>
 8005c50:	f104 0108 	add.w	r1, r4, #8
 8005c54:	4630      	mov	r0, r6
 8005c56:	9201      	str	r2, [sp, #4]
 8005c58:	f7ff fc60 	bl	800551c <_free_r>
 8005c5c:	9a01      	ldr	r2, [sp, #4]
 8005c5e:	6813      	ldr	r3, [r2, #0]
 8005c60:	e6bc      	b.n	80059dc <_malloc_r+0x29c>
 8005c62:	f240 5154 	movw	r1, #1364	; 0x554
 8005c66:	428a      	cmp	r2, r1
 8005c68:	d805      	bhi.n	8005c76 <_malloc_r+0x536>
 8005c6a:	0c9a      	lsrs	r2, r3, #18
 8005c6c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8005c70:	00c9      	lsls	r1, r1, #3
 8005c72:	327c      	adds	r2, #124	; 0x7c
 8005c74:	e745      	b.n	8005b02 <_malloc_r+0x3c2>
 8005c76:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8005c7a:	227e      	movs	r2, #126	; 0x7e
 8005c7c:	e741      	b.n	8005b02 <_malloc_r+0x3c2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	e785      	b.n	8005b8e <_malloc_r+0x44e>
 8005c82:	bf00      	nop
 8005c84:	200009c0 	.word	0x200009c0
	...

08005c90 <memchr>:
 8005c90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005c94:	2a10      	cmp	r2, #16
 8005c96:	db2b      	blt.n	8005cf0 <memchr+0x60>
 8005c98:	f010 0f07 	tst.w	r0, #7
 8005c9c:	d008      	beq.n	8005cb0 <memchr+0x20>
 8005c9e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005ca2:	3a01      	subs	r2, #1
 8005ca4:	428b      	cmp	r3, r1
 8005ca6:	d02d      	beq.n	8005d04 <memchr+0x74>
 8005ca8:	f010 0f07 	tst.w	r0, #7
 8005cac:	b342      	cbz	r2, 8005d00 <memchr+0x70>
 8005cae:	d1f6      	bne.n	8005c9e <memchr+0xe>
 8005cb0:	b4f0      	push	{r4, r5, r6, r7}
 8005cb2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005cb6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005cba:	f022 0407 	bic.w	r4, r2, #7
 8005cbe:	f07f 0700 	mvns.w	r7, #0
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005cc8:	3c08      	subs	r4, #8
 8005cca:	ea85 0501 	eor.w	r5, r5, r1
 8005cce:	ea86 0601 	eor.w	r6, r6, r1
 8005cd2:	fa85 f547 	uadd8	r5, r5, r7
 8005cd6:	faa3 f587 	sel	r5, r3, r7
 8005cda:	fa86 f647 	uadd8	r6, r6, r7
 8005cde:	faa5 f687 	sel	r6, r5, r7
 8005ce2:	b98e      	cbnz	r6, 8005d08 <memchr+0x78>
 8005ce4:	d1ee      	bne.n	8005cc4 <memchr+0x34>
 8005ce6:	bcf0      	pop	{r4, r5, r6, r7}
 8005ce8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005cec:	f002 0207 	and.w	r2, r2, #7
 8005cf0:	b132      	cbz	r2, 8005d00 <memchr+0x70>
 8005cf2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005cf6:	3a01      	subs	r2, #1
 8005cf8:	ea83 0301 	eor.w	r3, r3, r1
 8005cfc:	b113      	cbz	r3, 8005d04 <memchr+0x74>
 8005cfe:	d1f8      	bne.n	8005cf2 <memchr+0x62>
 8005d00:	2000      	movs	r0, #0
 8005d02:	4770      	bx	lr
 8005d04:	3801      	subs	r0, #1
 8005d06:	4770      	bx	lr
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	bf06      	itte	eq
 8005d0c:	4635      	moveq	r5, r6
 8005d0e:	3803      	subeq	r0, #3
 8005d10:	3807      	subne	r0, #7
 8005d12:	f015 0f01 	tst.w	r5, #1
 8005d16:	d107      	bne.n	8005d28 <memchr+0x98>
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005d1e:	bf02      	ittt	eq
 8005d20:	3001      	addeq	r0, #1
 8005d22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005d26:	3001      	addeq	r0, #1
 8005d28:	bcf0      	pop	{r4, r5, r6, r7}
 8005d2a:	3801      	subs	r0, #1
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop

08005d30 <memcpy>:
 8005d30:	4684      	mov	ip, r0
 8005d32:	ea41 0300 	orr.w	r3, r1, r0
 8005d36:	f013 0303 	ands.w	r3, r3, #3
 8005d3a:	d16d      	bne.n	8005e18 <memcpy+0xe8>
 8005d3c:	3a40      	subs	r2, #64	; 0x40
 8005d3e:	d341      	bcc.n	8005dc4 <memcpy+0x94>
 8005d40:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d44:	f840 3b04 	str.w	r3, [r0], #4
 8005d48:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d4c:	f840 3b04 	str.w	r3, [r0], #4
 8005d50:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d54:	f840 3b04 	str.w	r3, [r0], #4
 8005d58:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d5c:	f840 3b04 	str.w	r3, [r0], #4
 8005d60:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d64:	f840 3b04 	str.w	r3, [r0], #4
 8005d68:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d6c:	f840 3b04 	str.w	r3, [r0], #4
 8005d70:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d74:	f840 3b04 	str.w	r3, [r0], #4
 8005d78:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d7c:	f840 3b04 	str.w	r3, [r0], #4
 8005d80:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d84:	f840 3b04 	str.w	r3, [r0], #4
 8005d88:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d8c:	f840 3b04 	str.w	r3, [r0], #4
 8005d90:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d94:	f840 3b04 	str.w	r3, [r0], #4
 8005d98:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d9c:	f840 3b04 	str.w	r3, [r0], #4
 8005da0:	f851 3b04 	ldr.w	r3, [r1], #4
 8005da4:	f840 3b04 	str.w	r3, [r0], #4
 8005da8:	f851 3b04 	ldr.w	r3, [r1], #4
 8005dac:	f840 3b04 	str.w	r3, [r0], #4
 8005db0:	f851 3b04 	ldr.w	r3, [r1], #4
 8005db4:	f840 3b04 	str.w	r3, [r0], #4
 8005db8:	f851 3b04 	ldr.w	r3, [r1], #4
 8005dbc:	f840 3b04 	str.w	r3, [r0], #4
 8005dc0:	3a40      	subs	r2, #64	; 0x40
 8005dc2:	d2bd      	bcs.n	8005d40 <memcpy+0x10>
 8005dc4:	3230      	adds	r2, #48	; 0x30
 8005dc6:	d311      	bcc.n	8005dec <memcpy+0xbc>
 8005dc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8005dcc:	f840 3b04 	str.w	r3, [r0], #4
 8005dd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8005dd4:	f840 3b04 	str.w	r3, [r0], #4
 8005dd8:	f851 3b04 	ldr.w	r3, [r1], #4
 8005ddc:	f840 3b04 	str.w	r3, [r0], #4
 8005de0:	f851 3b04 	ldr.w	r3, [r1], #4
 8005de4:	f840 3b04 	str.w	r3, [r0], #4
 8005de8:	3a10      	subs	r2, #16
 8005dea:	d2ed      	bcs.n	8005dc8 <memcpy+0x98>
 8005dec:	320c      	adds	r2, #12
 8005dee:	d305      	bcc.n	8005dfc <memcpy+0xcc>
 8005df0:	f851 3b04 	ldr.w	r3, [r1], #4
 8005df4:	f840 3b04 	str.w	r3, [r0], #4
 8005df8:	3a04      	subs	r2, #4
 8005dfa:	d2f9      	bcs.n	8005df0 <memcpy+0xc0>
 8005dfc:	3204      	adds	r2, #4
 8005dfe:	d008      	beq.n	8005e12 <memcpy+0xe2>
 8005e00:	07d2      	lsls	r2, r2, #31
 8005e02:	bf1c      	itt	ne
 8005e04:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8005e08:	f800 3b01 	strbne.w	r3, [r0], #1
 8005e0c:	d301      	bcc.n	8005e12 <memcpy+0xe2>
 8005e0e:	880b      	ldrh	r3, [r1, #0]
 8005e10:	8003      	strh	r3, [r0, #0]
 8005e12:	4660      	mov	r0, ip
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	2a08      	cmp	r2, #8
 8005e1a:	d313      	bcc.n	8005e44 <memcpy+0x114>
 8005e1c:	078b      	lsls	r3, r1, #30
 8005e1e:	d08d      	beq.n	8005d3c <memcpy+0xc>
 8005e20:	f010 0303 	ands.w	r3, r0, #3
 8005e24:	d08a      	beq.n	8005d3c <memcpy+0xc>
 8005e26:	f1c3 0304 	rsb	r3, r3, #4
 8005e2a:	1ad2      	subs	r2, r2, r3
 8005e2c:	07db      	lsls	r3, r3, #31
 8005e2e:	bf1c      	itt	ne
 8005e30:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8005e34:	f800 3b01 	strbne.w	r3, [r0], #1
 8005e38:	d380      	bcc.n	8005d3c <memcpy+0xc>
 8005e3a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005e3e:	f820 3b02 	strh.w	r3, [r0], #2
 8005e42:	e77b      	b.n	8005d3c <memcpy+0xc>
 8005e44:	3a04      	subs	r2, #4
 8005e46:	d3d9      	bcc.n	8005dfc <memcpy+0xcc>
 8005e48:	3a01      	subs	r2, #1
 8005e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e4e:	f800 3b01 	strb.w	r3, [r0], #1
 8005e52:	d2f9      	bcs.n	8005e48 <memcpy+0x118>
 8005e54:	780b      	ldrb	r3, [r1, #0]
 8005e56:	7003      	strb	r3, [r0, #0]
 8005e58:	784b      	ldrb	r3, [r1, #1]
 8005e5a:	7043      	strb	r3, [r0, #1]
 8005e5c:	788b      	ldrb	r3, [r1, #2]
 8005e5e:	7083      	strb	r3, [r0, #2]
 8005e60:	4660      	mov	r0, ip
 8005e62:	4770      	bx	lr

08005e64 <__malloc_lock>:
 8005e64:	4801      	ldr	r0, [pc, #4]	; (8005e6c <__malloc_lock+0x8>)
 8005e66:	f001 bc03 	b.w	8007670 <__retarget_lock_acquire_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	20000a9c 	.word	0x20000a9c

08005e70 <__malloc_unlock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	; (8005e78 <__malloc_unlock+0x8>)
 8005e72:	f001 bc05 	b.w	8007680 <__retarget_lock_release_recursive>
 8005e76:	bf00      	nop
 8005e78:	20000a9c 	.word	0x20000a9c

08005e7c <_Balloc>:
 8005e7c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005e7e:	b570      	push	{r4, r5, r6, lr}
 8005e80:	4605      	mov	r5, r0
 8005e82:	460c      	mov	r4, r1
 8005e84:	b14b      	cbz	r3, 8005e9a <_Balloc+0x1e>
 8005e86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005e8a:	b180      	cbz	r0, 8005eae <_Balloc+0x32>
 8005e8c:	6802      	ldr	r2, [r0, #0]
 8005e8e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8005e92:	2300      	movs	r3, #0
 8005e94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
 8005e9a:	2221      	movs	r2, #33	; 0x21
 8005e9c:	2104      	movs	r1, #4
 8005e9e:	f001 fb61 	bl	8007564 <_calloc_r>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	64e8      	str	r0, [r5, #76]	; 0x4c
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d1ed      	bne.n	8005e86 <_Balloc+0xa>
 8005eaa:	2000      	movs	r0, #0
 8005eac:	bd70      	pop	{r4, r5, r6, pc}
 8005eae:	2101      	movs	r1, #1
 8005eb0:	fa01 f604 	lsl.w	r6, r1, r4
 8005eb4:	1d72      	adds	r2, r6, #5
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	0092      	lsls	r2, r2, #2
 8005eba:	f001 fb53 	bl	8007564 <_calloc_r>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d0f3      	beq.n	8005eaa <_Balloc+0x2e>
 8005ec2:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8005ec6:	e7e4      	b.n	8005e92 <_Balloc+0x16>

08005ec8 <_Bfree>:
 8005ec8:	b131      	cbz	r1, 8005ed8 <_Bfree+0x10>
 8005eca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005ecc:	684a      	ldr	r2, [r1, #4]
 8005ece:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005ed2:	6008      	str	r0, [r1, #0]
 8005ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop

08005edc <__multadd>:
 8005edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ede:	690c      	ldr	r4, [r1, #16]
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	460d      	mov	r5, r1
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	f101 0c14 	add.w	ip, r1, #20
 8005eea:	2700      	movs	r7, #0
 8005eec:	f8dc 0000 	ldr.w	r0, [ip]
 8005ef0:	b281      	uxth	r1, r0
 8005ef2:	fb02 3301 	mla	r3, r2, r1, r3
 8005ef6:	0c01      	lsrs	r1, r0, #16
 8005ef8:	0c18      	lsrs	r0, r3, #16
 8005efa:	fb02 0101 	mla	r1, r2, r1, r0
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3701      	adds	r7, #1
 8005f02:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8005f06:	42bc      	cmp	r4, r7
 8005f08:	f84c 3b04 	str.w	r3, [ip], #4
 8005f0c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8005f10:	dcec      	bgt.n	8005eec <__multadd+0x10>
 8005f12:	b13b      	cbz	r3, 8005f24 <__multadd+0x48>
 8005f14:	68aa      	ldr	r2, [r5, #8]
 8005f16:	42a2      	cmp	r2, r4
 8005f18:	dd07      	ble.n	8005f2a <__multadd+0x4e>
 8005f1a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8005f1e:	3401      	adds	r4, #1
 8005f20:	6153      	str	r3, [r2, #20]
 8005f22:	612c      	str	r4, [r5, #16]
 8005f24:	4628      	mov	r0, r5
 8005f26:	b003      	add	sp, #12
 8005f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f2a:	6869      	ldr	r1, [r5, #4]
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	3101      	adds	r1, #1
 8005f30:	4630      	mov	r0, r6
 8005f32:	f7ff ffa3 	bl	8005e7c <_Balloc>
 8005f36:	692a      	ldr	r2, [r5, #16]
 8005f38:	3202      	adds	r2, #2
 8005f3a:	f105 010c 	add.w	r1, r5, #12
 8005f3e:	4607      	mov	r7, r0
 8005f40:	0092      	lsls	r2, r2, #2
 8005f42:	300c      	adds	r0, #12
 8005f44:	f7ff fef4 	bl	8005d30 <memcpy>
 8005f48:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8005f4a:	6869      	ldr	r1, [r5, #4]
 8005f4c:	9b01      	ldr	r3, [sp, #4]
 8005f4e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005f52:	6028      	str	r0, [r5, #0]
 8005f54:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8005f58:	463d      	mov	r5, r7
 8005f5a:	e7de      	b.n	8005f1a <__multadd+0x3e>

08005f5c <__s2b>:
 8005f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f60:	4c23      	ldr	r4, [pc, #140]	; (8005ff0 <__s2b+0x94>)
 8005f62:	9d08      	ldr	r5, [sp, #32]
 8005f64:	461e      	mov	r6, r3
 8005f66:	3308      	adds	r3, #8
 8005f68:	fb84 4c03 	smull	r4, ip, r4, r3
 8005f6c:	17db      	asrs	r3, r3, #31
 8005f6e:	ebc3 0c6c 	rsb	ip, r3, ip, asr #1
 8005f72:	f1bc 0f01 	cmp.w	ip, #1
 8005f76:	4607      	mov	r7, r0
 8005f78:	460c      	mov	r4, r1
 8005f7a:	4690      	mov	r8, r2
 8005f7c:	dd35      	ble.n	8005fea <__s2b+0x8e>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	2100      	movs	r1, #0
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	459c      	cmp	ip, r3
 8005f86:	f101 0101 	add.w	r1, r1, #1
 8005f8a:	dcfa      	bgt.n	8005f82 <__s2b+0x26>
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f7ff ff75 	bl	8005e7c <_Balloc>
 8005f92:	2301      	movs	r3, #1
 8005f94:	f1b8 0f09 	cmp.w	r8, #9
 8005f98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f9c:	dd21      	ble.n	8005fe2 <__s2b+0x86>
 8005f9e:	f104 0909 	add.w	r9, r4, #9
 8005fa2:	464d      	mov	r5, r9
 8005fa4:	4444      	add	r4, r8
 8005fa6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005faa:	4601      	mov	r1, r0
 8005fac:	3b30      	subs	r3, #48	; 0x30
 8005fae:	220a      	movs	r2, #10
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	f7ff ff93 	bl	8005edc <__multadd>
 8005fb6:	42ac      	cmp	r4, r5
 8005fb8:	d1f5      	bne.n	8005fa6 <__s2b+0x4a>
 8005fba:	eb09 0408 	add.w	r4, r9, r8
 8005fbe:	3c08      	subs	r4, #8
 8005fc0:	4546      	cmp	r6, r8
 8005fc2:	dd0c      	ble.n	8005fde <__s2b+0x82>
 8005fc4:	eba6 0608 	sub.w	r6, r6, r8
 8005fc8:	4426      	add	r6, r4
 8005fca:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005fce:	4601      	mov	r1, r0
 8005fd0:	3b30      	subs	r3, #48	; 0x30
 8005fd2:	220a      	movs	r2, #10
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	f7ff ff81 	bl	8005edc <__multadd>
 8005fda:	42a6      	cmp	r6, r4
 8005fdc:	d1f5      	bne.n	8005fca <__s2b+0x6e>
 8005fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe2:	340a      	adds	r4, #10
 8005fe4:	f04f 0809 	mov.w	r8, #9
 8005fe8:	e7ea      	b.n	8005fc0 <__s2b+0x64>
 8005fea:	2100      	movs	r1, #0
 8005fec:	e7ce      	b.n	8005f8c <__s2b+0x30>
 8005fee:	bf00      	nop
 8005ff0:	38e38e39 	.word	0x38e38e39

08005ff4 <__hi0bits>:
 8005ff4:	0c02      	lsrs	r2, r0, #16
 8005ff6:	0412      	lsls	r2, r2, #16
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	b9c2      	cbnz	r2, 800602e <__hi0bits+0x3a>
 8005ffc:	0403      	lsls	r3, r0, #16
 8005ffe:	2010      	movs	r0, #16
 8006000:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006004:	bf04      	itt	eq
 8006006:	021b      	lsleq	r3, r3, #8
 8006008:	3008      	addeq	r0, #8
 800600a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800600e:	bf04      	itt	eq
 8006010:	011b      	lsleq	r3, r3, #4
 8006012:	3004      	addeq	r0, #4
 8006014:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006018:	bf04      	itt	eq
 800601a:	009b      	lsleq	r3, r3, #2
 800601c:	3002      	addeq	r0, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	db04      	blt.n	800602c <__hi0bits+0x38>
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	d501      	bpl.n	800602a <__hi0bits+0x36>
 8006026:	3001      	adds	r0, #1
 8006028:	4770      	bx	lr
 800602a:	2020      	movs	r0, #32
 800602c:	4770      	bx	lr
 800602e:	2000      	movs	r0, #0
 8006030:	e7e6      	b.n	8006000 <__hi0bits+0xc>
 8006032:	bf00      	nop

08006034 <__lo0bits>:
 8006034:	6803      	ldr	r3, [r0, #0]
 8006036:	f013 0207 	ands.w	r2, r3, #7
 800603a:	4601      	mov	r1, r0
 800603c:	d007      	beq.n	800604e <__lo0bits+0x1a>
 800603e:	07da      	lsls	r2, r3, #31
 8006040:	d41f      	bmi.n	8006082 <__lo0bits+0x4e>
 8006042:	0798      	lsls	r0, r3, #30
 8006044:	d51f      	bpl.n	8006086 <__lo0bits+0x52>
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	600b      	str	r3, [r1, #0]
 800604a:	2001      	movs	r0, #1
 800604c:	4770      	bx	lr
 800604e:	b298      	uxth	r0, r3
 8006050:	b1a0      	cbz	r0, 800607c <__lo0bits+0x48>
 8006052:	4610      	mov	r0, r2
 8006054:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006058:	bf04      	itt	eq
 800605a:	0a1b      	lsreq	r3, r3, #8
 800605c:	3008      	addeq	r0, #8
 800605e:	071a      	lsls	r2, r3, #28
 8006060:	bf04      	itt	eq
 8006062:	091b      	lsreq	r3, r3, #4
 8006064:	3004      	addeq	r0, #4
 8006066:	079a      	lsls	r2, r3, #30
 8006068:	bf04      	itt	eq
 800606a:	089b      	lsreq	r3, r3, #2
 800606c:	3002      	addeq	r0, #2
 800606e:	07da      	lsls	r2, r3, #31
 8006070:	d402      	bmi.n	8006078 <__lo0bits+0x44>
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	d00b      	beq.n	800608e <__lo0bits+0x5a>
 8006076:	3001      	adds	r0, #1
 8006078:	600b      	str	r3, [r1, #0]
 800607a:	4770      	bx	lr
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	2010      	movs	r0, #16
 8006080:	e7e8      	b.n	8006054 <__lo0bits+0x20>
 8006082:	2000      	movs	r0, #0
 8006084:	4770      	bx	lr
 8006086:	089b      	lsrs	r3, r3, #2
 8006088:	600b      	str	r3, [r1, #0]
 800608a:	2002      	movs	r0, #2
 800608c:	4770      	bx	lr
 800608e:	2020      	movs	r0, #32
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop

08006094 <__i2b>:
 8006094:	b510      	push	{r4, lr}
 8006096:	460c      	mov	r4, r1
 8006098:	2101      	movs	r1, #1
 800609a:	f7ff feef 	bl	8005e7c <_Balloc>
 800609e:	2201      	movs	r2, #1
 80060a0:	e9c0 2404 	strd	r2, r4, [r0, #16]
 80060a4:	bd10      	pop	{r4, pc}
 80060a6:	bf00      	nop

080060a8 <__multiply>:
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	690e      	ldr	r6, [r1, #16]
 80060ae:	6914      	ldr	r4, [r2, #16]
 80060b0:	42a6      	cmp	r6, r4
 80060b2:	b083      	sub	sp, #12
 80060b4:	460f      	mov	r7, r1
 80060b6:	4615      	mov	r5, r2
 80060b8:	da04      	bge.n	80060c4 <__multiply+0x1c>
 80060ba:	4632      	mov	r2, r6
 80060bc:	462f      	mov	r7, r5
 80060be:	4626      	mov	r6, r4
 80060c0:	460d      	mov	r5, r1
 80060c2:	4614      	mov	r4, r2
 80060c4:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
 80060c8:	eb06 0804 	add.w	r8, r6, r4
 80060cc:	4543      	cmp	r3, r8
 80060ce:	bfb8      	it	lt
 80060d0:	3101      	addlt	r1, #1
 80060d2:	f7ff fed3 	bl	8005e7c <_Balloc>
 80060d6:	f100 0914 	add.w	r9, r0, #20
 80060da:	eb09 0e88 	add.w	lr, r9, r8, lsl #2
 80060de:	45f1      	cmp	r9, lr
 80060e0:	9000      	str	r0, [sp, #0]
 80060e2:	d205      	bcs.n	80060f0 <__multiply+0x48>
 80060e4:	464b      	mov	r3, r9
 80060e6:	2200      	movs	r2, #0
 80060e8:	f843 2b04 	str.w	r2, [r3], #4
 80060ec:	459e      	cmp	lr, r3
 80060ee:	d8fb      	bhi.n	80060e8 <__multiply+0x40>
 80060f0:	f105 0a14 	add.w	sl, r5, #20
 80060f4:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 80060f8:	f107 0314 	add.w	r3, r7, #20
 80060fc:	45a2      	cmp	sl, r4
 80060fe:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
 8006102:	d261      	bcs.n	80061c8 <__multiply+0x120>
 8006104:	1b64      	subs	r4, r4, r5
 8006106:	3c15      	subs	r4, #21
 8006108:	f024 0403 	bic.w	r4, r4, #3
 800610c:	f8cd e004 	str.w	lr, [sp, #4]
 8006110:	44a2      	add	sl, r4
 8006112:	f105 0210 	add.w	r2, r5, #16
 8006116:	469e      	mov	lr, r3
 8006118:	e005      	b.n	8006126 <__multiply+0x7e>
 800611a:	0c2d      	lsrs	r5, r5, #16
 800611c:	d12b      	bne.n	8006176 <__multiply+0xce>
 800611e:	4592      	cmp	sl, r2
 8006120:	f109 0904 	add.w	r9, r9, #4
 8006124:	d04e      	beq.n	80061c4 <__multiply+0x11c>
 8006126:	f852 5f04 	ldr.w	r5, [r2, #4]!
 800612a:	fa1f fb85 	uxth.w	fp, r5
 800612e:	f1bb 0f00 	cmp.w	fp, #0
 8006132:	d0f2      	beq.n	800611a <__multiply+0x72>
 8006134:	4677      	mov	r7, lr
 8006136:	464e      	mov	r6, r9
 8006138:	2000      	movs	r0, #0
 800613a:	e000      	b.n	800613e <__multiply+0x96>
 800613c:	4626      	mov	r6, r4
 800613e:	f857 1b04 	ldr.w	r1, [r7], #4
 8006142:	6834      	ldr	r4, [r6, #0]
 8006144:	b28b      	uxth	r3, r1
 8006146:	b2a5      	uxth	r5, r4
 8006148:	0c09      	lsrs	r1, r1, #16
 800614a:	0c24      	lsrs	r4, r4, #16
 800614c:	fb0b 5303 	mla	r3, fp, r3, r5
 8006150:	4403      	add	r3, r0
 8006152:	fb0b 4001 	mla	r0, fp, r1, r4
 8006156:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800615a:	4634      	mov	r4, r6
 800615c:	b29b      	uxth	r3, r3
 800615e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006162:	45bc      	cmp	ip, r7
 8006164:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8006168:	f844 3b04 	str.w	r3, [r4], #4
 800616c:	d8e6      	bhi.n	800613c <__multiply+0x94>
 800616e:	6070      	str	r0, [r6, #4]
 8006170:	6815      	ldr	r5, [r2, #0]
 8006172:	0c2d      	lsrs	r5, r5, #16
 8006174:	d0d3      	beq.n	800611e <__multiply+0x76>
 8006176:	f8d9 3000 	ldr.w	r3, [r9]
 800617a:	4676      	mov	r6, lr
 800617c:	4618      	mov	r0, r3
 800617e:	46cb      	mov	fp, r9
 8006180:	2100      	movs	r1, #0
 8006182:	e000      	b.n	8006186 <__multiply+0xde>
 8006184:	46a3      	mov	fp, r4
 8006186:	8834      	ldrh	r4, [r6, #0]
 8006188:	0c00      	lsrs	r0, r0, #16
 800618a:	fb05 0004 	mla	r0, r5, r4, r0
 800618e:	4401      	add	r1, r0
 8006190:	b29b      	uxth	r3, r3
 8006192:	465c      	mov	r4, fp
 8006194:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006198:	f844 3b04 	str.w	r3, [r4], #4
 800619c:	f856 3b04 	ldr.w	r3, [r6], #4
 80061a0:	f8db 0004 	ldr.w	r0, [fp, #4]
 80061a4:	0c1b      	lsrs	r3, r3, #16
 80061a6:	b287      	uxth	r7, r0
 80061a8:	fb05 7303 	mla	r3, r5, r3, r7
 80061ac:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80061b0:	45b4      	cmp	ip, r6
 80061b2:	ea4f 4113 	mov.w	r1, r3, lsr #16
 80061b6:	d8e5      	bhi.n	8006184 <__multiply+0xdc>
 80061b8:	4592      	cmp	sl, r2
 80061ba:	f8cb 3004 	str.w	r3, [fp, #4]
 80061be:	f109 0904 	add.w	r9, r9, #4
 80061c2:	d1b0      	bne.n	8006126 <__multiply+0x7e>
 80061c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80061c8:	f1b8 0f00 	cmp.w	r8, #0
 80061cc:	dd0b      	ble.n	80061e6 <__multiply+0x13e>
 80061ce:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 80061d2:	f1ae 0e04 	sub.w	lr, lr, #4
 80061d6:	b11b      	cbz	r3, 80061e0 <__multiply+0x138>
 80061d8:	e005      	b.n	80061e6 <__multiply+0x13e>
 80061da:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80061de:	b913      	cbnz	r3, 80061e6 <__multiply+0x13e>
 80061e0:	f1b8 0801 	subs.w	r8, r8, #1
 80061e4:	d1f9      	bne.n	80061da <__multiply+0x132>
 80061e6:	9800      	ldr	r0, [sp, #0]
 80061e8:	f8c0 8010 	str.w	r8, [r0, #16]
 80061ec:	b003      	add	sp, #12
 80061ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f2:	bf00      	nop

080061f4 <__pow5mult>:
 80061f4:	f012 0303 	ands.w	r3, r2, #3
 80061f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fc:	4614      	mov	r4, r2
 80061fe:	4607      	mov	r7, r0
 8006200:	d12e      	bne.n	8006260 <__pow5mult+0x6c>
 8006202:	460d      	mov	r5, r1
 8006204:	10a4      	asrs	r4, r4, #2
 8006206:	d01c      	beq.n	8006242 <__pow5mult+0x4e>
 8006208:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800620a:	b396      	cbz	r6, 8006272 <__pow5mult+0x7e>
 800620c:	07e3      	lsls	r3, r4, #31
 800620e:	f04f 0800 	mov.w	r8, #0
 8006212:	d406      	bmi.n	8006222 <__pow5mult+0x2e>
 8006214:	1064      	asrs	r4, r4, #1
 8006216:	d014      	beq.n	8006242 <__pow5mult+0x4e>
 8006218:	6830      	ldr	r0, [r6, #0]
 800621a:	b1a8      	cbz	r0, 8006248 <__pow5mult+0x54>
 800621c:	4606      	mov	r6, r0
 800621e:	07e3      	lsls	r3, r4, #31
 8006220:	d5f8      	bpl.n	8006214 <__pow5mult+0x20>
 8006222:	4632      	mov	r2, r6
 8006224:	4629      	mov	r1, r5
 8006226:	4638      	mov	r0, r7
 8006228:	f7ff ff3e 	bl	80060a8 <__multiply>
 800622c:	b1b5      	cbz	r5, 800625c <__pow5mult+0x68>
 800622e:	686a      	ldr	r2, [r5, #4]
 8006230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006232:	1064      	asrs	r4, r4, #1
 8006234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006238:	6029      	str	r1, [r5, #0]
 800623a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800623e:	4605      	mov	r5, r0
 8006240:	d1ea      	bne.n	8006218 <__pow5mult+0x24>
 8006242:	4628      	mov	r0, r5
 8006244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006248:	4632      	mov	r2, r6
 800624a:	4631      	mov	r1, r6
 800624c:	4638      	mov	r0, r7
 800624e:	f7ff ff2b 	bl	80060a8 <__multiply>
 8006252:	6030      	str	r0, [r6, #0]
 8006254:	f8c0 8000 	str.w	r8, [r0]
 8006258:	4606      	mov	r6, r0
 800625a:	e7e0      	b.n	800621e <__pow5mult+0x2a>
 800625c:	4605      	mov	r5, r0
 800625e:	e7d9      	b.n	8006214 <__pow5mult+0x20>
 8006260:	3b01      	subs	r3, #1
 8006262:	4a0b      	ldr	r2, [pc, #44]	; (8006290 <__pow5mult+0x9c>)
 8006264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006268:	2300      	movs	r3, #0
 800626a:	f7ff fe37 	bl	8005edc <__multadd>
 800626e:	4605      	mov	r5, r0
 8006270:	e7c8      	b.n	8006204 <__pow5mult+0x10>
 8006272:	2101      	movs	r1, #1
 8006274:	4638      	mov	r0, r7
 8006276:	f7ff fe01 	bl	8005e7c <_Balloc>
 800627a:	f240 2371 	movw	r3, #625	; 0x271
 800627e:	6143      	str	r3, [r0, #20]
 8006280:	2201      	movs	r2, #1
 8006282:	2300      	movs	r3, #0
 8006284:	6102      	str	r2, [r0, #16]
 8006286:	4606      	mov	r6, r0
 8006288:	64b8      	str	r0, [r7, #72]	; 0x48
 800628a:	6003      	str	r3, [r0, #0]
 800628c:	e7be      	b.n	800620c <__pow5mult+0x18>
 800628e:	bf00      	nop
 8006290:	08008d50 	.word	0x08008d50

08006294 <__lshift>:
 8006294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006298:	4691      	mov	r9, r2
 800629a:	690a      	ldr	r2, [r1, #16]
 800629c:	460e      	mov	r6, r1
 800629e:	ea4f 1469 	mov.w	r4, r9, asr #5
 80062a2:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
 80062a6:	eb04 0802 	add.w	r8, r4, r2
 80062aa:	f108 0501 	add.w	r5, r8, #1
 80062ae:	429d      	cmp	r5, r3
 80062b0:	4607      	mov	r7, r0
 80062b2:	dd04      	ble.n	80062be <__lshift+0x2a>
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	429d      	cmp	r5, r3
 80062b8:	f101 0101 	add.w	r1, r1, #1
 80062bc:	dcfa      	bgt.n	80062b4 <__lshift+0x20>
 80062be:	4638      	mov	r0, r7
 80062c0:	f7ff fddc 	bl	8005e7c <_Balloc>
 80062c4:	2c00      	cmp	r4, #0
 80062c6:	f100 0314 	add.w	r3, r0, #20
 80062ca:	dd37      	ble.n	800633c <__lshift+0xa8>
 80062cc:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 80062d0:	2200      	movs	r2, #0
 80062d2:	f843 2b04 	str.w	r2, [r3], #4
 80062d6:	428b      	cmp	r3, r1
 80062d8:	d1fb      	bne.n	80062d2 <__lshift+0x3e>
 80062da:	6934      	ldr	r4, [r6, #16]
 80062dc:	f106 0314 	add.w	r3, r6, #20
 80062e0:	f019 091f 	ands.w	r9, r9, #31
 80062e4:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
 80062e8:	d020      	beq.n	800632c <__lshift+0x98>
 80062ea:	f1c9 0e20 	rsb	lr, r9, #32
 80062ee:	2200      	movs	r2, #0
 80062f0:	e000      	b.n	80062f4 <__lshift+0x60>
 80062f2:	4651      	mov	r1, sl
 80062f4:	681c      	ldr	r4, [r3, #0]
 80062f6:	468a      	mov	sl, r1
 80062f8:	fa04 f409 	lsl.w	r4, r4, r9
 80062fc:	4314      	orrs	r4, r2
 80062fe:	f84a 4b04 	str.w	r4, [sl], #4
 8006302:	f853 2b04 	ldr.w	r2, [r3], #4
 8006306:	4563      	cmp	r3, ip
 8006308:	fa22 f20e 	lsr.w	r2, r2, lr
 800630c:	d3f1      	bcc.n	80062f2 <__lshift+0x5e>
 800630e:	604a      	str	r2, [r1, #4]
 8006310:	b10a      	cbz	r2, 8006316 <__lshift+0x82>
 8006312:	f108 0502 	add.w	r5, r8, #2
 8006316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006318:	6872      	ldr	r2, [r6, #4]
 800631a:	3d01      	subs	r5, #1
 800631c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006320:	6105      	str	r5, [r0, #16]
 8006322:	6031      	str	r1, [r6, #0]
 8006324:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8006328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800632c:	3904      	subs	r1, #4
 800632e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006332:	f841 2f04 	str.w	r2, [r1, #4]!
 8006336:	459c      	cmp	ip, r3
 8006338:	d8f9      	bhi.n	800632e <__lshift+0x9a>
 800633a:	e7ec      	b.n	8006316 <__lshift+0x82>
 800633c:	4619      	mov	r1, r3
 800633e:	e7cc      	b.n	80062da <__lshift+0x46>

08006340 <__mcmp>:
 8006340:	b430      	push	{r4, r5}
 8006342:	690b      	ldr	r3, [r1, #16]
 8006344:	4605      	mov	r5, r0
 8006346:	6900      	ldr	r0, [r0, #16]
 8006348:	1ac0      	subs	r0, r0, r3
 800634a:	d10f      	bne.n	800636c <__mcmp+0x2c>
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	3514      	adds	r5, #20
 8006350:	3114      	adds	r1, #20
 8006352:	4419      	add	r1, r3
 8006354:	442b      	add	r3, r5
 8006356:	e001      	b.n	800635c <__mcmp+0x1c>
 8006358:	429d      	cmp	r5, r3
 800635a:	d207      	bcs.n	800636c <__mcmp+0x2c>
 800635c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006360:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006364:	4294      	cmp	r4, r2
 8006366:	d0f7      	beq.n	8006358 <__mcmp+0x18>
 8006368:	d302      	bcc.n	8006370 <__mcmp+0x30>
 800636a:	2001      	movs	r0, #1
 800636c:	bc30      	pop	{r4, r5}
 800636e:	4770      	bx	lr
 8006370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006374:	e7fa      	b.n	800636c <__mcmp+0x2c>
 8006376:	bf00      	nop

08006378 <__mdiff>:
 8006378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800637c:	6913      	ldr	r3, [r2, #16]
 800637e:	690d      	ldr	r5, [r1, #16]
 8006380:	1aed      	subs	r5, r5, r3
 8006382:	2d00      	cmp	r5, #0
 8006384:	460e      	mov	r6, r1
 8006386:	4690      	mov	r8, r2
 8006388:	f101 0414 	add.w	r4, r1, #20
 800638c:	f102 0714 	add.w	r7, r2, #20
 8006390:	d114      	bne.n	80063bc <__mdiff+0x44>
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	18e2      	adds	r2, r4, r3
 8006396:	443b      	add	r3, r7
 8006398:	e001      	b.n	800639e <__mdiff+0x26>
 800639a:	42a2      	cmp	r2, r4
 800639c:	d959      	bls.n	8006452 <__mdiff+0xda>
 800639e:	f852 cd04 	ldr.w	ip, [r2, #-4]!
 80063a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063a6:	458c      	cmp	ip, r1
 80063a8:	d0f7      	beq.n	800639a <__mdiff+0x22>
 80063aa:	d209      	bcs.n	80063c0 <__mdiff+0x48>
 80063ac:	4622      	mov	r2, r4
 80063ae:	4633      	mov	r3, r6
 80063b0:	463c      	mov	r4, r7
 80063b2:	4646      	mov	r6, r8
 80063b4:	4617      	mov	r7, r2
 80063b6:	4698      	mov	r8, r3
 80063b8:	2501      	movs	r5, #1
 80063ba:	e001      	b.n	80063c0 <__mdiff+0x48>
 80063bc:	dbf6      	blt.n	80063ac <__mdiff+0x34>
 80063be:	2500      	movs	r5, #0
 80063c0:	6871      	ldr	r1, [r6, #4]
 80063c2:	f7ff fd5b 	bl	8005e7c <_Balloc>
 80063c6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80063ca:	6936      	ldr	r6, [r6, #16]
 80063cc:	60c5      	str	r5, [r0, #12]
 80063ce:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
 80063d2:	46bc      	mov	ip, r7
 80063d4:	f100 0514 	add.w	r5, r0, #20
 80063d8:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 80063dc:	2300      	movs	r3, #0
 80063de:	f85c 1b04 	ldr.w	r1, [ip], #4
 80063e2:	f854 8b04 	ldr.w	r8, [r4], #4
 80063e6:	b28a      	uxth	r2, r1
 80063e8:	fa13 f388 	uxtah	r3, r3, r8
 80063ec:	0c09      	lsrs	r1, r1, #16
 80063ee:	1a9a      	subs	r2, r3, r2
 80063f0:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 80063f4:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80063f8:	b292      	uxth	r2, r2
 80063fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063fe:	45e6      	cmp	lr, ip
 8006400:	f845 2b04 	str.w	r2, [r5], #4
 8006404:	ea4f 4323 	mov.w	r3, r3, asr #16
 8006408:	d8e9      	bhi.n	80063de <__mdiff+0x66>
 800640a:	42a7      	cmp	r7, r4
 800640c:	d917      	bls.n	800643e <__mdiff+0xc6>
 800640e:	46ae      	mov	lr, r5
 8006410:	46a4      	mov	ip, r4
 8006412:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006416:	fa13 f382 	uxtah	r3, r3, r2
 800641a:	1419      	asrs	r1, r3, #16
 800641c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006420:	b29b      	uxth	r3, r3
 8006422:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 8006426:	4567      	cmp	r7, ip
 8006428:	f84e 2b04 	str.w	r2, [lr], #4
 800642c:	ea4f 4321 	mov.w	r3, r1, asr #16
 8006430:	d8ef      	bhi.n	8006412 <__mdiff+0x9a>
 8006432:	43e4      	mvns	r4, r4
 8006434:	4427      	add	r7, r4
 8006436:	f027 0703 	bic.w	r7, r7, #3
 800643a:	3704      	adds	r7, #4
 800643c:	443d      	add	r5, r7
 800643e:	3d04      	subs	r5, #4
 8006440:	b922      	cbnz	r2, 800644c <__mdiff+0xd4>
 8006442:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006446:	3e01      	subs	r6, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0fa      	beq.n	8006442 <__mdiff+0xca>
 800644c:	6106      	str	r6, [r0, #16]
 800644e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006452:	2100      	movs	r1, #0
 8006454:	f7ff fd12 	bl	8005e7c <_Balloc>
 8006458:	2201      	movs	r2, #1
 800645a:	2300      	movs	r3, #0
 800645c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006464 <__ulp>:
 8006464:	4b0f      	ldr	r3, [pc, #60]	; (80064a4 <__ulp+0x40>)
 8006466:	400b      	ands	r3, r1
 8006468:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800646c:	2b00      	cmp	r3, #0
 800646e:	dd02      	ble.n	8006476 <__ulp+0x12>
 8006470:	2000      	movs	r0, #0
 8006472:	4619      	mov	r1, r3
 8006474:	4770      	bx	lr
 8006476:	425b      	negs	r3, r3
 8006478:	151b      	asrs	r3, r3, #20
 800647a:	2b13      	cmp	r3, #19
 800647c:	dd0b      	ble.n	8006496 <__ulp+0x32>
 800647e:	3b14      	subs	r3, #20
 8006480:	2b1e      	cmp	r3, #30
 8006482:	bfdd      	ittte	le
 8006484:	f1c3 031f 	rsble	r3, r3, #31
 8006488:	2201      	movle	r2, #1
 800648a:	fa02 f303 	lslle.w	r3, r2, r3
 800648e:	2301      	movgt	r3, #1
 8006490:	2100      	movs	r1, #0
 8006492:	4618      	mov	r0, r3
 8006494:	4770      	bx	lr
 8006496:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800649a:	2000      	movs	r0, #0
 800649c:	fa42 f103 	asr.w	r1, r2, r3
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	7ff00000 	.word	0x7ff00000

080064a8 <__b2d>:
 80064a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ac:	6906      	ldr	r6, [r0, #16]
 80064ae:	f100 0814 	add.w	r8, r0, #20
 80064b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80064b6:	f856 7c04 	ldr.w	r7, [r6, #-4]
 80064ba:	4638      	mov	r0, r7
 80064bc:	f7ff fd9a 	bl	8005ff4 <__hi0bits>
 80064c0:	f1c0 0320 	rsb	r3, r0, #32
 80064c4:	280a      	cmp	r0, #10
 80064c6:	600b      	str	r3, [r1, #0]
 80064c8:	f1a6 0204 	sub.w	r2, r6, #4
 80064cc:	dc19      	bgt.n	8006502 <__b2d+0x5a>
 80064ce:	4590      	cmp	r8, r2
 80064d0:	bf38      	it	cc
 80064d2:	f856 2c08 	ldrcc.w	r2, [r6, #-8]
 80064d6:	f1c0 030b 	rsb	r3, r0, #11
 80064da:	fa27 f103 	lsr.w	r1, r7, r3
 80064de:	bf38      	it	cc
 80064e0:	40da      	lsrcc	r2, r3
 80064e2:	f100 0315 	add.w	r3, r0, #21
 80064e6:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
 80064ea:	bf28      	it	cs
 80064ec:	2200      	movcs	r2, #0
 80064ee:	fa07 f303 	lsl.w	r3, r7, r3
 80064f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80064f6:	ea43 0402 	orr.w	r4, r3, r2
 80064fa:	4620      	mov	r0, r4
 80064fc:	4629      	mov	r1, r5
 80064fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006502:	4590      	cmp	r8, r2
 8006504:	f1a0 030b 	sub.w	r3, r0, #11
 8006508:	d21c      	bcs.n	8006544 <__b2d+0x9c>
 800650a:	f856 0c08 	ldr.w	r0, [r6, #-8]
 800650e:	b1db      	cbz	r3, 8006548 <__b2d+0xa0>
 8006510:	409f      	lsls	r7, r3
 8006512:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 8006516:	f1c3 0120 	rsb	r1, r3, #32
 800651a:	f1a6 0208 	sub.w	r2, r6, #8
 800651e:	fa20 fc01 	lsr.w	ip, r0, r1
 8006522:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006526:	4590      	cmp	r8, r2
 8006528:	fa00 f003 	lsl.w	r0, r0, r3
 800652c:	ea47 050c 	orr.w	r5, r7, ip
 8006530:	d203      	bcs.n	800653a <__b2d+0x92>
 8006532:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8006536:	40cb      	lsrs	r3, r1
 8006538:	4318      	orrs	r0, r3
 800653a:	4604      	mov	r4, r0
 800653c:	4620      	mov	r0, r4
 800653e:	4629      	mov	r1, r5
 8006540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006544:	b933      	cbnz	r3, 8006554 <__b2d+0xac>
 8006546:	4618      	mov	r0, r3
 8006548:	f047 557f 	orr.w	r5, r7, #1069547520	; 0x3fc00000
 800654c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006550:	4604      	mov	r4, r0
 8006552:	e7f3      	b.n	800653c <__b2d+0x94>
 8006554:	fa07 f303 	lsl.w	r3, r7, r3
 8006558:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800655c:	2000      	movs	r0, #0
 800655e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006562:	4604      	mov	r4, r0
 8006564:	e7ea      	b.n	800653c <__b2d+0x94>
 8006566:	bf00      	nop

08006568 <__d2b>:
 8006568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800656c:	2101      	movs	r1, #1
 800656e:	b082      	sub	sp, #8
 8006570:	461c      	mov	r4, r3
 8006572:	4690      	mov	r8, r2
 8006574:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006578:	f7ff fc80 	bl	8005e7c <_Balloc>
 800657c:	4623      	mov	r3, r4
 800657e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006582:	4607      	mov	r7, r0
 8006584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006588:	b10c      	cbz	r4, 800658e <__d2b+0x26>
 800658a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800658e:	f1b8 0200 	subs.w	r2, r8, #0
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	d01f      	beq.n	80065d6 <__d2b+0x6e>
 8006596:	a802      	add	r0, sp, #8
 8006598:	f840 2d08 	str.w	r2, [r0, #-8]!
 800659c:	f7ff fd4a 	bl	8006034 <__lo0bits>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d12d      	bne.n	8006600 <__d2b+0x98>
 80065a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065a8:	617a      	str	r2, [r7, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	bf0c      	ite	eq
 80065ae:	2101      	moveq	r1, #1
 80065b0:	2102      	movne	r1, #2
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	6139      	str	r1, [r7, #16]
 80065b6:	b9c4      	cbnz	r4, 80065ea <__d2b+0x82>
 80065b8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80065bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065c0:	6030      	str	r0, [r6, #0]
 80065c2:	6918      	ldr	r0, [r3, #16]
 80065c4:	f7ff fd16 	bl	8005ff4 <__hi0bits>
 80065c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80065cc:	6028      	str	r0, [r5, #0]
 80065ce:	4638      	mov	r0, r7
 80065d0:	b002      	add	sp, #8
 80065d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d6:	a801      	add	r0, sp, #4
 80065d8:	f7ff fd2c 	bl	8006034 <__lo0bits>
 80065dc:	9b01      	ldr	r3, [sp, #4]
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	2101      	movs	r1, #1
 80065e2:	3020      	adds	r0, #32
 80065e4:	6139      	str	r1, [r7, #16]
 80065e6:	2c00      	cmp	r4, #0
 80065e8:	d0e6      	beq.n	80065b8 <__d2b+0x50>
 80065ea:	f2a4 4333 	subw	r3, r4, #1075	; 0x433
 80065ee:	4403      	add	r3, r0
 80065f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065f4:	6033      	str	r3, [r6, #0]
 80065f6:	6028      	str	r0, [r5, #0]
 80065f8:	4638      	mov	r0, r7
 80065fa:	b002      	add	sp, #8
 80065fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006600:	e9dd 1300 	ldrd	r1, r3, [sp]
 8006604:	f1c0 0220 	rsb	r2, r0, #32
 8006608:	fa03 f202 	lsl.w	r2, r3, r2
 800660c:	430a      	orrs	r2, r1
 800660e:	40c3      	lsrs	r3, r0
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	617a      	str	r2, [r7, #20]
 8006614:	e7c9      	b.n	80065aa <__d2b+0x42>
 8006616:	bf00      	nop

08006618 <__ratio>:
 8006618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800661c:	b083      	sub	sp, #12
 800661e:	4688      	mov	r8, r1
 8006620:	4669      	mov	r1, sp
 8006622:	4681      	mov	r9, r0
 8006624:	f7ff ff40 	bl	80064a8 <__b2d>
 8006628:	4604      	mov	r4, r0
 800662a:	460d      	mov	r5, r1
 800662c:	4640      	mov	r0, r8
 800662e:	a901      	add	r1, sp, #4
 8006630:	f7ff ff3a 	bl	80064a8 <__b2d>
 8006634:	460f      	mov	r7, r1
 8006636:	e9dd 1300 	ldrd	r1, r3, [sp]
 800663a:	4606      	mov	r6, r0
 800663c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8006640:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8006644:	1acb      	subs	r3, r1, r3
 8006646:	1a12      	subs	r2, r2, r0
 8006648:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800664c:	2b00      	cmp	r3, #0
 800664e:	dd0b      	ble.n	8006668 <__ratio+0x50>
 8006650:	eb05 5903 	add.w	r9, r5, r3, lsl #20
 8006654:	464d      	mov	r5, r9
 8006656:	4632      	mov	r2, r6
 8006658:	463b      	mov	r3, r7
 800665a:	4620      	mov	r0, r4
 800665c:	4629      	mov	r1, r5
 800665e:	f001 ff63 	bl	8008528 <__aeabi_ddiv>
 8006662:	b003      	add	sp, #12
 8006664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006668:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 800666c:	eb07 5103 	add.w	r1, r7, r3, lsl #20
 8006670:	460f      	mov	r7, r1
 8006672:	e7f0      	b.n	8006656 <__ratio+0x3e>

08006674 <_mprec_log10>:
 8006674:	2817      	cmp	r0, #23
 8006676:	b5d0      	push	{r4, r6, r7, lr}
 8006678:	4604      	mov	r4, r0
 800667a:	dd0a      	ble.n	8006692 <_mprec_log10+0x1e>
 800667c:	4908      	ldr	r1, [pc, #32]	; (80066a0 <_mprec_log10+0x2c>)
 800667e:	4f09      	ldr	r7, [pc, #36]	; (80066a4 <_mprec_log10+0x30>)
 8006680:	2000      	movs	r0, #0
 8006682:	2600      	movs	r6, #0
 8006684:	4632      	mov	r2, r6
 8006686:	463b      	mov	r3, r7
 8006688:	f001 fe24 	bl	80082d4 <__aeabi_dmul>
 800668c:	3c01      	subs	r4, #1
 800668e:	d1f9      	bne.n	8006684 <_mprec_log10+0x10>
 8006690:	bdd0      	pop	{r4, r6, r7, pc}
 8006692:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <_mprec_log10+0x34>)
 8006694:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8006698:	e9d4 0100 	ldrd	r0, r1, [r4]
 800669c:	bdd0      	pop	{r4, r6, r7, pc}
 800669e:	bf00      	nop
 80066a0:	3ff00000 	.word	0x3ff00000
 80066a4:	40240000 	.word	0x40240000
 80066a8:	08008c60 	.word	0x08008c60

080066ac <__copybits>:
 80066ac:	b470      	push	{r4, r5, r6}
 80066ae:	6914      	ldr	r4, [r2, #16]
 80066b0:	1e4d      	subs	r5, r1, #1
 80066b2:	f102 0314 	add.w	r3, r2, #20
 80066b6:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 80066ba:	116d      	asrs	r5, r5, #5
 80066bc:	3501      	adds	r5, #1
 80066be:	428b      	cmp	r3, r1
 80066c0:	eb00 0485 	add.w	r4, r0, r5, lsl #2
 80066c4:	d20c      	bcs.n	80066e0 <__copybits+0x34>
 80066c6:	1f05      	subs	r5, r0, #4
 80066c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80066cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80066d0:	4299      	cmp	r1, r3
 80066d2:	d8f9      	bhi.n	80066c8 <__copybits+0x1c>
 80066d4:	1a8b      	subs	r3, r1, r2
 80066d6:	3b15      	subs	r3, #21
 80066d8:	f023 0303 	bic.w	r3, r3, #3
 80066dc:	3304      	adds	r3, #4
 80066de:	4418      	add	r0, r3
 80066e0:	4284      	cmp	r4, r0
 80066e2:	d904      	bls.n	80066ee <__copybits+0x42>
 80066e4:	2300      	movs	r3, #0
 80066e6:	f840 3b04 	str.w	r3, [r0], #4
 80066ea:	4284      	cmp	r4, r0
 80066ec:	d8fb      	bhi.n	80066e6 <__copybits+0x3a>
 80066ee:	bc70      	pop	{r4, r5, r6}
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop

080066f4 <__any_on>:
 80066f4:	6903      	ldr	r3, [r0, #16]
 80066f6:	b410      	push	{r4}
 80066f8:	114c      	asrs	r4, r1, #5
 80066fa:	42a3      	cmp	r3, r4
 80066fc:	f100 0214 	add.w	r2, r0, #20
 8006700:	da0f      	bge.n	8006722 <__any_on+0x2e>
 8006702:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006706:	429a      	cmp	r2, r3
 8006708:	d21c      	bcs.n	8006744 <__any_on+0x50>
 800670a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800670e:	3b04      	subs	r3, #4
 8006710:	b118      	cbz	r0, 800671a <__any_on+0x26>
 8006712:	e014      	b.n	800673e <__any_on+0x4a>
 8006714:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006718:	b989      	cbnz	r1, 800673e <__any_on+0x4a>
 800671a:	429a      	cmp	r2, r3
 800671c:	d3fa      	bcc.n	8006714 <__any_on+0x20>
 800671e:	bc10      	pop	{r4}
 8006720:	4770      	bx	lr
 8006722:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8006726:	ddee      	ble.n	8006706 <__any_on+0x12>
 8006728:	f011 011f 	ands.w	r1, r1, #31
 800672c:	d0eb      	beq.n	8006706 <__any_on+0x12>
 800672e:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8006732:	fa24 f001 	lsr.w	r0, r4, r1
 8006736:	fa00 f101 	lsl.w	r1, r0, r1
 800673a:	428c      	cmp	r4, r1
 800673c:	d0e3      	beq.n	8006706 <__any_on+0x12>
 800673e:	2001      	movs	r0, #1
 8006740:	bc10      	pop	{r4}
 8006742:	4770      	bx	lr
 8006744:	2000      	movs	r0, #0
 8006746:	e7ea      	b.n	800671e <__any_on+0x2a>

08006748 <frexp>:
 8006748:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80067a8 <frexp+0x60>
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006752:	2700      	movs	r7, #0
 8006754:	4563      	cmp	r3, ip
 8006756:	4604      	mov	r4, r0
 8006758:	460d      	mov	r5, r1
 800675a:	4616      	mov	r6, r2
 800675c:	6017      	str	r7, [r2, #0]
 800675e:	dc1e      	bgt.n	800679e <frexp+0x56>
 8006760:	4684      	mov	ip, r0
 8006762:	ea53 0c0c 	orrs.w	ip, r3, ip
 8006766:	d01a      	beq.n	800679e <frexp+0x56>
 8006768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800676c:	460a      	mov	r2, r1
 800676e:	da09      	bge.n	8006784 <frexp+0x3c>
 8006770:	2200      	movs	r2, #0
 8006772:	4b0c      	ldr	r3, [pc, #48]	; (80067a4 <frexp+0x5c>)
 8006774:	f001 fdae 	bl	80082d4 <__aeabi_dmul>
 8006778:	f06f 0735 	mvn.w	r7, #53	; 0x35
 800677c:	4604      	mov	r4, r0
 800677e:	460a      	mov	r2, r1
 8006780:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006784:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006788:	151b      	asrs	r3, r3, #20
 800678a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800678e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006792:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006796:	443b      	add	r3, r7
 8006798:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800679c:	6033      	str	r3, [r6, #0]
 800679e:	4620      	mov	r0, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067a4:	43500000 	.word	0x43500000
 80067a8:	7fefffff 	.word	0x7fefffff

080067ac <_sbrk_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4c07      	ldr	r4, [pc, #28]	; (80067cc <_sbrk_r+0x20>)
 80067b0:	2300      	movs	r3, #0
 80067b2:	4605      	mov	r5, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	f7fc f944 	bl	8002a44 <_sbrk>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d000      	beq.n	80067c2 <_sbrk_r+0x16>
 80067c0:	bd38      	pop	{r3, r4, r5, pc}
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0fb      	beq.n	80067c0 <_sbrk_r+0x14>
 80067c8:	602b      	str	r3, [r5, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20000ab0 	.word	0x20000ab0
	...

08006800 <strlen>:
 8006800:	f890 f000 	pld	[r0]
 8006804:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8006808:	f020 0107 	bic.w	r1, r0, #7
 800680c:	f06f 0c00 	mvn.w	ip, #0
 8006810:	f010 0407 	ands.w	r4, r0, #7
 8006814:	f891 f020 	pld	[r1, #32]
 8006818:	f040 8049 	bne.w	80068ae <strlen+0xae>
 800681c:	f04f 0400 	mov.w	r4, #0
 8006820:	f06f 0007 	mvn.w	r0, #7
 8006824:	e9d1 2300 	ldrd	r2, r3, [r1]
 8006828:	f891 f040 	pld	[r1, #64]	; 0x40
 800682c:	f100 0008 	add.w	r0, r0, #8
 8006830:	fa82 f24c 	uadd8	r2, r2, ip
 8006834:	faa4 f28c 	sel	r2, r4, ip
 8006838:	fa83 f34c 	uadd8	r3, r3, ip
 800683c:	faa2 f38c 	sel	r3, r2, ip
 8006840:	bb4b      	cbnz	r3, 8006896 <strlen+0x96>
 8006842:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8006846:	fa82 f24c 	uadd8	r2, r2, ip
 800684a:	f100 0008 	add.w	r0, r0, #8
 800684e:	faa4 f28c 	sel	r2, r4, ip
 8006852:	fa83 f34c 	uadd8	r3, r3, ip
 8006856:	faa2 f38c 	sel	r3, r2, ip
 800685a:	b9e3      	cbnz	r3, 8006896 <strlen+0x96>
 800685c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8006860:	fa82 f24c 	uadd8	r2, r2, ip
 8006864:	f100 0008 	add.w	r0, r0, #8
 8006868:	faa4 f28c 	sel	r2, r4, ip
 800686c:	fa83 f34c 	uadd8	r3, r3, ip
 8006870:	faa2 f38c 	sel	r3, r2, ip
 8006874:	b97b      	cbnz	r3, 8006896 <strlen+0x96>
 8006876:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800687a:	f101 0120 	add.w	r1, r1, #32
 800687e:	fa82 f24c 	uadd8	r2, r2, ip
 8006882:	f100 0008 	add.w	r0, r0, #8
 8006886:	faa4 f28c 	sel	r2, r4, ip
 800688a:	fa83 f34c 	uadd8	r3, r3, ip
 800688e:	faa2 f38c 	sel	r3, r2, ip
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0c6      	beq.n	8006824 <strlen+0x24>
 8006896:	2a00      	cmp	r2, #0
 8006898:	bf04      	itt	eq
 800689a:	3004      	addeq	r0, #4
 800689c:	461a      	moveq	r2, r3
 800689e:	ba12      	rev	r2, r2
 80068a0:	fab2 f282 	clz	r2, r2
 80068a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80068a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80068ac:	4770      	bx	lr
 80068ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80068b2:	f004 0503 	and.w	r5, r4, #3
 80068b6:	f1c4 0000 	rsb	r0, r4, #0
 80068ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80068be:	f014 0f04 	tst.w	r4, #4
 80068c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80068c6:	fa0c f505 	lsl.w	r5, ip, r5
 80068ca:	ea62 0205 	orn	r2, r2, r5
 80068ce:	bf1c      	itt	ne
 80068d0:	ea63 0305 	ornne	r3, r3, r5
 80068d4:	4662      	movne	r2, ip
 80068d6:	f04f 0400 	mov.w	r4, #0
 80068da:	e7a9      	b.n	8006830 <strlen+0x30>

080068dc <strncpy>:
 80068dc:	ea40 0301 	orr.w	r3, r0, r1
 80068e0:	079b      	lsls	r3, r3, #30
 80068e2:	b470      	push	{r4, r5, r6}
 80068e4:	d12a      	bne.n	800693c <strncpy+0x60>
 80068e6:	2a03      	cmp	r2, #3
 80068e8:	d928      	bls.n	800693c <strncpy+0x60>
 80068ea:	460c      	mov	r4, r1
 80068ec:	4603      	mov	r3, r0
 80068ee:	4621      	mov	r1, r4
 80068f0:	f854 6b04 	ldr.w	r6, [r4], #4
 80068f4:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 80068f8:	ea25 0506 	bic.w	r5, r5, r6
 80068fc:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8006900:	d106      	bne.n	8006910 <strncpy+0x34>
 8006902:	3a04      	subs	r2, #4
 8006904:	2a03      	cmp	r2, #3
 8006906:	f843 6b04 	str.w	r6, [r3], #4
 800690a:	4621      	mov	r1, r4
 800690c:	d8ef      	bhi.n	80068ee <strncpy+0x12>
 800690e:	b19a      	cbz	r2, 8006938 <strncpy+0x5c>
 8006910:	780c      	ldrb	r4, [r1, #0]
 8006912:	701c      	strb	r4, [r3, #0]
 8006914:	3a01      	subs	r2, #1
 8006916:	3301      	adds	r3, #1
 8006918:	b13c      	cbz	r4, 800692a <strncpy+0x4e>
 800691a:	b16a      	cbz	r2, 8006938 <strncpy+0x5c>
 800691c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006920:	f803 4b01 	strb.w	r4, [r3], #1
 8006924:	3a01      	subs	r2, #1
 8006926:	2c00      	cmp	r4, #0
 8006928:	d1f7      	bne.n	800691a <strncpy+0x3e>
 800692a:	b12a      	cbz	r2, 8006938 <strncpy+0x5c>
 800692c:	441a      	add	r2, r3
 800692e:	2100      	movs	r1, #0
 8006930:	f803 1b01 	strb.w	r1, [r3], #1
 8006934:	4293      	cmp	r3, r2
 8006936:	d1fb      	bne.n	8006930 <strncpy+0x54>
 8006938:	bc70      	pop	{r4, r5, r6}
 800693a:	4770      	bx	lr
 800693c:	4603      	mov	r3, r0
 800693e:	e7e6      	b.n	800690e <strncpy+0x32>

08006940 <__ssprint_r>:
 8006940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	6893      	ldr	r3, [r2, #8]
 8006946:	b083      	sub	sp, #12
 8006948:	4690      	mov	r8, r2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d06c      	beq.n	8006a28 <__ssprint_r+0xe8>
 800694e:	6817      	ldr	r7, [r2, #0]
 8006950:	688d      	ldr	r5, [r1, #8]
 8006952:	4682      	mov	sl, r0
 8006954:	460c      	mov	r4, r1
 8006956:	6808      	ldr	r0, [r1, #0]
 8006958:	3708      	adds	r7, #8
 800695a:	e042      	b.n	80069e2 <__ssprint_r+0xa2>
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006962:	d02d      	beq.n	80069c0 <__ssprint_r+0x80>
 8006964:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 8006968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800696c:	eba0 0b01 	sub.w	fp, r0, r1
 8006970:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006974:	1c70      	adds	r0, r6, #1
 8006976:	106d      	asrs	r5, r5, #1
 8006978:	4458      	add	r0, fp
 800697a:	42a8      	cmp	r0, r5
 800697c:	462a      	mov	r2, r5
 800697e:	bf84      	itt	hi
 8006980:	4605      	movhi	r5, r0
 8006982:	462a      	movhi	r2, r5
 8006984:	055b      	lsls	r3, r3, #21
 8006986:	d536      	bpl.n	80069f6 <__ssprint_r+0xb6>
 8006988:	4611      	mov	r1, r2
 800698a:	4650      	mov	r0, sl
 800698c:	f7fe fed8 	bl	8005740 <_malloc_r>
 8006990:	2800      	cmp	r0, #0
 8006992:	d03a      	beq.n	8006a0a <__ssprint_r+0xca>
 8006994:	465a      	mov	r2, fp
 8006996:	6921      	ldr	r1, [r4, #16]
 8006998:	9001      	str	r0, [sp, #4]
 800699a:	f7ff f9c9 	bl	8005d30 <memcpy>
 800699e:	89a2      	ldrh	r2, [r4, #12]
 80069a0:	9b01      	ldr	r3, [sp, #4]
 80069a2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80069a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069aa:	81a2      	strh	r2, [r4, #12]
 80069ac:	eba5 020b 	sub.w	r2, r5, fp
 80069b0:	eb03 000b 	add.w	r0, r3, fp
 80069b4:	6165      	str	r5, [r4, #20]
 80069b6:	6123      	str	r3, [r4, #16]
 80069b8:	6020      	str	r0, [r4, #0]
 80069ba:	60a2      	str	r2, [r4, #8]
 80069bc:	4635      	mov	r5, r6
 80069be:	46b3      	mov	fp, r6
 80069c0:	465a      	mov	r2, fp
 80069c2:	4649      	mov	r1, r9
 80069c4:	f000 fe86 	bl	80076d4 <memmove>
 80069c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80069cc:	68a2      	ldr	r2, [r4, #8]
 80069ce:	6820      	ldr	r0, [r4, #0]
 80069d0:	1b55      	subs	r5, r2, r5
 80069d2:	4458      	add	r0, fp
 80069d4:	1b9e      	subs	r6, r3, r6
 80069d6:	60a5      	str	r5, [r4, #8]
 80069d8:	6020      	str	r0, [r4, #0]
 80069da:	f8c8 6008 	str.w	r6, [r8, #8]
 80069de:	b31e      	cbz	r6, 8006a28 <__ssprint_r+0xe8>
 80069e0:	3708      	adds	r7, #8
 80069e2:	e957 9602 	ldrd	r9, r6, [r7, #-8]
 80069e6:	46ab      	mov	fp, r5
 80069e8:	2e00      	cmp	r6, #0
 80069ea:	d0f9      	beq.n	80069e0 <__ssprint_r+0xa0>
 80069ec:	42ae      	cmp	r6, r5
 80069ee:	d2b5      	bcs.n	800695c <__ssprint_r+0x1c>
 80069f0:	4635      	mov	r5, r6
 80069f2:	46b3      	mov	fp, r6
 80069f4:	e7e4      	b.n	80069c0 <__ssprint_r+0x80>
 80069f6:	4650      	mov	r0, sl
 80069f8:	f000 ff1a 	bl	8007830 <_realloc_r>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d1d4      	bne.n	80069ac <__ssprint_r+0x6c>
 8006a02:	6921      	ldr	r1, [r4, #16]
 8006a04:	4650      	mov	r0, sl
 8006a06:	f7fe fd89 	bl	800551c <_free_r>
 8006a0a:	230c      	movs	r3, #12
 8006a0c:	f8ca 3000 	str.w	r3, [sl]
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a1c:	81a3      	strh	r3, [r4, #12]
 8006a1e:	e9c8 2201 	strd	r2, r2, [r8, #4]
 8006a22:	b003      	add	sp, #12
 8006a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a28:	2000      	movs	r0, #0
 8006a2a:	f8c8 0004 	str.w	r0, [r8, #4]
 8006a2e:	b003      	add	sp, #12
 8006a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a34 <_svfiprintf_r>:
 8006a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a38:	4691      	mov	r9, r2
 8006a3a:	898a      	ldrh	r2, [r1, #12]
 8006a3c:	b0bd      	sub	sp, #244	; 0xf4
 8006a3e:	0616      	lsls	r6, r2, #24
 8006a40:	9101      	str	r1, [sp, #4]
 8006a42:	e9cd 0306 	strd	r0, r3, [sp, #24]
 8006a46:	d503      	bpl.n	8006a50 <_svfiprintf_r+0x1c>
 8006a48:	690b      	ldr	r3, [r1, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 8512 	beq.w	8007474 <_svfiprintf_r+0xa40>
 8006a50:	2300      	movs	r3, #0
 8006a52:	9309      	str	r3, [sp, #36]	; 0x24
 8006a54:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8006a58:	930a      	str	r3, [sp, #40]	; 0x28
 8006a5a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8006a5e:	9303      	str	r3, [sp, #12]
 8006a60:	ab13      	add	r3, sp, #76	; 0x4c
 8006a62:	9310      	str	r3, [sp, #64]	; 0x40
 8006a64:	469a      	mov	sl, r3
 8006a66:	f899 3000 	ldrb.w	r3, [r9]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 80b6 	beq.w	8006bdc <_svfiprintf_r+0x1a8>
 8006a70:	2b25      	cmp	r3, #37	; 0x25
 8006a72:	464c      	mov	r4, r9
 8006a74:	d102      	bne.n	8006a7c <_svfiprintf_r+0x48>
 8006a76:	e01e      	b.n	8006ab6 <_svfiprintf_r+0x82>
 8006a78:	2b25      	cmp	r3, #37	; 0x25
 8006a7a:	d003      	beq.n	8006a84 <_svfiprintf_r+0x50>
 8006a7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1f9      	bne.n	8006a78 <_svfiprintf_r+0x44>
 8006a84:	eba4 0509 	sub.w	r5, r4, r9
 8006a88:	b18d      	cbz	r5, 8006aae <_svfiprintf_r+0x7a>
 8006a8a:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
 8006a8e:	3301      	adds	r3, #1
 8006a90:	442a      	add	r2, r5
 8006a92:	2b07      	cmp	r3, #7
 8006a94:	f8ca 9000 	str.w	r9, [sl]
 8006a98:	f8ca 5004 	str.w	r5, [sl, #4]
 8006a9c:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
 8006aa0:	f300 8093 	bgt.w	8006bca <_svfiprintf_r+0x196>
 8006aa4:	f10a 0a08 	add.w	sl, sl, #8
 8006aa8:	9b03      	ldr	r3, [sp, #12]
 8006aaa:	442b      	add	r3, r5
 8006aac:	9303      	str	r3, [sp, #12]
 8006aae:	7823      	ldrb	r3, [r4, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8093 	beq.w	8006bdc <_svfiprintf_r+0x1a8>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f04f 0200 	mov.w	r2, #0
 8006abc:	9305      	str	r3, [sp, #20]
 8006abe:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8006ac2:	469b      	mov	fp, r3
 8006ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ac8:	7863      	ldrb	r3, [r4, #1]
 8006aca:	9202      	str	r2, [sp, #8]
 8006acc:	f104 0901 	add.w	r9, r4, #1
 8006ad0:	252b      	movs	r5, #43	; 0x2b
 8006ad2:	f109 0901 	add.w	r9, r9, #1
 8006ad6:	f1a3 0220 	sub.w	r2, r3, #32
 8006ada:	2a5a      	cmp	r2, #90	; 0x5a
 8006adc:	f200 8376 	bhi.w	80071cc <_svfiprintf_r+0x798>
 8006ae0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006ae4:	03740175 	.word	0x03740175
 8006ae8:	01700374 	.word	0x01700374
 8006aec:	03740374 	.word	0x03740374
 8006af0:	01510374 	.word	0x01510374
 8006af4:	03740374 	.word	0x03740374
 8006af8:	02db02e0 	.word	0x02db02e0
 8006afc:	019a0374 	.word	0x019a0374
 8006b00:	03740180 	.word	0x03740180
 8006b04:	013502d6 	.word	0x013502d6
 8006b08:	01350135 	.word	0x01350135
 8006b0c:	01350135 	.word	0x01350135
 8006b10:	01350135 	.word	0x01350135
 8006b14:	01350135 	.word	0x01350135
 8006b18:	03740374 	.word	0x03740374
 8006b1c:	03740374 	.word	0x03740374
 8006b20:	03740374 	.word	0x03740374
 8006b24:	03740374 	.word	0x03740374
 8006b28:	01b50374 	.word	0x01b50374
 8006b2c:	0374019f 	.word	0x0374019f
 8006b30:	03740374 	.word	0x03740374
 8006b34:	03740374 	.word	0x03740374
 8006b38:	03740374 	.word	0x03740374
 8006b3c:	03740374 	.word	0x03740374
 8006b40:	00600374 	.word	0x00600374
 8006b44:	03740374 	.word	0x03740374
 8006b48:	03160374 	.word	0x03160374
 8006b4c:	03020374 	.word	0x03020374
 8006b50:	03740374 	.word	0x03740374
 8006b54:	037402ec 	.word	0x037402ec
 8006b58:	03740374 	.word	0x03740374
 8006b5c:	03740374 	.word	0x03740374
 8006b60:	03740374 	.word	0x03740374
 8006b64:	03740374 	.word	0x03740374
 8006b68:	01b50374 	.word	0x01b50374
 8006b6c:	037400e7 	.word	0x037400e7
 8006b70:	03740374 	.word	0x03740374
 8006b74:	00e70144 	.word	0x00e70144
 8006b78:	0374005b 	.word	0x0374005b
 8006b7c:	03740348 	.word	0x03740348
 8006b80:	00620331 	.word	0x00620331
 8006b84:	005b0355 	.word	0x005b0355
 8006b88:	03160374 	.word	0x03160374
 8006b8c:	0090005d 	.word	0x0090005d
 8006b90:	03740374 	.word	0x03740374
 8006b94:	037400c7 	.word	0x037400c7
 8006b98:	005d      	.short	0x005d
 8006b9a:	f04b 0b20 	orr.w	fp, fp, #32
 8006b9e:	f899 3000 	ldrb.w	r3, [r9]
 8006ba2:	e796      	b.n	8006ad2 <_svfiprintf_r+0x9e>
 8006ba4:	f04b 0b10 	orr.w	fp, fp, #16
 8006ba8:	f01b 0f20 	tst.w	fp, #32
 8006bac:	f000 82fe 	beq.w	80071ac <_svfiprintf_r+0x778>
 8006bb0:	9b07      	ldr	r3, [sp, #28]
 8006bb2:	3307      	adds	r3, #7
 8006bb4:	f023 0307 	bic.w	r3, r3, #7
 8006bb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006bbc:	f103 0208 	add.w	r2, r3, #8
 8006bc0:	9207      	str	r2, [sp, #28]
 8006bc2:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	e02a      	b.n	8006c20 <_svfiprintf_r+0x1ec>
 8006bca:	aa10      	add	r2, sp, #64	; 0x40
 8006bcc:	9901      	ldr	r1, [sp, #4]
 8006bce:	9806      	ldr	r0, [sp, #24]
 8006bd0:	f7ff feb6 	bl	8006940 <__ssprint_r>
 8006bd4:	b948      	cbnz	r0, 8006bea <_svfiprintf_r+0x1b6>
 8006bd6:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 8006bda:	e765      	b.n	8006aa8 <_svfiprintf_r+0x74>
 8006bdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bde:	b123      	cbz	r3, 8006bea <_svfiprintf_r+0x1b6>
 8006be0:	9806      	ldr	r0, [sp, #24]
 8006be2:	9901      	ldr	r1, [sp, #4]
 8006be4:	aa10      	add	r2, sp, #64	; 0x40
 8006be6:	f7ff feab 	bl	8006940 <__ssprint_r>
 8006bea:	9b01      	ldr	r3, [sp, #4]
 8006bec:	899b      	ldrh	r3, [r3, #12]
 8006bee:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006bf2:	9b03      	ldr	r3, [sp, #12]
 8006bf4:	bf18      	it	ne
 8006bf6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8006bfa:	9303      	str	r3, [sp, #12]
 8006bfc:	9803      	ldr	r0, [sp, #12]
 8006bfe:	b03d      	add	sp, #244	; 0xf4
 8006c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c04:	465b      	mov	r3, fp
 8006c06:	069e      	lsls	r6, r3, #26
 8006c08:	9a07      	ldr	r2, [sp, #28]
 8006c0a:	f140 8273 	bpl.w	80070f4 <_svfiprintf_r+0x6c0>
 8006c0e:	3207      	adds	r2, #7
 8006c10:	f022 0207 	bic.w	r2, r2, #7
 8006c14:	f102 0108 	add.w	r1, r2, #8
 8006c18:	e9d2 6700 	ldrd	r6, r7, [r2]
 8006c1c:	9107      	str	r1, [sp, #28]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f04f 0100 	mov.w	r1, #0
 8006c24:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
 8006c28:	9902      	ldr	r1, [sp, #8]
 8006c2a:	3101      	adds	r1, #1
 8006c2c:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8006c30:	f000 8337 	beq.w	80072a2 <_svfiprintf_r+0x86e>
 8006c34:	ea56 0107 	orrs.w	r1, r6, r7
 8006c38:	f023 0b80 	bic.w	fp, r3, #128	; 0x80
 8006c3c:	d15e      	bne.n	8006cfc <_svfiprintf_r+0x2c8>
 8006c3e:	9902      	ldr	r1, [sp, #8]
 8006c40:	2900      	cmp	r1, #0
 8006c42:	f040 842d 	bne.w	80074a0 <_svfiprintf_r+0xa6c>
 8006c46:	2a00      	cmp	r2, #0
 8006c48:	f040 8388 	bne.w	800735c <_svfiprintf_r+0x928>
 8006c4c:	f013 0301 	ands.w	r3, r3, #1
 8006c50:	ad3c      	add	r5, sp, #240	; 0xf0
 8006c52:	9304      	str	r3, [sp, #16]
 8006c54:	f040 83e0 	bne.w	8007418 <_svfiprintf_r+0x9e4>
 8006c58:	9a02      	ldr	r2, [sp, #8]
 8006c5a:	9904      	ldr	r1, [sp, #16]
 8006c5c:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8006c60:	428a      	cmp	r2, r1
 8006c62:	bfb8      	it	lt
 8006c64:	460a      	movlt	r2, r1
 8006c66:	4616      	mov	r6, r2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 80ff 	beq.w	8006e6c <_svfiprintf_r+0x438>
 8006c6e:	3601      	adds	r6, #1
 8006c70:	e0fc      	b.n	8006e6c <_svfiprintf_r+0x438>
 8006c72:	4ac3      	ldr	r2, [pc, #780]	; (8006f80 <_svfiprintf_r+0x54c>)
 8006c74:	9209      	str	r2, [sp, #36]	; 0x24
 8006c76:	f01b 0f20 	tst.w	fp, #32
 8006c7a:	f000 8225 	beq.w	80070c8 <_svfiprintf_r+0x694>
 8006c7e:	9a07      	ldr	r2, [sp, #28]
 8006c80:	3207      	adds	r2, #7
 8006c82:	f022 0207 	bic.w	r2, r2, #7
 8006c86:	e9d2 6700 	ldrd	r6, r7, [r2]
 8006c8a:	f102 0108 	add.w	r1, r2, #8
 8006c8e:	9107      	str	r1, [sp, #28]
 8006c90:	f01b 0f01 	tst.w	fp, #1
 8006c94:	d009      	beq.n	8006caa <_svfiprintf_r+0x276>
 8006c96:	ea56 0207 	orrs.w	r2, r6, r7
 8006c9a:	d006      	beq.n	8006caa <_svfiprintf_r+0x276>
 8006c9c:	2230      	movs	r2, #48	; 0x30
 8006c9e:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8006ca2:	f04b 0b02 	orr.w	fp, fp, #2
 8006ca6:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
 8006caa:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8006cae:	2202      	movs	r2, #2
 8006cb0:	e7b6      	b.n	8006c20 <_svfiprintf_r+0x1ec>
 8006cb2:	465b      	mov	r3, fp
 8006cb4:	069d      	lsls	r5, r3, #26
 8006cb6:	f140 80b9 	bpl.w	8006e2c <_svfiprintf_r+0x3f8>
 8006cba:	9a07      	ldr	r2, [sp, #28]
 8006cbc:	3207      	adds	r2, #7
 8006cbe:	f022 0207 	bic.w	r2, r2, #7
 8006cc2:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006cc6:	3208      	adds	r2, #8
 8006cc8:	9207      	str	r2, [sp, #28]
 8006cca:	4606      	mov	r6, r0
 8006ccc:	460f      	mov	r7, r1
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f171 0200 	sbcs.w	r2, r1, #0
 8006cd4:	da05      	bge.n	8006ce2 <_svfiprintf_r+0x2ae>
 8006cd6:	222d      	movs	r2, #45	; 0x2d
 8006cd8:	4276      	negs	r6, r6
 8006cda:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8006cde:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8006ce2:	9a02      	ldr	r2, [sp, #8]
 8006ce4:	3201      	adds	r2, #1
 8006ce6:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8006cea:	f000 833b 	beq.w	8007364 <_svfiprintf_r+0x930>
 8006cee:	ea56 0107 	orrs.w	r1, r6, r7
 8006cf2:	f04f 0201 	mov.w	r2, #1
 8006cf6:	f023 0b80 	bic.w	fp, r3, #128	; 0x80
 8006cfa:	d0a0      	beq.n	8006c3e <_svfiprintf_r+0x20a>
 8006cfc:	2a01      	cmp	r2, #1
 8006cfe:	f000 82d4 	beq.w	80072aa <_svfiprintf_r+0x876>
 8006d02:	2a02      	cmp	r2, #2
 8006d04:	f000 8306 	beq.w	8007314 <_svfiprintf_r+0x8e0>
 8006d08:	a93c      	add	r1, sp, #240	; 0xf0
 8006d0a:	e000      	b.n	8006d0e <_svfiprintf_r+0x2da>
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	08f2      	lsrs	r2, r6, #3
 8006d10:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8006d14:	08f8      	lsrs	r0, r7, #3
 8006d16:	f006 0307 	and.w	r3, r6, #7
 8006d1a:	4607      	mov	r7, r0
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	3330      	adds	r3, #48	; 0x30
 8006d20:	ea56 0207 	orrs.w	r2, r6, r7
 8006d24:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006d28:	f101 35ff 	add.w	r5, r1, #4294967295	; 0xffffffff
 8006d2c:	d1ee      	bne.n	8006d0c <_svfiprintf_r+0x2d8>
 8006d2e:	f01b 0f01 	tst.w	fp, #1
 8006d32:	f000 825b 	beq.w	80071ec <_svfiprintf_r+0x7b8>
 8006d36:	2b30      	cmp	r3, #48	; 0x30
 8006d38:	f000 8258 	beq.w	80071ec <_svfiprintf_r+0x7b8>
 8006d3c:	3902      	subs	r1, #2
 8006d3e:	2330      	movs	r3, #48	; 0x30
 8006d40:	eba8 0201 	sub.w	r2, r8, r1
 8006d44:	f805 3c01 	strb.w	r3, [r5, #-1]
 8006d48:	9204      	str	r2, [sp, #16]
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	e784      	b.n	8006c58 <_svfiprintf_r+0x224>
 8006d4e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006d52:	2100      	movs	r1, #0
 8006d54:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006d58:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006d5c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006d60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006d64:	2a09      	cmp	r2, #9
 8006d66:	d9f5      	bls.n	8006d54 <_svfiprintf_r+0x320>
 8006d68:	9105      	str	r1, [sp, #20]
 8006d6a:	e6b4      	b.n	8006ad6 <_svfiprintf_r+0xa2>
 8006d6c:	f899 3000 	ldrb.w	r3, [r9]
 8006d70:	2b68      	cmp	r3, #104	; 0x68
 8006d72:	bf03      	ittte	eq
 8006d74:	f899 3001 	ldrbeq.w	r3, [r9, #1]
 8006d78:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8006d7c:	f109 0901 	addeq.w	r9, r9, #1
 8006d80:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8006d84:	e6a5      	b.n	8006ad2 <_svfiprintf_r+0x9e>
 8006d86:	9e06      	ldr	r6, [sp, #24]
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f7fe fcbd 	bl	8005708 <_localeconv_r>
 8006d8e:	6843      	ldr	r3, [r0, #4]
 8006d90:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fd34 	bl	8006800 <strlen>
 8006d98:	900c      	str	r0, [sp, #48]	; 0x30
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f7fe fcb3 	bl	8005708 <_localeconv_r>
 8006da2:	6882      	ldr	r2, [r0, #8]
 8006da4:	920a      	str	r2, [sp, #40]	; 0x28
 8006da6:	2c00      	cmp	r4, #0
 8006da8:	f43f aef9 	beq.w	8006b9e <_svfiprintf_r+0x16a>
 8006dac:	f899 3000 	ldrb.w	r3, [r9]
 8006db0:	2a00      	cmp	r2, #0
 8006db2:	f43f ae8e 	beq.w	8006ad2 <_svfiprintf_r+0x9e>
 8006db6:	7812      	ldrb	r2, [r2, #0]
 8006db8:	2a00      	cmp	r2, #0
 8006dba:	f43f ae8a 	beq.w	8006ad2 <_svfiprintf_r+0x9e>
 8006dbe:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8006dc2:	e686      	b.n	8006ad2 <_svfiprintf_r+0x9e>
 8006dc4:	f04b 0b01 	orr.w	fp, fp, #1
 8006dc8:	f899 3000 	ldrb.w	r3, [r9]
 8006dcc:	e681      	b.n	8006ad2 <_svfiprintf_r+0x9e>
 8006dce:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8006dd2:	f899 3000 	ldrb.w	r3, [r9]
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	f47f ae7b 	bne.w	8006ad2 <_svfiprintf_r+0x9e>
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8006de2:	e676      	b.n	8006ad2 <_svfiprintf_r+0x9e>
 8006de4:	f899 3000 	ldrb.w	r3, [r9]
 8006de8:	2b2a      	cmp	r3, #42	; 0x2a
 8006dea:	f109 0101 	add.w	r1, r9, #1
 8006dee:	f000 83a2 	beq.w	8007536 <_svfiprintf_r+0xb02>
 8006df2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006df6:	2a09      	cmp	r2, #9
 8006df8:	4689      	mov	r9, r1
 8006dfa:	f200 838f 	bhi.w	800751c <_svfiprintf_r+0xae8>
 8006dfe:	2100      	movs	r1, #0
 8006e00:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006e04:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006e08:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006e0c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006e10:	2a09      	cmp	r2, #9
 8006e12:	d9f5      	bls.n	8006e00 <_svfiprintf_r+0x3cc>
 8006e14:	9102      	str	r1, [sp, #8]
 8006e16:	e65e      	b.n	8006ad6 <_svfiprintf_r+0xa2>
 8006e18:	f899 3000 	ldrb.w	r3, [r9]
 8006e1c:	f04b 0b04 	orr.w	fp, fp, #4
 8006e20:	e657      	b.n	8006ad2 <_svfiprintf_r+0x9e>
 8006e22:	f04b 0310 	orr.w	r3, fp, #16
 8006e26:	069d      	lsls	r5, r3, #26
 8006e28:	f53f af47 	bmi.w	8006cba <_svfiprintf_r+0x286>
 8006e2c:	9907      	ldr	r1, [sp, #28]
 8006e2e:	06dc      	lsls	r4, r3, #27
 8006e30:	f101 0204 	add.w	r2, r1, #4
 8006e34:	f100 82fe 	bmi.w	8007434 <_svfiprintf_r+0xa00>
 8006e38:	0658      	lsls	r0, r3, #25
 8006e3a:	9907      	ldr	r1, [sp, #28]
 8006e3c:	f140 82f8 	bpl.w	8007430 <_svfiprintf_r+0x9fc>
 8006e40:	f9b1 6000 	ldrsh.w	r6, [r1]
 8006e44:	9207      	str	r2, [sp, #28]
 8006e46:	17f7      	asrs	r7, r6, #31
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	e73f      	b.n	8006cce <_svfiprintf_r+0x29a>
 8006e4e:	9a07      	ldr	r2, [sp, #28]
 8006e50:	6813      	ldr	r3, [r2, #0]
 8006e52:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8006e56:	f04f 0100 	mov.w	r1, #0
 8006e5a:	2601      	movs	r6, #1
 8006e5c:	1d13      	adds	r3, r2, #4
 8006e5e:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
 8006e62:	9307      	str	r3, [sp, #28]
 8006e64:	9604      	str	r6, [sp, #16]
 8006e66:	ad23      	add	r5, sp, #140	; 0x8c
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9302      	str	r3, [sp, #8]
 8006e6c:	f01b 0302 	ands.w	r3, fp, #2
 8006e70:	bf18      	it	ne
 8006e72:	3602      	addne	r6, #2
 8006e74:	f01b 0084 	ands.w	r0, fp, #132	; 0x84
 8006e78:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 8006e7c:	9008      	str	r0, [sp, #32]
 8006e7e:	d13d      	bne.n	8006efc <_svfiprintf_r+0x4c8>
 8006e80:	9805      	ldr	r0, [sp, #20]
 8006e82:	1b84      	subs	r4, r0, r6
 8006e84:	2c00      	cmp	r4, #0
 8006e86:	dd39      	ble.n	8006efc <_svfiprintf_r+0x4c8>
 8006e88:	2c10      	cmp	r4, #16
 8006e8a:	4f3e      	ldr	r7, [pc, #248]	; (8006f84 <_svfiprintf_r+0x550>)
 8006e8c:	dd2b      	ble.n	8006ee6 <_svfiprintf_r+0x4b2>
 8006e8e:	4650      	mov	r0, sl
 8006e90:	46ca      	mov	sl, r9
 8006e92:	46b1      	mov	r9, r6
 8006e94:	461e      	mov	r6, r3
 8006e96:	463b      	mov	r3, r7
 8006e98:	f04f 0810 	mov.w	r8, #16
 8006e9c:	462f      	mov	r7, r5
 8006e9e:	461d      	mov	r5, r3
 8006ea0:	e004      	b.n	8006eac <_svfiprintf_r+0x478>
 8006ea2:	3c10      	subs	r4, #16
 8006ea4:	2c10      	cmp	r4, #16
 8006ea6:	f100 0008 	add.w	r0, r0, #8
 8006eaa:	dd15      	ble.n	8006ed8 <_svfiprintf_r+0x4a4>
 8006eac:	3101      	adds	r1, #1
 8006eae:	3210      	adds	r2, #16
 8006eb0:	2907      	cmp	r1, #7
 8006eb2:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 8006eb6:	e9c0 5800 	strd	r5, r8, [r0]
 8006eba:	ddf2      	ble.n	8006ea2 <_svfiprintf_r+0x46e>
 8006ebc:	aa10      	add	r2, sp, #64	; 0x40
 8006ebe:	9901      	ldr	r1, [sp, #4]
 8006ec0:	9806      	ldr	r0, [sp, #24]
 8006ec2:	f7ff fd3d 	bl	8006940 <__ssprint_r>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f47f ae8f 	bne.w	8006bea <_svfiprintf_r+0x1b6>
 8006ecc:	3c10      	subs	r4, #16
 8006ece:	2c10      	cmp	r4, #16
 8006ed0:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 8006ed4:	a813      	add	r0, sp, #76	; 0x4c
 8006ed6:	dce9      	bgt.n	8006eac <_svfiprintf_r+0x478>
 8006ed8:	4633      	mov	r3, r6
 8006eda:	464e      	mov	r6, r9
 8006edc:	46d1      	mov	r9, sl
 8006ede:	4682      	mov	sl, r0
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	463d      	mov	r5, r7
 8006ee4:	4607      	mov	r7, r0
 8006ee6:	3101      	adds	r1, #1
 8006ee8:	4422      	add	r2, r4
 8006eea:	2907      	cmp	r1, #7
 8006eec:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 8006ef0:	e9ca 7400 	strd	r7, r4, [sl]
 8006ef4:	f300 8277 	bgt.w	80073e6 <_svfiprintf_r+0x9b2>
 8006ef8:	f10a 0a08 	add.w	sl, sl, #8
 8006efc:	f89d 403b 	ldrb.w	r4, [sp, #59]	; 0x3b
 8006f00:	f101 0c01 	add.w	ip, r1, #1
 8006f04:	f10a 0008 	add.w	r0, sl, #8
 8006f08:	b194      	cbz	r4, 8006f30 <_svfiprintf_r+0x4fc>
 8006f0a:	3201      	adds	r2, #1
 8006f0c:	f10d 073b 	add.w	r7, sp, #59	; 0x3b
 8006f10:	2401      	movs	r4, #1
 8006f12:	f1bc 0f07 	cmp.w	ip, #7
 8006f16:	e9cd c211 	strd	ip, r2, [sp, #68]	; 0x44
 8006f1a:	e9ca 7400 	strd	r7, r4, [sl]
 8006f1e:	f300 81cf 	bgt.w	80072c0 <_svfiprintf_r+0x88c>
 8006f22:	1c8f      	adds	r7, r1, #2
 8006f24:	f10a 0410 	add.w	r4, sl, #16
 8006f28:	4661      	mov	r1, ip
 8006f2a:	4682      	mov	sl, r0
 8006f2c:	46bc      	mov	ip, r7
 8006f2e:	4620      	mov	r0, r4
 8006f30:	b17b      	cbz	r3, 8006f52 <_svfiprintf_r+0x51e>
 8006f32:	3202      	adds	r2, #2
 8006f34:	a90f      	add	r1, sp, #60	; 0x3c
 8006f36:	2302      	movs	r3, #2
 8006f38:	f1bc 0f07 	cmp.w	ip, #7
 8006f3c:	e9cd c211 	strd	ip, r2, [sp, #68]	; 0x44
 8006f40:	e9ca 1300 	strd	r1, r3, [sl]
 8006f44:	f300 81ce 	bgt.w	80072e4 <_svfiprintf_r+0x8b0>
 8006f48:	4661      	mov	r1, ip
 8006f4a:	4682      	mov	sl, r0
 8006f4c:	f10c 0c01 	add.w	ip, ip, #1
 8006f50:	3008      	adds	r0, #8
 8006f52:	9b08      	ldr	r3, [sp, #32]
 8006f54:	2b80      	cmp	r3, #128	; 0x80
 8006f56:	f000 814d 	beq.w	80071f4 <_svfiprintf_r+0x7c0>
 8006f5a:	9b02      	ldr	r3, [sp, #8]
 8006f5c:	9c04      	ldr	r4, [sp, #16]
 8006f5e:	1b1c      	subs	r4, r3, r4
 8006f60:	2c00      	cmp	r4, #0
 8006f62:	dd46      	ble.n	8006ff2 <_svfiprintf_r+0x5be>
 8006f64:	2c10      	cmp	r4, #16
 8006f66:	4f08      	ldr	r7, [pc, #32]	; (8006f88 <_svfiprintf_r+0x554>)
 8006f68:	f340 82ae 	ble.w	80074c8 <_svfiprintf_r+0xa94>
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	f04f 0810 	mov.w	r8, #16
 8006f72:	46ca      	mov	sl, r9
 8006f74:	46b1      	mov	r9, r6
 8006f76:	463e      	mov	r6, r7
 8006f78:	462f      	mov	r7, r5
 8006f7a:	9d06      	ldr	r5, [sp, #24]
 8006f7c:	e00b      	b.n	8006f96 <_svfiprintf_r+0x562>
 8006f7e:	bf00      	nop
 8006f80:	08008bd0 	.word	0x08008bd0
 8006f84:	08008d5c 	.word	0x08008d5c
 8006f88:	08008d6c 	.word	0x08008d6c
 8006f8c:	3c10      	subs	r4, #16
 8006f8e:	2c10      	cmp	r4, #16
 8006f90:	f100 0008 	add.w	r0, r0, #8
 8006f94:	dd15      	ble.n	8006fc2 <_svfiprintf_r+0x58e>
 8006f96:	3101      	adds	r1, #1
 8006f98:	3210      	adds	r2, #16
 8006f9a:	2907      	cmp	r1, #7
 8006f9c:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 8006fa0:	e9c0 6800 	strd	r6, r8, [r0]
 8006fa4:	ddf2      	ble.n	8006f8c <_svfiprintf_r+0x558>
 8006fa6:	aa10      	add	r2, sp, #64	; 0x40
 8006fa8:	9901      	ldr	r1, [sp, #4]
 8006faa:	4628      	mov	r0, r5
 8006fac:	f7ff fcc8 	bl	8006940 <__ssprint_r>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	f47f ae1a 	bne.w	8006bea <_svfiprintf_r+0x1b6>
 8006fb6:	3c10      	subs	r4, #16
 8006fb8:	2c10      	cmp	r4, #16
 8006fba:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 8006fbe:	a813      	add	r0, sp, #76	; 0x4c
 8006fc0:	dce9      	bgt.n	8006f96 <_svfiprintf_r+0x562>
 8006fc2:	463d      	mov	r5, r7
 8006fc4:	f101 0c01 	add.w	ip, r1, #1
 8006fc8:	4637      	mov	r7, r6
 8006fca:	f100 0308 	add.w	r3, r0, #8
 8006fce:	464e      	mov	r6, r9
 8006fd0:	46d1      	mov	r9, sl
 8006fd2:	4682      	mov	sl, r0
 8006fd4:	4422      	add	r2, r4
 8006fd6:	f1bc 0f07 	cmp.w	ip, #7
 8006fda:	9212      	str	r2, [sp, #72]	; 0x48
 8006fdc:	e9ca 7400 	strd	r7, r4, [sl]
 8006fe0:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8006fe4:	f300 81aa 	bgt.w	800733c <_svfiprintf_r+0x908>
 8006fe8:	f10c 0c01 	add.w	ip, ip, #1
 8006fec:	f103 0008 	add.w	r0, r3, #8
 8006ff0:	469a      	mov	sl, r3
 8006ff2:	9b04      	ldr	r3, [sp, #16]
 8006ff4:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8006ff8:	441a      	add	r2, r3
 8006ffa:	f1bc 0f07 	cmp.w	ip, #7
 8006ffe:	9212      	str	r2, [sp, #72]	; 0x48
 8007000:	e9ca 5300 	strd	r5, r3, [sl]
 8007004:	f300 8139 	bgt.w	800727a <_svfiprintf_r+0x846>
 8007008:	f01b 0f04 	tst.w	fp, #4
 800700c:	d031      	beq.n	8007072 <_svfiprintf_r+0x63e>
 800700e:	9b05      	ldr	r3, [sp, #20]
 8007010:	1b9c      	subs	r4, r3, r6
 8007012:	2c00      	cmp	r4, #0
 8007014:	dd2d      	ble.n	8007072 <_svfiprintf_r+0x63e>
 8007016:	2c10      	cmp	r4, #16
 8007018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800701a:	4fba      	ldr	r7, [pc, #744]	; (8007304 <_svfiprintf_r+0x8d0>)
 800701c:	dd20      	ble.n	8007060 <_svfiprintf_r+0x62c>
 800701e:	2510      	movs	r5, #16
 8007020:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007024:	f8dd a004 	ldr.w	sl, [sp, #4]
 8007028:	e004      	b.n	8007034 <_svfiprintf_r+0x600>
 800702a:	3c10      	subs	r4, #16
 800702c:	2c10      	cmp	r4, #16
 800702e:	f100 0008 	add.w	r0, r0, #8
 8007032:	dd15      	ble.n	8007060 <_svfiprintf_r+0x62c>
 8007034:	3301      	adds	r3, #1
 8007036:	3210      	adds	r2, #16
 8007038:	2b07      	cmp	r3, #7
 800703a:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
 800703e:	e9c0 7500 	strd	r7, r5, [r0]
 8007042:	ddf2      	ble.n	800702a <_svfiprintf_r+0x5f6>
 8007044:	aa10      	add	r2, sp, #64	; 0x40
 8007046:	4651      	mov	r1, sl
 8007048:	4640      	mov	r0, r8
 800704a:	f7ff fc79 	bl	8006940 <__ssprint_r>
 800704e:	2800      	cmp	r0, #0
 8007050:	f47f adcb 	bne.w	8006bea <_svfiprintf_r+0x1b6>
 8007054:	3c10      	subs	r4, #16
 8007056:	2c10      	cmp	r4, #16
 8007058:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
 800705c:	a813      	add	r0, sp, #76	; 0x4c
 800705e:	dce9      	bgt.n	8007034 <_svfiprintf_r+0x600>
 8007060:	3301      	adds	r3, #1
 8007062:	4422      	add	r2, r4
 8007064:	2b07      	cmp	r3, #7
 8007066:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
 800706a:	e9c0 7400 	strd	r7, r4, [r0]
 800706e:	f300 81c9 	bgt.w	8007404 <_svfiprintf_r+0x9d0>
 8007072:	9b03      	ldr	r3, [sp, #12]
 8007074:	9905      	ldr	r1, [sp, #20]
 8007076:	42b1      	cmp	r1, r6
 8007078:	bfac      	ite	ge
 800707a:	185b      	addge	r3, r3, r1
 800707c:	199b      	addlt	r3, r3, r6
 800707e:	9303      	str	r3, [sp, #12]
 8007080:	2a00      	cmp	r2, #0
 8007082:	f040 8105 	bne.w	8007290 <_svfiprintf_r+0x85c>
 8007086:	2300      	movs	r3, #0
 8007088:	9311      	str	r3, [sp, #68]	; 0x44
 800708a:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 800708e:	e4ea      	b.n	8006a66 <_svfiprintf_r+0x32>
 8007090:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8007094:	f899 3000 	ldrb.w	r3, [r9]
 8007098:	e51b      	b.n	8006ad2 <_svfiprintf_r+0x9e>
 800709a:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
 800709e:	f899 3000 	ldrb.w	r3, [r9]
 80070a2:	e516      	b.n	8006ad2 <_svfiprintf_r+0x9e>
 80070a4:	9a07      	ldr	r2, [sp, #28]
 80070a6:	f899 3000 	ldrb.w	r3, [r9]
 80070aa:	6811      	ldr	r1, [r2, #0]
 80070ac:	9105      	str	r1, [sp, #20]
 80070ae:	2900      	cmp	r1, #0
 80070b0:	f102 0204 	add.w	r2, r2, #4
 80070b4:	f2c0 81da 	blt.w	800746c <_svfiprintf_r+0xa38>
 80070b8:	9207      	str	r2, [sp, #28]
 80070ba:	e50a      	b.n	8006ad2 <_svfiprintf_r+0x9e>
 80070bc:	4a92      	ldr	r2, [pc, #584]	; (8007308 <_svfiprintf_r+0x8d4>)
 80070be:	9209      	str	r2, [sp, #36]	; 0x24
 80070c0:	f01b 0f20 	tst.w	fp, #32
 80070c4:	f47f addb 	bne.w	8006c7e <_svfiprintf_r+0x24a>
 80070c8:	9907      	ldr	r1, [sp, #28]
 80070ca:	f01b 0f10 	tst.w	fp, #16
 80070ce:	f101 0204 	add.w	r2, r1, #4
 80070d2:	f040 81b8 	bne.w	8007446 <_svfiprintf_r+0xa12>
 80070d6:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80070da:	9907      	ldr	r1, [sp, #28]
 80070dc:	f000 81b0 	beq.w	8007440 <_svfiprintf_r+0xa0c>
 80070e0:	880e      	ldrh	r6, [r1, #0]
 80070e2:	9207      	str	r2, [sp, #28]
 80070e4:	2700      	movs	r7, #0
 80070e6:	e5d3      	b.n	8006c90 <_svfiprintf_r+0x25c>
 80070e8:	f04b 0310 	orr.w	r3, fp, #16
 80070ec:	069e      	lsls	r6, r3, #26
 80070ee:	9a07      	ldr	r2, [sp, #28]
 80070f0:	f53f ad8d 	bmi.w	8006c0e <_svfiprintf_r+0x1da>
 80070f4:	06dd      	lsls	r5, r3, #27
 80070f6:	f102 0104 	add.w	r1, r2, #4
 80070fa:	f100 8193 	bmi.w	8007424 <_svfiprintf_r+0x9f0>
 80070fe:	065c      	lsls	r4, r3, #25
 8007100:	9a07      	ldr	r2, [sp, #28]
 8007102:	f140 818d 	bpl.w	8007420 <_svfiprintf_r+0x9ec>
 8007106:	8816      	ldrh	r6, [r2, #0]
 8007108:	9107      	str	r1, [sp, #28]
 800710a:	2700      	movs	r7, #0
 800710c:	2201      	movs	r2, #1
 800710e:	e587      	b.n	8006c20 <_svfiprintf_r+0x1ec>
 8007110:	9b07      	ldr	r3, [sp, #28]
 8007112:	681d      	ldr	r5, [r3, #0]
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800711c:	1d1c      	adds	r4, r3, #4
 800711e:	2d00      	cmp	r5, #0
 8007120:	f000 81d8 	beq.w	80074d4 <_svfiprintf_r+0xaa0>
 8007124:	9a02      	ldr	r2, [sp, #8]
 8007126:	1c53      	adds	r3, r2, #1
 8007128:	f000 81b1 	beq.w	800748e <_svfiprintf_r+0xa5a>
 800712c:	2100      	movs	r1, #0
 800712e:	4628      	mov	r0, r5
 8007130:	f7fe fdae 	bl	8005c90 <memchr>
 8007134:	2800      	cmp	r0, #0
 8007136:	f000 81f8 	beq.w	800752a <_svfiprintf_r+0xaf6>
 800713a:	1b43      	subs	r3, r0, r5
 800713c:	9304      	str	r3, [sp, #16]
 800713e:	2300      	movs	r3, #0
 8007140:	9407      	str	r4, [sp, #28]
 8007142:	9302      	str	r3, [sp, #8]
 8007144:	e588      	b.n	8006c58 <_svfiprintf_r+0x224>
 8007146:	9a07      	ldr	r2, [sp, #28]
 8007148:	f01b 0f20 	tst.w	fp, #32
 800714c:	f852 3b04 	ldr.w	r3, [r2], #4
 8007150:	9207      	str	r2, [sp, #28]
 8007152:	f040 8184 	bne.w	800745e <_svfiprintf_r+0xa2a>
 8007156:	f01b 0f10 	tst.w	fp, #16
 800715a:	f040 81b7 	bne.w	80074cc <_svfiprintf_r+0xa98>
 800715e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007162:	f040 81bf 	bne.w	80074e4 <_svfiprintf_r+0xab0>
 8007166:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800716a:	f000 81af 	beq.w	80074cc <_svfiprintf_r+0xa98>
 800716e:	9a03      	ldr	r2, [sp, #12]
 8007170:	701a      	strb	r2, [r3, #0]
 8007172:	e478      	b.n	8006a66 <_svfiprintf_r+0x32>
 8007174:	f899 3000 	ldrb.w	r3, [r9]
 8007178:	2b6c      	cmp	r3, #108	; 0x6c
 800717a:	bf03      	ittte	eq
 800717c:	f899 3001 	ldrbeq.w	r3, [r9, #1]
 8007180:	f04b 0b20 	orreq.w	fp, fp, #32
 8007184:	f109 0901 	addeq.w	r9, r9, #1
 8007188:	f04b 0b10 	orrne.w	fp, fp, #16
 800718c:	e4a1      	b.n	8006ad2 <_svfiprintf_r+0x9e>
 800718e:	9907      	ldr	r1, [sp, #28]
 8007190:	4b5e      	ldr	r3, [pc, #376]	; (800730c <_svfiprintf_r+0x8d8>)
 8007192:	680e      	ldr	r6, [r1, #0]
 8007194:	9309      	str	r3, [sp, #36]	; 0x24
 8007196:	f647 0230 	movw	r2, #30768	; 0x7830
 800719a:	3104      	adds	r1, #4
 800719c:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80071a0:	f04b 0302 	orr.w	r3, fp, #2
 80071a4:	9107      	str	r1, [sp, #28]
 80071a6:	2700      	movs	r7, #0
 80071a8:	2202      	movs	r2, #2
 80071aa:	e539      	b.n	8006c20 <_svfiprintf_r+0x1ec>
 80071ac:	9a07      	ldr	r2, [sp, #28]
 80071ae:	f01b 0f10 	tst.w	fp, #16
 80071b2:	f102 0304 	add.w	r3, r2, #4
 80071b6:	f040 814d 	bne.w	8007454 <_svfiprintf_r+0xa20>
 80071ba:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80071be:	9a07      	ldr	r2, [sp, #28]
 80071c0:	f000 8145 	beq.w	800744e <_svfiprintf_r+0xa1a>
 80071c4:	8816      	ldrh	r6, [r2, #0]
 80071c6:	9307      	str	r3, [sp, #28]
 80071c8:	2700      	movs	r7, #0
 80071ca:	e4fa      	b.n	8006bc2 <_svfiprintf_r+0x18e>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f43f ad05 	beq.w	8006bdc <_svfiprintf_r+0x1a8>
 80071d2:	2601      	movs	r6, #1
 80071d4:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 80071d8:	f04f 0300 	mov.w	r3, #0
 80071dc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 80071e0:	9604      	str	r6, [sp, #16]
 80071e2:	ad23      	add	r5, sp, #140	; 0x8c
 80071e4:	e640      	b.n	8006e68 <_svfiprintf_r+0x434>
 80071e6:	46c8      	mov	r8, r9
 80071e8:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80071ec:	eba8 0305 	sub.w	r3, r8, r5
 80071f0:	9304      	str	r3, [sp, #16]
 80071f2:	e531      	b.n	8006c58 <_svfiprintf_r+0x224>
 80071f4:	9b05      	ldr	r3, [sp, #20]
 80071f6:	1b9c      	subs	r4, r3, r6
 80071f8:	2c00      	cmp	r4, #0
 80071fa:	f77f aeae 	ble.w	8006f5a <_svfiprintf_r+0x526>
 80071fe:	2c10      	cmp	r4, #16
 8007200:	4f43      	ldr	r7, [pc, #268]	; (8007310 <_svfiprintf_r+0x8dc>)
 8007202:	f340 818f 	ble.w	8007524 <_svfiprintf_r+0xaf0>
 8007206:	4650      	mov	r0, sl
 8007208:	f04f 0810 	mov.w	r8, #16
 800720c:	46ca      	mov	sl, r9
 800720e:	46b1      	mov	r9, r6
 8007210:	463e      	mov	r6, r7
 8007212:	462f      	mov	r7, r5
 8007214:	9d06      	ldr	r5, [sp, #24]
 8007216:	e004      	b.n	8007222 <_svfiprintf_r+0x7ee>
 8007218:	3c10      	subs	r4, #16
 800721a:	2c10      	cmp	r4, #16
 800721c:	f100 0008 	add.w	r0, r0, #8
 8007220:	dd15      	ble.n	800724e <_svfiprintf_r+0x81a>
 8007222:	3101      	adds	r1, #1
 8007224:	3210      	adds	r2, #16
 8007226:	2907      	cmp	r1, #7
 8007228:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 800722c:	e9c0 6800 	strd	r6, r8, [r0]
 8007230:	ddf2      	ble.n	8007218 <_svfiprintf_r+0x7e4>
 8007232:	aa10      	add	r2, sp, #64	; 0x40
 8007234:	9901      	ldr	r1, [sp, #4]
 8007236:	4628      	mov	r0, r5
 8007238:	f7ff fb82 	bl	8006940 <__ssprint_r>
 800723c:	2800      	cmp	r0, #0
 800723e:	f47f acd4 	bne.w	8006bea <_svfiprintf_r+0x1b6>
 8007242:	3c10      	subs	r4, #16
 8007244:	2c10      	cmp	r4, #16
 8007246:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800724a:	a813      	add	r0, sp, #76	; 0x4c
 800724c:	dce9      	bgt.n	8007222 <_svfiprintf_r+0x7ee>
 800724e:	463d      	mov	r5, r7
 8007250:	3101      	adds	r1, #1
 8007252:	4637      	mov	r7, r6
 8007254:	f100 0308 	add.w	r3, r0, #8
 8007258:	464e      	mov	r6, r9
 800725a:	46d1      	mov	r9, sl
 800725c:	4682      	mov	sl, r0
 800725e:	4422      	add	r2, r4
 8007260:	2907      	cmp	r1, #7
 8007262:	9212      	str	r2, [sp, #72]	; 0x48
 8007264:	e9ca 7400 	strd	r7, r4, [sl]
 8007268:	9111      	str	r1, [sp, #68]	; 0x44
 800726a:	f300 811d 	bgt.w	80074a8 <_svfiprintf_r+0xa74>
 800726e:	f101 0c01 	add.w	ip, r1, #1
 8007272:	f103 0008 	add.w	r0, r3, #8
 8007276:	469a      	mov	sl, r3
 8007278:	e66f      	b.n	8006f5a <_svfiprintf_r+0x526>
 800727a:	aa10      	add	r2, sp, #64	; 0x40
 800727c:	9901      	ldr	r1, [sp, #4]
 800727e:	9806      	ldr	r0, [sp, #24]
 8007280:	f7ff fb5e 	bl	8006940 <__ssprint_r>
 8007284:	2800      	cmp	r0, #0
 8007286:	f47f acb0 	bne.w	8006bea <_svfiprintf_r+0x1b6>
 800728a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800728c:	a813      	add	r0, sp, #76	; 0x4c
 800728e:	e6bb      	b.n	8007008 <_svfiprintf_r+0x5d4>
 8007290:	aa10      	add	r2, sp, #64	; 0x40
 8007292:	9901      	ldr	r1, [sp, #4]
 8007294:	9806      	ldr	r0, [sp, #24]
 8007296:	f7ff fb53 	bl	8006940 <__ssprint_r>
 800729a:	2800      	cmp	r0, #0
 800729c:	f43f aef3 	beq.w	8007086 <_svfiprintf_r+0x652>
 80072a0:	e4a3      	b.n	8006bea <_svfiprintf_r+0x1b6>
 80072a2:	2a01      	cmp	r2, #1
 80072a4:	469b      	mov	fp, r3
 80072a6:	f47f ad2c 	bne.w	8006d02 <_svfiprintf_r+0x2ce>
 80072aa:	2f00      	cmp	r7, #0
 80072ac:	bf08      	it	eq
 80072ae:	2e0a      	cmpeq	r6, #10
 80072b0:	d25d      	bcs.n	800736e <_svfiprintf_r+0x93a>
 80072b2:	ad3c      	add	r5, sp, #240	; 0xf0
 80072b4:	3630      	adds	r6, #48	; 0x30
 80072b6:	2301      	movs	r3, #1
 80072b8:	f805 6d01 	strb.w	r6, [r5, #-1]!
 80072bc:	9304      	str	r3, [sp, #16]
 80072be:	e4cb      	b.n	8006c58 <_svfiprintf_r+0x224>
 80072c0:	aa10      	add	r2, sp, #64	; 0x40
 80072c2:	9901      	ldr	r1, [sp, #4]
 80072c4:	9806      	ldr	r0, [sp, #24]
 80072c6:	930d      	str	r3, [sp, #52]	; 0x34
 80072c8:	f7ff fb3a 	bl	8006940 <__ssprint_r>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	f47f ac8c 	bne.w	8006bea <_svfiprintf_r+0x1b6>
 80072d2:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 80072d6:	a815      	add	r0, sp, #84	; 0x54
 80072d8:	f101 0c01 	add.w	ip, r1, #1
 80072dc:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 80072e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072e2:	e625      	b.n	8006f30 <_svfiprintf_r+0x4fc>
 80072e4:	aa10      	add	r2, sp, #64	; 0x40
 80072e6:	9901      	ldr	r1, [sp, #4]
 80072e8:	9806      	ldr	r0, [sp, #24]
 80072ea:	f7ff fb29 	bl	8006940 <__ssprint_r>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	f47f ac7b 	bne.w	8006bea <_svfiprintf_r+0x1b6>
 80072f4:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 80072f8:	a815      	add	r0, sp, #84	; 0x54
 80072fa:	f101 0c01 	add.w	ip, r1, #1
 80072fe:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 8007302:	e626      	b.n	8006f52 <_svfiprintf_r+0x51e>
 8007304:	08008d5c 	.word	0x08008d5c
 8007308:	08008be4 	.word	0x08008be4
 800730c:	08008bd0 	.word	0x08008bd0
 8007310:	08008d6c 	.word	0x08008d6c
 8007314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007316:	ad3c      	add	r5, sp, #240	; 0xf0
 8007318:	0933      	lsrs	r3, r6, #4
 800731a:	f006 010f 	and.w	r1, r6, #15
 800731e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8007322:	093a      	lsrs	r2, r7, #4
 8007324:	461e      	mov	r6, r3
 8007326:	4617      	mov	r7, r2
 8007328:	5c43      	ldrb	r3, [r0, r1]
 800732a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800732e:	ea56 0307 	orrs.w	r3, r6, r7
 8007332:	d1f1      	bne.n	8007318 <_svfiprintf_r+0x8e4>
 8007334:	eba8 0305 	sub.w	r3, r8, r5
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	e48d      	b.n	8006c58 <_svfiprintf_r+0x224>
 800733c:	aa10      	add	r2, sp, #64	; 0x40
 800733e:	9901      	ldr	r1, [sp, #4]
 8007340:	9806      	ldr	r0, [sp, #24]
 8007342:	f7ff fafd 	bl	8006940 <__ssprint_r>
 8007346:	2800      	cmp	r0, #0
 8007348:	f47f ac4f 	bne.w	8006bea <_svfiprintf_r+0x1b6>
 800734c:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
 8007350:	a815      	add	r0, sp, #84	; 0x54
 8007352:	f103 0c01 	add.w	ip, r3, #1
 8007356:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 800735a:	e64a      	b.n	8006ff2 <_svfiprintf_r+0x5be>
 800735c:	9b02      	ldr	r3, [sp, #8]
 800735e:	9304      	str	r3, [sp, #16]
 8007360:	ad3c      	add	r5, sp, #240	; 0xf0
 8007362:	e479      	b.n	8006c58 <_svfiprintf_r+0x224>
 8007364:	2f00      	cmp	r7, #0
 8007366:	bf08      	it	eq
 8007368:	2e0a      	cmpeq	r6, #10
 800736a:	469b      	mov	fp, r3
 800736c:	d3a1      	bcc.n	80072b2 <_svfiprintf_r+0x87e>
 800736e:	f40b 6380 	and.w	r3, fp, #1024	; 0x400
 8007372:	f8cd 9010 	str.w	r9, [sp, #16]
 8007376:	2400      	movs	r4, #0
 8007378:	46c1      	mov	r9, r8
 800737a:	ad3c      	add	r5, sp, #240	; 0xf0
 800737c:	4698      	mov	r8, r3
 800737e:	e00b      	b.n	8007398 <_svfiprintf_r+0x964>
 8007380:	2300      	movs	r3, #0
 8007382:	4630      	mov	r0, r6
 8007384:	4639      	mov	r1, r7
 8007386:	220a      	movs	r2, #10
 8007388:	f001 fa7c 	bl	8008884 <__aeabi_uldivmod>
 800738c:	4606      	mov	r6, r0
 800738e:	460f      	mov	r7, r1
 8007390:	ea56 0307 	orrs.w	r3, r6, r7
 8007394:	f43f af27 	beq.w	80071e6 <_svfiprintf_r+0x7b2>
 8007398:	220a      	movs	r2, #10
 800739a:	2300      	movs	r3, #0
 800739c:	4630      	mov	r0, r6
 800739e:	4639      	mov	r1, r7
 80073a0:	f001 fa70 	bl	8008884 <__aeabi_uldivmod>
 80073a4:	3230      	adds	r2, #48	; 0x30
 80073a6:	f805 2c01 	strb.w	r2, [r5, #-1]
 80073aa:	3401      	adds	r4, #1
 80073ac:	3d01      	subs	r5, #1
 80073ae:	f1b8 0f00 	cmp.w	r8, #0
 80073b2:	d0e5      	beq.n	8007380 <_svfiprintf_r+0x94c>
 80073b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	42a3      	cmp	r3, r4
 80073ba:	d1e1      	bne.n	8007380 <_svfiprintf_r+0x94c>
 80073bc:	2cff      	cmp	r4, #255	; 0xff
 80073be:	d0df      	beq.n	8007380 <_svfiprintf_r+0x94c>
 80073c0:	2f00      	cmp	r7, #0
 80073c2:	bf08      	it	eq
 80073c4:	2e0a      	cmpeq	r6, #10
 80073c6:	d3db      	bcc.n	8007380 <_svfiprintf_r+0x94c>
 80073c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073cc:	1aed      	subs	r5, r5, r3
 80073ce:	461a      	mov	r2, r3
 80073d0:	4628      	mov	r0, r5
 80073d2:	f7ff fa83 	bl	80068dc <strncpy>
 80073d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d8:	785c      	ldrb	r4, [r3, #1]
 80073da:	2c00      	cmp	r4, #0
 80073dc:	d0d0      	beq.n	8007380 <_svfiprintf_r+0x94c>
 80073de:	3301      	adds	r3, #1
 80073e0:	930a      	str	r3, [sp, #40]	; 0x28
 80073e2:	2400      	movs	r4, #0
 80073e4:	e7cc      	b.n	8007380 <_svfiprintf_r+0x94c>
 80073e6:	aa10      	add	r2, sp, #64	; 0x40
 80073e8:	9901      	ldr	r1, [sp, #4]
 80073ea:	9806      	ldr	r0, [sp, #24]
 80073ec:	930d      	str	r3, [sp, #52]	; 0x34
 80073ee:	f7ff faa7 	bl	8006940 <__ssprint_r>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	f47f abf9 	bne.w	8006bea <_svfiprintf_r+0x1b6>
 80073f8:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 80073fc:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 8007400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007402:	e57b      	b.n	8006efc <_svfiprintf_r+0x4c8>
 8007404:	aa10      	add	r2, sp, #64	; 0x40
 8007406:	9901      	ldr	r1, [sp, #4]
 8007408:	9806      	ldr	r0, [sp, #24]
 800740a:	f7ff fa99 	bl	8006940 <__ssprint_r>
 800740e:	2800      	cmp	r0, #0
 8007410:	f47f abeb 	bne.w	8006bea <_svfiprintf_r+0x1b6>
 8007414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007416:	e62c      	b.n	8007072 <_svfiprintf_r+0x63e>
 8007418:	2330      	movs	r3, #48	; 0x30
 800741a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800741e:	e41b      	b.n	8006c58 <_svfiprintf_r+0x224>
 8007420:	0598      	lsls	r0, r3, #22
 8007422:	d475      	bmi.n	8007510 <_svfiprintf_r+0xadc>
 8007424:	6816      	ldr	r6, [r2, #0]
 8007426:	9107      	str	r1, [sp, #28]
 8007428:	2201      	movs	r2, #1
 800742a:	2700      	movs	r7, #0
 800742c:	f7ff bbf8 	b.w	8006c20 <_svfiprintf_r+0x1ec>
 8007430:	059f      	lsls	r7, r3, #22
 8007432:	d45b      	bmi.n	80074ec <_svfiprintf_r+0xab8>
 8007434:	680e      	ldr	r6, [r1, #0]
 8007436:	9207      	str	r2, [sp, #28]
 8007438:	17f7      	asrs	r7, r6, #31
 800743a:	4630      	mov	r0, r6
 800743c:	4639      	mov	r1, r7
 800743e:	e446      	b.n	8006cce <_svfiprintf_r+0x29a>
 8007440:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8007444:	d15f      	bne.n	8007506 <_svfiprintf_r+0xad2>
 8007446:	680e      	ldr	r6, [r1, #0]
 8007448:	9207      	str	r2, [sp, #28]
 800744a:	2700      	movs	r7, #0
 800744c:	e420      	b.n	8006c90 <_svfiprintf_r+0x25c>
 800744e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8007452:	d153      	bne.n	80074fc <_svfiprintf_r+0xac8>
 8007454:	6816      	ldr	r6, [r2, #0]
 8007456:	9307      	str	r3, [sp, #28]
 8007458:	2700      	movs	r7, #0
 800745a:	f7ff bbb2 	b.w	8006bc2 <_svfiprintf_r+0x18e>
 800745e:	9a03      	ldr	r2, [sp, #12]
 8007460:	4610      	mov	r0, r2
 8007462:	17d1      	asrs	r1, r2, #31
 8007464:	e9c3 0100 	strd	r0, r1, [r3]
 8007468:	f7ff bafd 	b.w	8006a66 <_svfiprintf_r+0x32>
 800746c:	4249      	negs	r1, r1
 800746e:	9105      	str	r1, [sp, #20]
 8007470:	9207      	str	r2, [sp, #28]
 8007472:	e4d3      	b.n	8006e1c <_svfiprintf_r+0x3e8>
 8007474:	2140      	movs	r1, #64	; 0x40
 8007476:	f7fe f963 	bl	8005740 <_malloc_r>
 800747a:	9b01      	ldr	r3, [sp, #4]
 800747c:	6018      	str	r0, [r3, #0]
 800747e:	6118      	str	r0, [r3, #16]
 8007480:	2800      	cmp	r0, #0
 8007482:	d064      	beq.n	800754e <_svfiprintf_r+0xb1a>
 8007484:	9a01      	ldr	r2, [sp, #4]
 8007486:	2340      	movs	r3, #64	; 0x40
 8007488:	6153      	str	r3, [r2, #20]
 800748a:	f7ff bae1 	b.w	8006a50 <_svfiprintf_r+0x1c>
 800748e:	4628      	mov	r0, r5
 8007490:	9407      	str	r4, [sp, #28]
 8007492:	f7ff f9b5 	bl	8006800 <strlen>
 8007496:	2300      	movs	r3, #0
 8007498:	9004      	str	r0, [sp, #16]
 800749a:	9302      	str	r3, [sp, #8]
 800749c:	f7ff bbdc 	b.w	8006c58 <_svfiprintf_r+0x224>
 80074a0:	2a01      	cmp	r2, #1
 80074a2:	f47f ac2e 	bne.w	8006d02 <_svfiprintf_r+0x2ce>
 80074a6:	e704      	b.n	80072b2 <_svfiprintf_r+0x87e>
 80074a8:	aa10      	add	r2, sp, #64	; 0x40
 80074aa:	9901      	ldr	r1, [sp, #4]
 80074ac:	9806      	ldr	r0, [sp, #24]
 80074ae:	f7ff fa47 	bl	8006940 <__ssprint_r>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	f47f ab99 	bne.w	8006bea <_svfiprintf_r+0x1b6>
 80074b8:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 80074bc:	a815      	add	r0, sp, #84	; 0x54
 80074be:	f101 0c01 	add.w	ip, r1, #1
 80074c2:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 80074c6:	e548      	b.n	8006f5a <_svfiprintf_r+0x526>
 80074c8:	4603      	mov	r3, r0
 80074ca:	e583      	b.n	8006fd4 <_svfiprintf_r+0x5a0>
 80074cc:	9a03      	ldr	r2, [sp, #12]
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	f7ff bac9 	b.w	8006a66 <_svfiprintf_r+0x32>
 80074d4:	9e02      	ldr	r6, [sp, #8]
 80074d6:	9407      	str	r4, [sp, #28]
 80074d8:	2e06      	cmp	r6, #6
 80074da:	bf28      	it	cs
 80074dc:	2606      	movcs	r6, #6
 80074de:	9604      	str	r6, [sp, #16]
 80074e0:	4d1f      	ldr	r5, [pc, #124]	; (8007560 <_svfiprintf_r+0xb2c>)
 80074e2:	e4c1      	b.n	8006e68 <_svfiprintf_r+0x434>
 80074e4:	9a03      	ldr	r2, [sp, #12]
 80074e6:	801a      	strh	r2, [r3, #0]
 80074e8:	f7ff babd 	b.w	8006a66 <_svfiprintf_r+0x32>
 80074ec:	f991 6000 	ldrsb.w	r6, [r1]
 80074f0:	9207      	str	r2, [sp, #28]
 80074f2:	17f7      	asrs	r7, r6, #31
 80074f4:	4630      	mov	r0, r6
 80074f6:	4639      	mov	r1, r7
 80074f8:	f7ff bbe9 	b.w	8006cce <_svfiprintf_r+0x29a>
 80074fc:	7816      	ldrb	r6, [r2, #0]
 80074fe:	9307      	str	r3, [sp, #28]
 8007500:	2700      	movs	r7, #0
 8007502:	f7ff bb5e 	b.w	8006bc2 <_svfiprintf_r+0x18e>
 8007506:	780e      	ldrb	r6, [r1, #0]
 8007508:	9207      	str	r2, [sp, #28]
 800750a:	2700      	movs	r7, #0
 800750c:	f7ff bbc0 	b.w	8006c90 <_svfiprintf_r+0x25c>
 8007510:	7816      	ldrb	r6, [r2, #0]
 8007512:	9107      	str	r1, [sp, #28]
 8007514:	2700      	movs	r7, #0
 8007516:	2201      	movs	r2, #1
 8007518:	f7ff bb82 	b.w	8006c20 <_svfiprintf_r+0x1ec>
 800751c:	2200      	movs	r2, #0
 800751e:	9202      	str	r2, [sp, #8]
 8007520:	f7ff bad9 	b.w	8006ad6 <_svfiprintf_r+0xa2>
 8007524:	4603      	mov	r3, r0
 8007526:	4661      	mov	r1, ip
 8007528:	e699      	b.n	800725e <_svfiprintf_r+0x82a>
 800752a:	9b02      	ldr	r3, [sp, #8]
 800752c:	9304      	str	r3, [sp, #16]
 800752e:	9407      	str	r4, [sp, #28]
 8007530:	9002      	str	r0, [sp, #8]
 8007532:	f7ff bb91 	b.w	8006c58 <_svfiprintf_r+0x224>
 8007536:	9807      	ldr	r0, [sp, #28]
 8007538:	f899 3001 	ldrb.w	r3, [r9, #1]
 800753c:	6802      	ldr	r2, [r0, #0]
 800753e:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8007542:	9202      	str	r2, [sp, #8]
 8007544:	1d02      	adds	r2, r0, #4
 8007546:	4689      	mov	r9, r1
 8007548:	9207      	str	r2, [sp, #28]
 800754a:	f7ff bac2 	b.w	8006ad2 <_svfiprintf_r+0x9e>
 800754e:	9a06      	ldr	r2, [sp, #24]
 8007550:	230c      	movs	r3, #12
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007558:	9303      	str	r3, [sp, #12]
 800755a:	f7ff bb4f 	b.w	8006bfc <_svfiprintf_r+0x1c8>
 800755e:	bf00      	nop
 8007560:	08008bf8 	.word	0x08008bf8

08007564 <_calloc_r>:
 8007564:	b510      	push	{r4, lr}
 8007566:	fb02 f101 	mul.w	r1, r2, r1
 800756a:	f7fe f8e9 	bl	8005740 <_malloc_r>
 800756e:	4604      	mov	r4, r0
 8007570:	b1d8      	cbz	r0, 80075aa <_calloc_r+0x46>
 8007572:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007576:	f022 0203 	bic.w	r2, r2, #3
 800757a:	3a04      	subs	r2, #4
 800757c:	2a24      	cmp	r2, #36	; 0x24
 800757e:	d81d      	bhi.n	80075bc <_calloc_r+0x58>
 8007580:	2a13      	cmp	r2, #19
 8007582:	d914      	bls.n	80075ae <_calloc_r+0x4a>
 8007584:	2300      	movs	r3, #0
 8007586:	2a1b      	cmp	r2, #27
 8007588:	e9c0 3300 	strd	r3, r3, [r0]
 800758c:	d91b      	bls.n	80075c6 <_calloc_r+0x62>
 800758e:	2a24      	cmp	r2, #36	; 0x24
 8007590:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8007594:	bf0a      	itet	eq
 8007596:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 800759a:	f100 0210 	addne.w	r2, r0, #16
 800759e:	f100 0218 	addeq.w	r2, r0, #24
 80075a2:	2300      	movs	r3, #0
 80075a4:	e9c2 3300 	strd	r3, r3, [r2]
 80075a8:	6093      	str	r3, [r2, #8]
 80075aa:	4620      	mov	r0, r4
 80075ac:	bd10      	pop	{r4, pc}
 80075ae:	4602      	mov	r2, r0
 80075b0:	2300      	movs	r3, #0
 80075b2:	e9c2 3300 	strd	r3, r3, [r2]
 80075b6:	6093      	str	r3, [r2, #8]
 80075b8:	4620      	mov	r0, r4
 80075ba:	bd10      	pop	{r4, pc}
 80075bc:	2100      	movs	r1, #0
 80075be:	f000 f8ed 	bl	800779c <memset>
 80075c2:	4620      	mov	r0, r4
 80075c4:	bd10      	pop	{r4, pc}
 80075c6:	f100 0208 	add.w	r2, r0, #8
 80075ca:	e7f1      	b.n	80075b0 <_calloc_r+0x4c>

080075cc <_setlocale_r>:
 80075cc:	b1b2      	cbz	r2, 80075fc <_setlocale_r+0x30>
 80075ce:	b510      	push	{r4, lr}
 80075d0:	490b      	ldr	r1, [pc, #44]	; (8007600 <_setlocale_r+0x34>)
 80075d2:	4610      	mov	r0, r2
 80075d4:	4614      	mov	r4, r2
 80075d6:	f000 fb37 	bl	8007c48 <strcmp>
 80075da:	b908      	cbnz	r0, 80075e0 <_setlocale_r+0x14>
 80075dc:	4809      	ldr	r0, [pc, #36]	; (8007604 <_setlocale_r+0x38>)
 80075de:	bd10      	pop	{r4, pc}
 80075e0:	4908      	ldr	r1, [pc, #32]	; (8007604 <_setlocale_r+0x38>)
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 fb30 	bl	8007c48 <strcmp>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	d0f7      	beq.n	80075dc <_setlocale_r+0x10>
 80075ec:	4620      	mov	r0, r4
 80075ee:	4906      	ldr	r1, [pc, #24]	; (8007608 <_setlocale_r+0x3c>)
 80075f0:	f000 fb2a 	bl	8007c48 <strcmp>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	d0f1      	beq.n	80075dc <_setlocale_r+0x10>
 80075f8:	2000      	movs	r0, #0
 80075fa:	bd10      	pop	{r4, pc}
 80075fc:	4801      	ldr	r0, [pc, #4]	; (8007604 <_setlocale_r+0x38>)
 80075fe:	4770      	bx	lr
 8007600:	08008d80 	.word	0x08008d80
 8007604:	08008d7c 	.word	0x08008d7c
 8007608:	08008bf4 	.word	0x08008bf4

0800760c <__locale_mb_cur_max>:
 800760c:	4b04      	ldr	r3, [pc, #16]	; (8007620 <__locale_mb_cur_max+0x14>)
 800760e:	4a05      	ldr	r2, [pc, #20]	; (8007624 <__locale_mb_cur_max+0x18>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	2b00      	cmp	r3, #0
 8007616:	bf08      	it	eq
 8007618:	4613      	moveq	r3, r2
 800761a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800761e:	4770      	bx	lr
 8007620:	20000000 	.word	0x20000000
 8007624:	20000840 	.word	0x20000840

08007628 <__locale_ctype_ptr_l>:
 8007628:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop

08007630 <__locale_ctype_ptr>:
 8007630:	4b04      	ldr	r3, [pc, #16]	; (8007644 <__locale_ctype_ptr+0x14>)
 8007632:	4a05      	ldr	r2, [pc, #20]	; (8007648 <__locale_ctype_ptr+0x18>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007638:	2b00      	cmp	r3, #0
 800763a:	bf08      	it	eq
 800763c:	4613      	moveq	r3, r2
 800763e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8007642:	4770      	bx	lr
 8007644:	20000000 	.word	0x20000000
 8007648:	20000840 	.word	0x20000840

0800764c <setlocale>:
 800764c:	4b02      	ldr	r3, [pc, #8]	; (8007658 <setlocale+0xc>)
 800764e:	460a      	mov	r2, r1
 8007650:	4601      	mov	r1, r0
 8007652:	6818      	ldr	r0, [r3, #0]
 8007654:	f7ff bfba 	b.w	80075cc <_setlocale_r>
 8007658:	20000000 	.word	0x20000000

0800765c <__retarget_lock_init>:
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop

08007660 <__retarget_lock_init_recursive>:
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop

08007664 <__retarget_lock_close>:
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop

08007668 <__retarget_lock_close_recursive>:
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop

0800766c <__retarget_lock_acquire>:
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop

08007670 <__retarget_lock_acquire_recursive>:
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop

08007674 <__retarget_lock_try_acquire>:
 8007674:	2001      	movs	r0, #1
 8007676:	4770      	bx	lr

08007678 <__retarget_lock_try_acquire_recursive>:
 8007678:	2001      	movs	r0, #1
 800767a:	4770      	bx	lr

0800767c <__retarget_lock_release>:
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop

08007680 <__retarget_lock_release_recursive>:
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop

08007684 <_mbtowc_r>:
 8007684:	b430      	push	{r4, r5}
 8007686:	4c06      	ldr	r4, [pc, #24]	; (80076a0 <_mbtowc_r+0x1c>)
 8007688:	4d06      	ldr	r5, [pc, #24]	; (80076a4 <_mbtowc_r+0x20>)
 800768a:	6824      	ldr	r4, [r4, #0]
 800768c:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800768e:	2c00      	cmp	r4, #0
 8007690:	bf08      	it	eq
 8007692:	462c      	moveq	r4, r5
 8007694:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8007698:	46a4      	mov	ip, r4
 800769a:	bc30      	pop	{r4, r5}
 800769c:	4760      	bx	ip
 800769e:	bf00      	nop
 80076a0:	20000000 	.word	0x20000000
 80076a4:	20000840 	.word	0x20000840

080076a8 <__ascii_mbtowc>:
 80076a8:	b082      	sub	sp, #8
 80076aa:	b149      	cbz	r1, 80076c0 <__ascii_mbtowc+0x18>
 80076ac:	b15a      	cbz	r2, 80076c6 <__ascii_mbtowc+0x1e>
 80076ae:	b16b      	cbz	r3, 80076cc <__ascii_mbtowc+0x24>
 80076b0:	7813      	ldrb	r3, [r2, #0]
 80076b2:	600b      	str	r3, [r1, #0]
 80076b4:	7812      	ldrb	r2, [r2, #0]
 80076b6:	1c10      	adds	r0, r2, #0
 80076b8:	bf18      	it	ne
 80076ba:	2001      	movne	r0, #1
 80076bc:	b002      	add	sp, #8
 80076be:	4770      	bx	lr
 80076c0:	a901      	add	r1, sp, #4
 80076c2:	2a00      	cmp	r2, #0
 80076c4:	d1f3      	bne.n	80076ae <__ascii_mbtowc+0x6>
 80076c6:	4610      	mov	r0, r2
 80076c8:	b002      	add	sp, #8
 80076ca:	4770      	bx	lr
 80076cc:	f06f 0001 	mvn.w	r0, #1
 80076d0:	e7f4      	b.n	80076bc <__ascii_mbtowc+0x14>
 80076d2:	bf00      	nop

080076d4 <memmove>:
 80076d4:	4288      	cmp	r0, r1
 80076d6:	b4f0      	push	{r4, r5, r6, r7}
 80076d8:	d90d      	bls.n	80076f6 <memmove+0x22>
 80076da:	188b      	adds	r3, r1, r2
 80076dc:	4283      	cmp	r3, r0
 80076de:	d90a      	bls.n	80076f6 <memmove+0x22>
 80076e0:	1884      	adds	r4, r0, r2
 80076e2:	b132      	cbz	r2, 80076f2 <memmove+0x1e>
 80076e4:	4622      	mov	r2, r4
 80076e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076ee:	4299      	cmp	r1, r3
 80076f0:	d1f9      	bne.n	80076e6 <memmove+0x12>
 80076f2:	bcf0      	pop	{r4, r5, r6, r7}
 80076f4:	4770      	bx	lr
 80076f6:	2a0f      	cmp	r2, #15
 80076f8:	d949      	bls.n	800778e <memmove+0xba>
 80076fa:	ea40 0301 	orr.w	r3, r0, r1
 80076fe:	079b      	lsls	r3, r3, #30
 8007700:	d147      	bne.n	8007792 <memmove+0xbe>
 8007702:	f1a2 0310 	sub.w	r3, r2, #16
 8007706:	091b      	lsrs	r3, r3, #4
 8007708:	f101 0720 	add.w	r7, r1, #32
 800770c:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 8007710:	f101 0410 	add.w	r4, r1, #16
 8007714:	f100 0510 	add.w	r5, r0, #16
 8007718:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800771c:	f845 6c10 	str.w	r6, [r5, #-16]
 8007720:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8007724:	f845 6c0c 	str.w	r6, [r5, #-12]
 8007728:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800772c:	f845 6c08 	str.w	r6, [r5, #-8]
 8007730:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8007734:	f845 6c04 	str.w	r6, [r5, #-4]
 8007738:	3410      	adds	r4, #16
 800773a:	42bc      	cmp	r4, r7
 800773c:	f105 0510 	add.w	r5, r5, #16
 8007740:	d1ea      	bne.n	8007718 <memmove+0x44>
 8007742:	3301      	adds	r3, #1
 8007744:	f002 050f 	and.w	r5, r2, #15
 8007748:	011b      	lsls	r3, r3, #4
 800774a:	2d03      	cmp	r5, #3
 800774c:	4419      	add	r1, r3
 800774e:	4403      	add	r3, r0
 8007750:	d921      	bls.n	8007796 <memmove+0xc2>
 8007752:	1f1f      	subs	r7, r3, #4
 8007754:	460e      	mov	r6, r1
 8007756:	462c      	mov	r4, r5
 8007758:	3c04      	subs	r4, #4
 800775a:	f856 cb04 	ldr.w	ip, [r6], #4
 800775e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007762:	2c03      	cmp	r4, #3
 8007764:	d8f8      	bhi.n	8007758 <memmove+0x84>
 8007766:	1f2c      	subs	r4, r5, #4
 8007768:	f024 0403 	bic.w	r4, r4, #3
 800776c:	3404      	adds	r4, #4
 800776e:	4423      	add	r3, r4
 8007770:	4421      	add	r1, r4
 8007772:	f002 0203 	and.w	r2, r2, #3
 8007776:	2a00      	cmp	r2, #0
 8007778:	d0bb      	beq.n	80076f2 <memmove+0x1e>
 800777a:	3b01      	subs	r3, #1
 800777c:	440a      	add	r2, r1
 800777e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007786:	4291      	cmp	r1, r2
 8007788:	d1f9      	bne.n	800777e <memmove+0xaa>
 800778a:	bcf0      	pop	{r4, r5, r6, r7}
 800778c:	4770      	bx	lr
 800778e:	4603      	mov	r3, r0
 8007790:	e7f1      	b.n	8007776 <memmove+0xa2>
 8007792:	4603      	mov	r3, r0
 8007794:	e7f1      	b.n	800777a <memmove+0xa6>
 8007796:	462a      	mov	r2, r5
 8007798:	e7ed      	b.n	8007776 <memmove+0xa2>
 800779a:	bf00      	nop

0800779c <memset>:
 800779c:	b4f0      	push	{r4, r5, r6, r7}
 800779e:	0786      	lsls	r6, r0, #30
 80077a0:	d043      	beq.n	800782a <memset+0x8e>
 80077a2:	1e54      	subs	r4, r2, #1
 80077a4:	2a00      	cmp	r2, #0
 80077a6:	d03e      	beq.n	8007826 <memset+0x8a>
 80077a8:	b2ca      	uxtb	r2, r1
 80077aa:	4603      	mov	r3, r0
 80077ac:	e002      	b.n	80077b4 <memset+0x18>
 80077ae:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80077b2:	d338      	bcc.n	8007826 <memset+0x8a>
 80077b4:	f803 2b01 	strb.w	r2, [r3], #1
 80077b8:	079d      	lsls	r5, r3, #30
 80077ba:	d1f8      	bne.n	80077ae <memset+0x12>
 80077bc:	2c03      	cmp	r4, #3
 80077be:	d92b      	bls.n	8007818 <memset+0x7c>
 80077c0:	b2cd      	uxtb	r5, r1
 80077c2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80077c6:	2c0f      	cmp	r4, #15
 80077c8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80077cc:	d916      	bls.n	80077fc <memset+0x60>
 80077ce:	f1a4 0710 	sub.w	r7, r4, #16
 80077d2:	093f      	lsrs	r7, r7, #4
 80077d4:	f103 0620 	add.w	r6, r3, #32
 80077d8:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80077dc:	f103 0210 	add.w	r2, r3, #16
 80077e0:	e942 5504 	strd	r5, r5, [r2, #-16]
 80077e4:	e942 5502 	strd	r5, r5, [r2, #-8]
 80077e8:	3210      	adds	r2, #16
 80077ea:	42b2      	cmp	r2, r6
 80077ec:	d1f8      	bne.n	80077e0 <memset+0x44>
 80077ee:	f004 040f 	and.w	r4, r4, #15
 80077f2:	3701      	adds	r7, #1
 80077f4:	2c03      	cmp	r4, #3
 80077f6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80077fa:	d90d      	bls.n	8007818 <memset+0x7c>
 80077fc:	461e      	mov	r6, r3
 80077fe:	4622      	mov	r2, r4
 8007800:	3a04      	subs	r2, #4
 8007802:	2a03      	cmp	r2, #3
 8007804:	f846 5b04 	str.w	r5, [r6], #4
 8007808:	d8fa      	bhi.n	8007800 <memset+0x64>
 800780a:	1f22      	subs	r2, r4, #4
 800780c:	f022 0203 	bic.w	r2, r2, #3
 8007810:	3204      	adds	r2, #4
 8007812:	4413      	add	r3, r2
 8007814:	f004 0403 	and.w	r4, r4, #3
 8007818:	b12c      	cbz	r4, 8007826 <memset+0x8a>
 800781a:	b2c9      	uxtb	r1, r1
 800781c:	441c      	add	r4, r3
 800781e:	f803 1b01 	strb.w	r1, [r3], #1
 8007822:	429c      	cmp	r4, r3
 8007824:	d1fb      	bne.n	800781e <memset+0x82>
 8007826:	bcf0      	pop	{r4, r5, r6, r7}
 8007828:	4770      	bx	lr
 800782a:	4614      	mov	r4, r2
 800782c:	4603      	mov	r3, r0
 800782e:	e7c5      	b.n	80077bc <memset+0x20>

08007830 <_realloc_r>:
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	4692      	mov	sl, r2
 8007836:	b083      	sub	sp, #12
 8007838:	2900      	cmp	r1, #0
 800783a:	f000 80a1 	beq.w	8007980 <_realloc_r+0x150>
 800783e:	460d      	mov	r5, r1
 8007840:	4680      	mov	r8, r0
 8007842:	f10a 040b 	add.w	r4, sl, #11
 8007846:	f7fe fb0d 	bl	8005e64 <__malloc_lock>
 800784a:	f855 2c04 	ldr.w	r2, [r5, #-4]
 800784e:	2c16      	cmp	r4, #22
 8007850:	f022 0603 	bic.w	r6, r2, #3
 8007854:	f1a5 0708 	sub.w	r7, r5, #8
 8007858:	d83e      	bhi.n	80078d8 <_realloc_r+0xa8>
 800785a:	2410      	movs	r4, #16
 800785c:	4621      	mov	r1, r4
 800785e:	45a2      	cmp	sl, r4
 8007860:	d83f      	bhi.n	80078e2 <_realloc_r+0xb2>
 8007862:	428e      	cmp	r6, r1
 8007864:	eb07 0906 	add.w	r9, r7, r6
 8007868:	da74      	bge.n	8007954 <_realloc_r+0x124>
 800786a:	4bc7      	ldr	r3, [pc, #796]	; (8007b88 <_realloc_r+0x358>)
 800786c:	6898      	ldr	r0, [r3, #8]
 800786e:	4548      	cmp	r0, r9
 8007870:	f000 80aa 	beq.w	80079c8 <_realloc_r+0x198>
 8007874:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8007878:	f020 0301 	bic.w	r3, r0, #1
 800787c:	444b      	add	r3, r9
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	07db      	lsls	r3, r3, #31
 8007882:	f140 8083 	bpl.w	800798c <_realloc_r+0x15c>
 8007886:	07d2      	lsls	r2, r2, #31
 8007888:	d534      	bpl.n	80078f4 <_realloc_r+0xc4>
 800788a:	4651      	mov	r1, sl
 800788c:	4640      	mov	r0, r8
 800788e:	f7fd ff57 	bl	8005740 <_malloc_r>
 8007892:	4682      	mov	sl, r0
 8007894:	b1e0      	cbz	r0, 80078d0 <_realloc_r+0xa0>
 8007896:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800789a:	f023 0301 	bic.w	r3, r3, #1
 800789e:	443b      	add	r3, r7
 80078a0:	f1a0 0208 	sub.w	r2, r0, #8
 80078a4:	4293      	cmp	r3, r2
 80078a6:	f000 80f9 	beq.w	8007a9c <_realloc_r+0x26c>
 80078aa:	1f32      	subs	r2, r6, #4
 80078ac:	2a24      	cmp	r2, #36	; 0x24
 80078ae:	f200 8107 	bhi.w	8007ac0 <_realloc_r+0x290>
 80078b2:	2a13      	cmp	r2, #19
 80078b4:	6829      	ldr	r1, [r5, #0]
 80078b6:	f200 80e6 	bhi.w	8007a86 <_realloc_r+0x256>
 80078ba:	4603      	mov	r3, r0
 80078bc:	462a      	mov	r2, r5
 80078be:	6019      	str	r1, [r3, #0]
 80078c0:	6851      	ldr	r1, [r2, #4]
 80078c2:	6059      	str	r1, [r3, #4]
 80078c4:	6892      	ldr	r2, [r2, #8]
 80078c6:	609a      	str	r2, [r3, #8]
 80078c8:	4629      	mov	r1, r5
 80078ca:	4640      	mov	r0, r8
 80078cc:	f7fd fe26 	bl	800551c <_free_r>
 80078d0:	4640      	mov	r0, r8
 80078d2:	f7fe facd 	bl	8005e70 <__malloc_unlock>
 80078d6:	e04f      	b.n	8007978 <_realloc_r+0x148>
 80078d8:	f024 0407 	bic.w	r4, r4, #7
 80078dc:	2c00      	cmp	r4, #0
 80078de:	4621      	mov	r1, r4
 80078e0:	dabd      	bge.n	800785e <_realloc_r+0x2e>
 80078e2:	f04f 0a00 	mov.w	sl, #0
 80078e6:	230c      	movs	r3, #12
 80078e8:	4650      	mov	r0, sl
 80078ea:	f8c8 3000 	str.w	r3, [r8]
 80078ee:	b003      	add	sp, #12
 80078f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f4:	f855 3c08 	ldr.w	r3, [r5, #-8]
 80078f8:	eba7 0b03 	sub.w	fp, r7, r3
 80078fc:	f8db 2004 	ldr.w	r2, [fp, #4]
 8007900:	f022 0203 	bic.w	r2, r2, #3
 8007904:	18b3      	adds	r3, r6, r2
 8007906:	428b      	cmp	r3, r1
 8007908:	dbbf      	blt.n	800788a <_realloc_r+0x5a>
 800790a:	46da      	mov	sl, fp
 800790c:	f8db 100c 	ldr.w	r1, [fp, #12]
 8007910:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 8007914:	1f32      	subs	r2, r6, #4
 8007916:	2a24      	cmp	r2, #36	; 0x24
 8007918:	60c1      	str	r1, [r0, #12]
 800791a:	eb0b 0903 	add.w	r9, fp, r3
 800791e:	6088      	str	r0, [r1, #8]
 8007920:	f200 80c6 	bhi.w	8007ab0 <_realloc_r+0x280>
 8007924:	2a13      	cmp	r2, #19
 8007926:	6829      	ldr	r1, [r5, #0]
 8007928:	f240 80c0 	bls.w	8007aac <_realloc_r+0x27c>
 800792c:	f8cb 1008 	str.w	r1, [fp, #8]
 8007930:	6869      	ldr	r1, [r5, #4]
 8007932:	f8cb 100c 	str.w	r1, [fp, #12]
 8007936:	2a1b      	cmp	r2, #27
 8007938:	68a9      	ldr	r1, [r5, #8]
 800793a:	f200 80d8 	bhi.w	8007aee <_realloc_r+0x2be>
 800793e:	f10b 0210 	add.w	r2, fp, #16
 8007942:	3508      	adds	r5, #8
 8007944:	6011      	str	r1, [r2, #0]
 8007946:	6869      	ldr	r1, [r5, #4]
 8007948:	6051      	str	r1, [r2, #4]
 800794a:	68a9      	ldr	r1, [r5, #8]
 800794c:	6091      	str	r1, [r2, #8]
 800794e:	461e      	mov	r6, r3
 8007950:	465f      	mov	r7, fp
 8007952:	4655      	mov	r5, sl
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	1b32      	subs	r2, r6, r4
 8007958:	2a0f      	cmp	r2, #15
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	d822      	bhi.n	80079a6 <_realloc_r+0x176>
 8007960:	4333      	orrs	r3, r6
 8007962:	607b      	str	r3, [r7, #4]
 8007964:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007968:	f043 0301 	orr.w	r3, r3, #1
 800796c:	f8c9 3004 	str.w	r3, [r9, #4]
 8007970:	4640      	mov	r0, r8
 8007972:	f7fe fa7d 	bl	8005e70 <__malloc_unlock>
 8007976:	46aa      	mov	sl, r5
 8007978:	4650      	mov	r0, sl
 800797a:	b003      	add	sp, #12
 800797c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007980:	4611      	mov	r1, r2
 8007982:	b003      	add	sp, #12
 8007984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007988:	f7fd beda 	b.w	8005740 <_malloc_r>
 800798c:	f020 0003 	bic.w	r0, r0, #3
 8007990:	1833      	adds	r3, r6, r0
 8007992:	428b      	cmp	r3, r1
 8007994:	db61      	blt.n	8007a5a <_realloc_r+0x22a>
 8007996:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800799a:	461e      	mov	r6, r3
 800799c:	60ca      	str	r2, [r1, #12]
 800799e:	eb07 0903 	add.w	r9, r7, r3
 80079a2:	6091      	str	r1, [r2, #8]
 80079a4:	e7d6      	b.n	8007954 <_realloc_r+0x124>
 80079a6:	1939      	adds	r1, r7, r4
 80079a8:	4323      	orrs	r3, r4
 80079aa:	f042 0201 	orr.w	r2, r2, #1
 80079ae:	607b      	str	r3, [r7, #4]
 80079b0:	604a      	str	r2, [r1, #4]
 80079b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80079b6:	f043 0301 	orr.w	r3, r3, #1
 80079ba:	3108      	adds	r1, #8
 80079bc:	f8c9 3004 	str.w	r3, [r9, #4]
 80079c0:	4640      	mov	r0, r8
 80079c2:	f7fd fdab 	bl	800551c <_free_r>
 80079c6:	e7d3      	b.n	8007970 <_realloc_r+0x140>
 80079c8:	6840      	ldr	r0, [r0, #4]
 80079ca:	f020 0903 	bic.w	r9, r0, #3
 80079ce:	44b1      	add	r9, r6
 80079d0:	f104 0010 	add.w	r0, r4, #16
 80079d4:	4581      	cmp	r9, r0
 80079d6:	da77      	bge.n	8007ac8 <_realloc_r+0x298>
 80079d8:	07d2      	lsls	r2, r2, #31
 80079da:	f53f af56 	bmi.w	800788a <_realloc_r+0x5a>
 80079de:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80079e2:	eba7 0b02 	sub.w	fp, r7, r2
 80079e6:	f8db 2004 	ldr.w	r2, [fp, #4]
 80079ea:	f022 0203 	bic.w	r2, r2, #3
 80079ee:	4491      	add	r9, r2
 80079f0:	4548      	cmp	r0, r9
 80079f2:	dc87      	bgt.n	8007904 <_realloc_r+0xd4>
 80079f4:	46da      	mov	sl, fp
 80079f6:	f8db 100c 	ldr.w	r1, [fp, #12]
 80079fa:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 80079fe:	1f32      	subs	r2, r6, #4
 8007a00:	2a24      	cmp	r2, #36	; 0x24
 8007a02:	60c1      	str	r1, [r0, #12]
 8007a04:	6088      	str	r0, [r1, #8]
 8007a06:	f200 80a1 	bhi.w	8007b4c <_realloc_r+0x31c>
 8007a0a:	2a13      	cmp	r2, #19
 8007a0c:	6829      	ldr	r1, [r5, #0]
 8007a0e:	f240 809b 	bls.w	8007b48 <_realloc_r+0x318>
 8007a12:	f8cb 1008 	str.w	r1, [fp, #8]
 8007a16:	6869      	ldr	r1, [r5, #4]
 8007a18:	f8cb 100c 	str.w	r1, [fp, #12]
 8007a1c:	2a1b      	cmp	r2, #27
 8007a1e:	68a9      	ldr	r1, [r5, #8]
 8007a20:	f200 809b 	bhi.w	8007b5a <_realloc_r+0x32a>
 8007a24:	f10b 0210 	add.w	r2, fp, #16
 8007a28:	3508      	adds	r5, #8
 8007a2a:	6011      	str	r1, [r2, #0]
 8007a2c:	6869      	ldr	r1, [r5, #4]
 8007a2e:	6051      	str	r1, [r2, #4]
 8007a30:	68a9      	ldr	r1, [r5, #8]
 8007a32:	6091      	str	r1, [r2, #8]
 8007a34:	eb0b 0104 	add.w	r1, fp, r4
 8007a38:	eba9 0204 	sub.w	r2, r9, r4
 8007a3c:	f042 0201 	orr.w	r2, r2, #1
 8007a40:	6099      	str	r1, [r3, #8]
 8007a42:	604a      	str	r2, [r1, #4]
 8007a44:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	431c      	orrs	r4, r3
 8007a4e:	4640      	mov	r0, r8
 8007a50:	f8cb 4004 	str.w	r4, [fp, #4]
 8007a54:	f7fe fa0c 	bl	8005e70 <__malloc_unlock>
 8007a58:	e78e      	b.n	8007978 <_realloc_r+0x148>
 8007a5a:	07d3      	lsls	r3, r2, #31
 8007a5c:	f53f af15 	bmi.w	800788a <_realloc_r+0x5a>
 8007a60:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8007a64:	eba7 0b03 	sub.w	fp, r7, r3
 8007a68:	f8db 2004 	ldr.w	r2, [fp, #4]
 8007a6c:	f022 0203 	bic.w	r2, r2, #3
 8007a70:	4410      	add	r0, r2
 8007a72:	1983      	adds	r3, r0, r6
 8007a74:	428b      	cmp	r3, r1
 8007a76:	f6ff af45 	blt.w	8007904 <_realloc_r+0xd4>
 8007a7a:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 8007a7e:	46da      	mov	sl, fp
 8007a80:	60ca      	str	r2, [r1, #12]
 8007a82:	6091      	str	r1, [r2, #8]
 8007a84:	e742      	b.n	800790c <_realloc_r+0xdc>
 8007a86:	6001      	str	r1, [r0, #0]
 8007a88:	686b      	ldr	r3, [r5, #4]
 8007a8a:	6043      	str	r3, [r0, #4]
 8007a8c:	2a1b      	cmp	r2, #27
 8007a8e:	d83a      	bhi.n	8007b06 <_realloc_r+0x2d6>
 8007a90:	f105 0208 	add.w	r2, r5, #8
 8007a94:	f100 0308 	add.w	r3, r0, #8
 8007a98:	68a9      	ldr	r1, [r5, #8]
 8007a9a:	e710      	b.n	80078be <_realloc_r+0x8e>
 8007a9c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007aa0:	f023 0303 	bic.w	r3, r3, #3
 8007aa4:	441e      	add	r6, r3
 8007aa6:	eb07 0906 	add.w	r9, r7, r6
 8007aaa:	e753      	b.n	8007954 <_realloc_r+0x124>
 8007aac:	4652      	mov	r2, sl
 8007aae:	e749      	b.n	8007944 <_realloc_r+0x114>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4650      	mov	r0, sl
 8007ab4:	461e      	mov	r6, r3
 8007ab6:	465f      	mov	r7, fp
 8007ab8:	f7ff fe0c 	bl	80076d4 <memmove>
 8007abc:	4655      	mov	r5, sl
 8007abe:	e749      	b.n	8007954 <_realloc_r+0x124>
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	f7ff fe07 	bl	80076d4 <memmove>
 8007ac6:	e6ff      	b.n	80078c8 <_realloc_r+0x98>
 8007ac8:	4427      	add	r7, r4
 8007aca:	eba9 0904 	sub.w	r9, r9, r4
 8007ace:	f049 0201 	orr.w	r2, r9, #1
 8007ad2:	609f      	str	r7, [r3, #8]
 8007ad4:	607a      	str	r2, [r7, #4]
 8007ad6:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	431c      	orrs	r4, r3
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	f845 4c04 	str.w	r4, [r5, #-4]
 8007ae6:	f7fe f9c3 	bl	8005e70 <__malloc_unlock>
 8007aea:	46aa      	mov	sl, r5
 8007aec:	e744      	b.n	8007978 <_realloc_r+0x148>
 8007aee:	f8cb 1010 	str.w	r1, [fp, #16]
 8007af2:	68e9      	ldr	r1, [r5, #12]
 8007af4:	f8cb 1014 	str.w	r1, [fp, #20]
 8007af8:	2a24      	cmp	r2, #36	; 0x24
 8007afa:	d010      	beq.n	8007b1e <_realloc_r+0x2ee>
 8007afc:	6929      	ldr	r1, [r5, #16]
 8007afe:	f10b 0218 	add.w	r2, fp, #24
 8007b02:	3510      	adds	r5, #16
 8007b04:	e71e      	b.n	8007944 <_realloc_r+0x114>
 8007b06:	68ab      	ldr	r3, [r5, #8]
 8007b08:	6083      	str	r3, [r0, #8]
 8007b0a:	68eb      	ldr	r3, [r5, #12]
 8007b0c:	60c3      	str	r3, [r0, #12]
 8007b0e:	2a24      	cmp	r2, #36	; 0x24
 8007b10:	d010      	beq.n	8007b34 <_realloc_r+0x304>
 8007b12:	f105 0210 	add.w	r2, r5, #16
 8007b16:	f100 0310 	add.w	r3, r0, #16
 8007b1a:	6929      	ldr	r1, [r5, #16]
 8007b1c:	e6cf      	b.n	80078be <_realloc_r+0x8e>
 8007b1e:	692a      	ldr	r2, [r5, #16]
 8007b20:	f8cb 2018 	str.w	r2, [fp, #24]
 8007b24:	696a      	ldr	r2, [r5, #20]
 8007b26:	f8cb 201c 	str.w	r2, [fp, #28]
 8007b2a:	69a9      	ldr	r1, [r5, #24]
 8007b2c:	f10b 0220 	add.w	r2, fp, #32
 8007b30:	3518      	adds	r5, #24
 8007b32:	e707      	b.n	8007944 <_realloc_r+0x114>
 8007b34:	692b      	ldr	r3, [r5, #16]
 8007b36:	6103      	str	r3, [r0, #16]
 8007b38:	696b      	ldr	r3, [r5, #20]
 8007b3a:	6143      	str	r3, [r0, #20]
 8007b3c:	69a9      	ldr	r1, [r5, #24]
 8007b3e:	f105 0218 	add.w	r2, r5, #24
 8007b42:	f100 0318 	add.w	r3, r0, #24
 8007b46:	e6ba      	b.n	80078be <_realloc_r+0x8e>
 8007b48:	4652      	mov	r2, sl
 8007b4a:	e76e      	b.n	8007a2a <_realloc_r+0x1fa>
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4650      	mov	r0, sl
 8007b50:	9301      	str	r3, [sp, #4]
 8007b52:	f7ff fdbf 	bl	80076d4 <memmove>
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	e76c      	b.n	8007a34 <_realloc_r+0x204>
 8007b5a:	f8cb 1010 	str.w	r1, [fp, #16]
 8007b5e:	68e9      	ldr	r1, [r5, #12]
 8007b60:	f8cb 1014 	str.w	r1, [fp, #20]
 8007b64:	2a24      	cmp	r2, #36	; 0x24
 8007b66:	d004      	beq.n	8007b72 <_realloc_r+0x342>
 8007b68:	6929      	ldr	r1, [r5, #16]
 8007b6a:	f10b 0218 	add.w	r2, fp, #24
 8007b6e:	3510      	adds	r5, #16
 8007b70:	e75b      	b.n	8007a2a <_realloc_r+0x1fa>
 8007b72:	692a      	ldr	r2, [r5, #16]
 8007b74:	f8cb 2018 	str.w	r2, [fp, #24]
 8007b78:	696a      	ldr	r2, [r5, #20]
 8007b7a:	f8cb 201c 	str.w	r2, [fp, #28]
 8007b7e:	69a9      	ldr	r1, [r5, #24]
 8007b80:	f10b 0220 	add.w	r2, fp, #32
 8007b84:	3518      	adds	r5, #24
 8007b86:	e750      	b.n	8007a2a <_realloc_r+0x1fa>
 8007b88:	20000430 	.word	0x20000430

08007b8c <cleanup_glue>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	460c      	mov	r4, r1
 8007b90:	6809      	ldr	r1, [r1, #0]
 8007b92:	4605      	mov	r5, r0
 8007b94:	b929      	cbnz	r1, 8007ba2 <cleanup_glue+0x16>
 8007b96:	4621      	mov	r1, r4
 8007b98:	4628      	mov	r0, r5
 8007b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b9e:	f7fd bcbd 	b.w	800551c <_free_r>
 8007ba2:	f7ff fff3 	bl	8007b8c <cleanup_glue>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4628      	mov	r0, r5
 8007baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bae:	f7fd bcb5 	b.w	800551c <_free_r>
 8007bb2:	bf00      	nop

08007bb4 <_reclaim_reent>:
 8007bb4:	4b20      	ldr	r3, [pc, #128]	; (8007c38 <_reclaim_reent+0x84>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4283      	cmp	r3, r0
 8007bba:	d03b      	beq.n	8007c34 <_reclaim_reent+0x80>
 8007bbc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007bbe:	b570      	push	{r4, r5, r6, lr}
 8007bc0:	4605      	mov	r5, r0
 8007bc2:	b18b      	cbz	r3, 8007be8 <_reclaim_reent+0x34>
 8007bc4:	2600      	movs	r6, #0
 8007bc6:	5999      	ldr	r1, [r3, r6]
 8007bc8:	b139      	cbz	r1, 8007bda <_reclaim_reent+0x26>
 8007bca:	680c      	ldr	r4, [r1, #0]
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f7fd fca5 	bl	800551c <_free_r>
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	2c00      	cmp	r4, #0
 8007bd6:	d1f8      	bne.n	8007bca <_reclaim_reent+0x16>
 8007bd8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8007bda:	3604      	adds	r6, #4
 8007bdc:	2e80      	cmp	r6, #128	; 0x80
 8007bde:	d1f2      	bne.n	8007bc6 <_reclaim_reent+0x12>
 8007be0:	4619      	mov	r1, r3
 8007be2:	4628      	mov	r0, r5
 8007be4:	f7fd fc9a 	bl	800551c <_free_r>
 8007be8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007bea:	b111      	cbz	r1, 8007bf2 <_reclaim_reent+0x3e>
 8007bec:	4628      	mov	r0, r5
 8007bee:	f7fd fc95 	bl	800551c <_free_r>
 8007bf2:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8007bf6:	b151      	cbz	r1, 8007c0e <_reclaim_reent+0x5a>
 8007bf8:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8007bfc:	42b1      	cmp	r1, r6
 8007bfe:	d006      	beq.n	8007c0e <_reclaim_reent+0x5a>
 8007c00:	680c      	ldr	r4, [r1, #0]
 8007c02:	4628      	mov	r0, r5
 8007c04:	f7fd fc8a 	bl	800551c <_free_r>
 8007c08:	42a6      	cmp	r6, r4
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	d1f8      	bne.n	8007c00 <_reclaim_reent+0x4c>
 8007c0e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007c10:	b111      	cbz	r1, 8007c18 <_reclaim_reent+0x64>
 8007c12:	4628      	mov	r0, r5
 8007c14:	f7fd fc82 	bl	800551c <_free_r>
 8007c18:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007c1a:	b153      	cbz	r3, 8007c32 <_reclaim_reent+0x7e>
 8007c1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007c1e:	4628      	mov	r0, r5
 8007c20:	4798      	blx	r3
 8007c22:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8007c26:	b121      	cbz	r1, 8007c32 <_reclaim_reent+0x7e>
 8007c28:	4628      	mov	r0, r5
 8007c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c2e:	f7ff bfad 	b.w	8007b8c <cleanup_glue>
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	20000000 	.word	0x20000000
 8007c3c:	00000000 	.word	0x00000000
 8007c40:	eba2 0003 	sub.w	r0, r2, r3
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop

08007c48 <strcmp>:
 8007c48:	7802      	ldrb	r2, [r0, #0]
 8007c4a:	780b      	ldrb	r3, [r1, #0]
 8007c4c:	2a01      	cmp	r2, #1
 8007c4e:	bf28      	it	cs
 8007c50:	429a      	cmpcs	r2, r3
 8007c52:	d1f5      	bne.n	8007c40 <_reclaim_reent+0x8c>
 8007c54:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8007c58:	ea40 0401 	orr.w	r4, r0, r1
 8007c5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007c60:	f06f 0c00 	mvn.w	ip, #0
 8007c64:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8007c68:	b312      	cbz	r2, 8007cb0 <strcmp+0x68>
 8007c6a:	ea80 0401 	eor.w	r4, r0, r1
 8007c6e:	f014 0f07 	tst.w	r4, #7
 8007c72:	d16a      	bne.n	8007d4a <strcmp+0x102>
 8007c74:	f000 0407 	and.w	r4, r0, #7
 8007c78:	f020 0007 	bic.w	r0, r0, #7
 8007c7c:	f004 0503 	and.w	r5, r4, #3
 8007c80:	f021 0107 	bic.w	r1, r1, #7
 8007c84:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8007c88:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8007c8c:	f014 0f04 	tst.w	r4, #4
 8007c90:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8007c94:	fa0c f405 	lsl.w	r4, ip, r5
 8007c98:	ea62 0204 	orn	r2, r2, r4
 8007c9c:	ea66 0604 	orn	r6, r6, r4
 8007ca0:	d00a      	beq.n	8007cb8 <strcmp+0x70>
 8007ca2:	ea63 0304 	orn	r3, r3, r4
 8007ca6:	4662      	mov	r2, ip
 8007ca8:	ea67 0704 	orn	r7, r7, r4
 8007cac:	4666      	mov	r6, ip
 8007cae:	e003      	b.n	8007cb8 <strcmp+0x70>
 8007cb0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8007cb4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8007cb8:	fa82 f54c 	uadd8	r5, r2, ip
 8007cbc:	ea82 0406 	eor.w	r4, r2, r6
 8007cc0:	faa4 f48c 	sel	r4, r4, ip
 8007cc4:	bb6c      	cbnz	r4, 8007d22 <strcmp+0xda>
 8007cc6:	fa83 f54c 	uadd8	r5, r3, ip
 8007cca:	ea83 0507 	eor.w	r5, r3, r7
 8007cce:	faa5 f58c 	sel	r5, r5, ip
 8007cd2:	b995      	cbnz	r5, 8007cfa <strcmp+0xb2>
 8007cd4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8007cd8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 8007cdc:	fa82 f54c 	uadd8	r5, r2, ip
 8007ce0:	ea82 0406 	eor.w	r4, r2, r6
 8007ce4:	faa4 f48c 	sel	r4, r4, ip
 8007ce8:	fa83 f54c 	uadd8	r5, r3, ip
 8007cec:	ea83 0507 	eor.w	r5, r3, r7
 8007cf0:	faa5 f58c 	sel	r5, r5, ip
 8007cf4:	4325      	orrs	r5, r4
 8007cf6:	d0db      	beq.n	8007cb0 <strcmp+0x68>
 8007cf8:	b99c      	cbnz	r4, 8007d22 <strcmp+0xda>
 8007cfa:	ba2d      	rev	r5, r5
 8007cfc:	fab5 f485 	clz	r4, r5
 8007d00:	f024 0407 	bic.w	r4, r4, #7
 8007d04:	fa27 f104 	lsr.w	r1, r7, r4
 8007d08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d0c:	fa23 f304 	lsr.w	r3, r3, r4
 8007d10:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8007d14:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8007d18:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8007d1c:	eba0 0001 	sub.w	r0, r0, r1
 8007d20:	4770      	bx	lr
 8007d22:	ba24      	rev	r4, r4
 8007d24:	fab4 f484 	clz	r4, r4
 8007d28:	f024 0407 	bic.w	r4, r4, #7
 8007d2c:	fa26 f104 	lsr.w	r1, r6, r4
 8007d30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d34:	fa22 f204 	lsr.w	r2, r2, r4
 8007d38:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8007d3c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8007d40:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8007d44:	eba0 0001 	sub.w	r0, r0, r1
 8007d48:	4770      	bx	lr
 8007d4a:	f014 0f03 	tst.w	r4, #3
 8007d4e:	d13c      	bne.n	8007dca <strcmp+0x182>
 8007d50:	f010 0403 	ands.w	r4, r0, #3
 8007d54:	d128      	bne.n	8007da8 <strcmp+0x160>
 8007d56:	f850 2b08 	ldr.w	r2, [r0], #8
 8007d5a:	f851 3b08 	ldr.w	r3, [r1], #8
 8007d5e:	fa82 f54c 	uadd8	r5, r2, ip
 8007d62:	ea82 0503 	eor.w	r5, r2, r3
 8007d66:	faa5 f58c 	sel	r5, r5, ip
 8007d6a:	b95d      	cbnz	r5, 8007d84 <strcmp+0x13c>
 8007d6c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d74:	fa82 f54c 	uadd8	r5, r2, ip
 8007d78:	ea82 0503 	eor.w	r5, r2, r3
 8007d7c:	faa5 f58c 	sel	r5, r5, ip
 8007d80:	2d00      	cmp	r5, #0
 8007d82:	d0e8      	beq.n	8007d56 <strcmp+0x10e>
 8007d84:	ba2d      	rev	r5, r5
 8007d86:	fab5 f485 	clz	r4, r5
 8007d8a:	f024 0407 	bic.w	r4, r4, #7
 8007d8e:	fa23 f104 	lsr.w	r1, r3, r4
 8007d92:	fa22 f204 	lsr.w	r2, r2, r4
 8007d96:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8007d9a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8007d9e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8007da2:	eba0 0001 	sub.w	r0, r0, r1
 8007da6:	4770      	bx	lr
 8007da8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8007dac:	f020 0003 	bic.w	r0, r0, #3
 8007db0:	f850 2b08 	ldr.w	r2, [r0], #8
 8007db4:	f021 0103 	bic.w	r1, r1, #3
 8007db8:	f851 3b08 	ldr.w	r3, [r1], #8
 8007dbc:	fa0c f404 	lsl.w	r4, ip, r4
 8007dc0:	ea62 0204 	orn	r2, r2, r4
 8007dc4:	ea63 0304 	orn	r3, r3, r4
 8007dc8:	e7c9      	b.n	8007d5e <strcmp+0x116>
 8007dca:	f010 0403 	ands.w	r4, r0, #3
 8007dce:	d01a      	beq.n	8007e06 <strcmp+0x1be>
 8007dd0:	eba1 0104 	sub.w	r1, r1, r4
 8007dd4:	f020 0003 	bic.w	r0, r0, #3
 8007dd8:	07e4      	lsls	r4, r4, #31
 8007dda:	f850 2b04 	ldr.w	r2, [r0], #4
 8007dde:	d006      	beq.n	8007dee <strcmp+0x1a6>
 8007de0:	d20f      	bcs.n	8007e02 <strcmp+0x1ba>
 8007de2:	788b      	ldrb	r3, [r1, #2]
 8007de4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8007de8:	1ae4      	subs	r4, r4, r3
 8007dea:	d106      	bne.n	8007dfa <strcmp+0x1b2>
 8007dec:	b12b      	cbz	r3, 8007dfa <strcmp+0x1b2>
 8007dee:	78cb      	ldrb	r3, [r1, #3]
 8007df0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8007df4:	1ae4      	subs	r4, r4, r3
 8007df6:	d100      	bne.n	8007dfa <strcmp+0x1b2>
 8007df8:	b91b      	cbnz	r3, 8007e02 <strcmp+0x1ba>
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8007e00:	4770      	bx	lr
 8007e02:	f101 0104 	add.w	r1, r1, #4
 8007e06:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e0a:	07cc      	lsls	r4, r1, #31
 8007e0c:	f021 0103 	bic.w	r1, r1, #3
 8007e10:	f851 3b04 	ldr.w	r3, [r1], #4
 8007e14:	d848      	bhi.n	8007ea8 <strcmp+0x260>
 8007e16:	d224      	bcs.n	8007e62 <strcmp+0x21a>
 8007e18:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8007e1c:	fa82 f54c 	uadd8	r5, r2, ip
 8007e20:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8007e24:	faa5 f58c 	sel	r5, r5, ip
 8007e28:	d10a      	bne.n	8007e40 <strcmp+0x1f8>
 8007e2a:	b965      	cbnz	r5, 8007e46 <strcmp+0x1fe>
 8007e2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8007e30:	ea84 0402 	eor.w	r4, r4, r2
 8007e34:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8007e38:	d10e      	bne.n	8007e58 <strcmp+0x210>
 8007e3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e3e:	e7eb      	b.n	8007e18 <strcmp+0x1d0>
 8007e40:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8007e44:	e055      	b.n	8007ef2 <strcmp+0x2aa>
 8007e46:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8007e4a:	d14d      	bne.n	8007ee8 <strcmp+0x2a0>
 8007e4c:	7808      	ldrb	r0, [r1, #0]
 8007e4e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8007e52:	f1c0 0000 	rsb	r0, r0, #0
 8007e56:	4770      	bx	lr
 8007e58:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8007e5c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8007e60:	e047      	b.n	8007ef2 <strcmp+0x2aa>
 8007e62:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8007e66:	fa82 f54c 	uadd8	r5, r2, ip
 8007e6a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8007e6e:	faa5 f58c 	sel	r5, r5, ip
 8007e72:	d10a      	bne.n	8007e8a <strcmp+0x242>
 8007e74:	b965      	cbnz	r5, 8007e90 <strcmp+0x248>
 8007e76:	f851 3b04 	ldr.w	r3, [r1], #4
 8007e7a:	ea84 0402 	eor.w	r4, r4, r2
 8007e7e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8007e82:	d10c      	bne.n	8007e9e <strcmp+0x256>
 8007e84:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e88:	e7eb      	b.n	8007e62 <strcmp+0x21a>
 8007e8a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8007e8e:	e030      	b.n	8007ef2 <strcmp+0x2aa>
 8007e90:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8007e94:	d128      	bne.n	8007ee8 <strcmp+0x2a0>
 8007e96:	880b      	ldrh	r3, [r1, #0]
 8007e98:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007e9c:	e029      	b.n	8007ef2 <strcmp+0x2aa>
 8007e9e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007ea2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8007ea6:	e024      	b.n	8007ef2 <strcmp+0x2aa>
 8007ea8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8007eac:	fa82 f54c 	uadd8	r5, r2, ip
 8007eb0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8007eb4:	faa5 f58c 	sel	r5, r5, ip
 8007eb8:	d10a      	bne.n	8007ed0 <strcmp+0x288>
 8007eba:	b965      	cbnz	r5, 8007ed6 <strcmp+0x28e>
 8007ebc:	f851 3b04 	ldr.w	r3, [r1], #4
 8007ec0:	ea84 0402 	eor.w	r4, r4, r2
 8007ec4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8007ec8:	d109      	bne.n	8007ede <strcmp+0x296>
 8007eca:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ece:	e7eb      	b.n	8007ea8 <strcmp+0x260>
 8007ed0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8007ed4:	e00d      	b.n	8007ef2 <strcmp+0x2aa>
 8007ed6:	f015 0fff 	tst.w	r5, #255	; 0xff
 8007eda:	d105      	bne.n	8007ee8 <strcmp+0x2a0>
 8007edc:	680b      	ldr	r3, [r1, #0]
 8007ede:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8007ee2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ee6:	e004      	b.n	8007ef2 <strcmp+0x2aa>
 8007ee8:	f04f 0000 	mov.w	r0, #0
 8007eec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8007ef0:	4770      	bx	lr
 8007ef2:	ba12      	rev	r2, r2
 8007ef4:	ba1b      	rev	r3, r3
 8007ef6:	fa82 f44c 	uadd8	r4, r2, ip
 8007efa:	ea82 0403 	eor.w	r4, r2, r3
 8007efe:	faa4 f58c 	sel	r5, r4, ip
 8007f02:	fab5 f485 	clz	r4, r5
 8007f06:	fa02 f204 	lsl.w	r2, r2, r4
 8007f0a:	fa03 f304 	lsl.w	r3, r3, r4
 8007f0e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8007f12:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8007f16:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 8007f1a:	4770      	bx	lr

08007f1c <_wctomb_r>:
 8007f1c:	b430      	push	{r4, r5}
 8007f1e:	4c06      	ldr	r4, [pc, #24]	; (8007f38 <_wctomb_r+0x1c>)
 8007f20:	4d06      	ldr	r5, [pc, #24]	; (8007f3c <_wctomb_r+0x20>)
 8007f22:	6824      	ldr	r4, [r4, #0]
 8007f24:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8007f26:	2c00      	cmp	r4, #0
 8007f28:	bf08      	it	eq
 8007f2a:	462c      	moveq	r4, r5
 8007f2c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8007f30:	46a4      	mov	ip, r4
 8007f32:	bc30      	pop	{r4, r5}
 8007f34:	4760      	bx	ip
 8007f36:	bf00      	nop
 8007f38:	20000000 	.word	0x20000000
 8007f3c:	20000840 	.word	0x20000840

08007f40 <__ascii_wctomb>:
 8007f40:	b121      	cbz	r1, 8007f4c <__ascii_wctomb+0xc>
 8007f42:	2aff      	cmp	r2, #255	; 0xff
 8007f44:	d804      	bhi.n	8007f50 <__ascii_wctomb+0x10>
 8007f46:	700a      	strb	r2, [r1, #0]
 8007f48:	2001      	movs	r0, #1
 8007f4a:	4770      	bx	lr
 8007f4c:	4608      	mov	r0, r1
 8007f4e:	4770      	bx	lr
 8007f50:	238a      	movs	r3, #138	; 0x8a
 8007f52:	6003      	str	r3, [r0, #0]
 8007f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop

08007f5c <__aeabi_drsub>:
 8007f5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007f60:	e002      	b.n	8007f68 <__adddf3>
 8007f62:	bf00      	nop

08007f64 <__aeabi_dsub>:
 8007f64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007f68 <__adddf3>:
 8007f68:	b530      	push	{r4, r5, lr}
 8007f6a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007f6e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007f72:	ea94 0f05 	teq	r4, r5
 8007f76:	bf08      	it	eq
 8007f78:	ea90 0f02 	teqeq	r0, r2
 8007f7c:	bf1f      	itttt	ne
 8007f7e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007f82:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007f86:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007f8a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007f8e:	f000 80e2 	beq.w	8008156 <__adddf3+0x1ee>
 8007f92:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007f96:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007f9a:	bfb8      	it	lt
 8007f9c:	426d      	neglt	r5, r5
 8007f9e:	dd0c      	ble.n	8007fba <__adddf3+0x52>
 8007fa0:	442c      	add	r4, r5
 8007fa2:	ea80 0202 	eor.w	r2, r0, r2
 8007fa6:	ea81 0303 	eor.w	r3, r1, r3
 8007faa:	ea82 0000 	eor.w	r0, r2, r0
 8007fae:	ea83 0101 	eor.w	r1, r3, r1
 8007fb2:	ea80 0202 	eor.w	r2, r0, r2
 8007fb6:	ea81 0303 	eor.w	r3, r1, r3
 8007fba:	2d36      	cmp	r5, #54	; 0x36
 8007fbc:	bf88      	it	hi
 8007fbe:	bd30      	pophi	{r4, r5, pc}
 8007fc0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007fc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007fc8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007fcc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007fd0:	d002      	beq.n	8007fd8 <__adddf3+0x70>
 8007fd2:	4240      	negs	r0, r0
 8007fd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007fd8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007fdc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007fe0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007fe4:	d002      	beq.n	8007fec <__adddf3+0x84>
 8007fe6:	4252      	negs	r2, r2
 8007fe8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007fec:	ea94 0f05 	teq	r4, r5
 8007ff0:	f000 80a7 	beq.w	8008142 <__adddf3+0x1da>
 8007ff4:	f1a4 0401 	sub.w	r4, r4, #1
 8007ff8:	f1d5 0e20 	rsbs	lr, r5, #32
 8007ffc:	db0d      	blt.n	800801a <__adddf3+0xb2>
 8007ffe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008002:	fa22 f205 	lsr.w	r2, r2, r5
 8008006:	1880      	adds	r0, r0, r2
 8008008:	f141 0100 	adc.w	r1, r1, #0
 800800c:	fa03 f20e 	lsl.w	r2, r3, lr
 8008010:	1880      	adds	r0, r0, r2
 8008012:	fa43 f305 	asr.w	r3, r3, r5
 8008016:	4159      	adcs	r1, r3
 8008018:	e00e      	b.n	8008038 <__adddf3+0xd0>
 800801a:	f1a5 0520 	sub.w	r5, r5, #32
 800801e:	f10e 0e20 	add.w	lr, lr, #32
 8008022:	2a01      	cmp	r2, #1
 8008024:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008028:	bf28      	it	cs
 800802a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800802e:	fa43 f305 	asr.w	r3, r3, r5
 8008032:	18c0      	adds	r0, r0, r3
 8008034:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008038:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800803c:	d507      	bpl.n	800804e <__adddf3+0xe6>
 800803e:	f04f 0e00 	mov.w	lr, #0
 8008042:	f1dc 0c00 	rsbs	ip, ip, #0
 8008046:	eb7e 0000 	sbcs.w	r0, lr, r0
 800804a:	eb6e 0101 	sbc.w	r1, lr, r1
 800804e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008052:	d31b      	bcc.n	800808c <__adddf3+0x124>
 8008054:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008058:	d30c      	bcc.n	8008074 <__adddf3+0x10c>
 800805a:	0849      	lsrs	r1, r1, #1
 800805c:	ea5f 0030 	movs.w	r0, r0, rrx
 8008060:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008064:	f104 0401 	add.w	r4, r4, #1
 8008068:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800806c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008070:	f080 809a 	bcs.w	80081a8 <__adddf3+0x240>
 8008074:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008078:	bf08      	it	eq
 800807a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800807e:	f150 0000 	adcs.w	r0, r0, #0
 8008082:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008086:	ea41 0105 	orr.w	r1, r1, r5
 800808a:	bd30      	pop	{r4, r5, pc}
 800808c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008090:	4140      	adcs	r0, r0
 8008092:	eb41 0101 	adc.w	r1, r1, r1
 8008096:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800809a:	f1a4 0401 	sub.w	r4, r4, #1
 800809e:	d1e9      	bne.n	8008074 <__adddf3+0x10c>
 80080a0:	f091 0f00 	teq	r1, #0
 80080a4:	bf04      	itt	eq
 80080a6:	4601      	moveq	r1, r0
 80080a8:	2000      	moveq	r0, #0
 80080aa:	fab1 f381 	clz	r3, r1
 80080ae:	bf08      	it	eq
 80080b0:	3320      	addeq	r3, #32
 80080b2:	f1a3 030b 	sub.w	r3, r3, #11
 80080b6:	f1b3 0220 	subs.w	r2, r3, #32
 80080ba:	da0c      	bge.n	80080d6 <__adddf3+0x16e>
 80080bc:	320c      	adds	r2, #12
 80080be:	dd08      	ble.n	80080d2 <__adddf3+0x16a>
 80080c0:	f102 0c14 	add.w	ip, r2, #20
 80080c4:	f1c2 020c 	rsb	r2, r2, #12
 80080c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80080cc:	fa21 f102 	lsr.w	r1, r1, r2
 80080d0:	e00c      	b.n	80080ec <__adddf3+0x184>
 80080d2:	f102 0214 	add.w	r2, r2, #20
 80080d6:	bfd8      	it	le
 80080d8:	f1c2 0c20 	rsble	ip, r2, #32
 80080dc:	fa01 f102 	lsl.w	r1, r1, r2
 80080e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80080e4:	bfdc      	itt	le
 80080e6:	ea41 010c 	orrle.w	r1, r1, ip
 80080ea:	4090      	lslle	r0, r2
 80080ec:	1ae4      	subs	r4, r4, r3
 80080ee:	bfa2      	ittt	ge
 80080f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80080f4:	4329      	orrge	r1, r5
 80080f6:	bd30      	popge	{r4, r5, pc}
 80080f8:	ea6f 0404 	mvn.w	r4, r4
 80080fc:	3c1f      	subs	r4, #31
 80080fe:	da1c      	bge.n	800813a <__adddf3+0x1d2>
 8008100:	340c      	adds	r4, #12
 8008102:	dc0e      	bgt.n	8008122 <__adddf3+0x1ba>
 8008104:	f104 0414 	add.w	r4, r4, #20
 8008108:	f1c4 0220 	rsb	r2, r4, #32
 800810c:	fa20 f004 	lsr.w	r0, r0, r4
 8008110:	fa01 f302 	lsl.w	r3, r1, r2
 8008114:	ea40 0003 	orr.w	r0, r0, r3
 8008118:	fa21 f304 	lsr.w	r3, r1, r4
 800811c:	ea45 0103 	orr.w	r1, r5, r3
 8008120:	bd30      	pop	{r4, r5, pc}
 8008122:	f1c4 040c 	rsb	r4, r4, #12
 8008126:	f1c4 0220 	rsb	r2, r4, #32
 800812a:	fa20 f002 	lsr.w	r0, r0, r2
 800812e:	fa01 f304 	lsl.w	r3, r1, r4
 8008132:	ea40 0003 	orr.w	r0, r0, r3
 8008136:	4629      	mov	r1, r5
 8008138:	bd30      	pop	{r4, r5, pc}
 800813a:	fa21 f004 	lsr.w	r0, r1, r4
 800813e:	4629      	mov	r1, r5
 8008140:	bd30      	pop	{r4, r5, pc}
 8008142:	f094 0f00 	teq	r4, #0
 8008146:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800814a:	bf06      	itte	eq
 800814c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008150:	3401      	addeq	r4, #1
 8008152:	3d01      	subne	r5, #1
 8008154:	e74e      	b.n	8007ff4 <__adddf3+0x8c>
 8008156:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800815a:	bf18      	it	ne
 800815c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008160:	d029      	beq.n	80081b6 <__adddf3+0x24e>
 8008162:	ea94 0f05 	teq	r4, r5
 8008166:	bf08      	it	eq
 8008168:	ea90 0f02 	teqeq	r0, r2
 800816c:	d005      	beq.n	800817a <__adddf3+0x212>
 800816e:	ea54 0c00 	orrs.w	ip, r4, r0
 8008172:	bf04      	itt	eq
 8008174:	4619      	moveq	r1, r3
 8008176:	4610      	moveq	r0, r2
 8008178:	bd30      	pop	{r4, r5, pc}
 800817a:	ea91 0f03 	teq	r1, r3
 800817e:	bf1e      	ittt	ne
 8008180:	2100      	movne	r1, #0
 8008182:	2000      	movne	r0, #0
 8008184:	bd30      	popne	{r4, r5, pc}
 8008186:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800818a:	d105      	bne.n	8008198 <__adddf3+0x230>
 800818c:	0040      	lsls	r0, r0, #1
 800818e:	4149      	adcs	r1, r1
 8008190:	bf28      	it	cs
 8008192:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008196:	bd30      	pop	{r4, r5, pc}
 8008198:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800819c:	bf3c      	itt	cc
 800819e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80081a2:	bd30      	popcc	{r4, r5, pc}
 80081a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80081ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081b0:	f04f 0000 	mov.w	r0, #0
 80081b4:	bd30      	pop	{r4, r5, pc}
 80081b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80081ba:	bf1a      	itte	ne
 80081bc:	4619      	movne	r1, r3
 80081be:	4610      	movne	r0, r2
 80081c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80081c4:	bf1c      	itt	ne
 80081c6:	460b      	movne	r3, r1
 80081c8:	4602      	movne	r2, r0
 80081ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80081ce:	bf06      	itte	eq
 80081d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80081d4:	ea91 0f03 	teqeq	r1, r3
 80081d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80081dc:	bd30      	pop	{r4, r5, pc}
 80081de:	bf00      	nop

080081e0 <__aeabi_ui2d>:
 80081e0:	f090 0f00 	teq	r0, #0
 80081e4:	bf04      	itt	eq
 80081e6:	2100      	moveq	r1, #0
 80081e8:	4770      	bxeq	lr
 80081ea:	b530      	push	{r4, r5, lr}
 80081ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80081f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80081f4:	f04f 0500 	mov.w	r5, #0
 80081f8:	f04f 0100 	mov.w	r1, #0
 80081fc:	e750      	b.n	80080a0 <__adddf3+0x138>
 80081fe:	bf00      	nop

08008200 <__aeabi_i2d>:
 8008200:	f090 0f00 	teq	r0, #0
 8008204:	bf04      	itt	eq
 8008206:	2100      	moveq	r1, #0
 8008208:	4770      	bxeq	lr
 800820a:	b530      	push	{r4, r5, lr}
 800820c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008210:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008214:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008218:	bf48      	it	mi
 800821a:	4240      	negmi	r0, r0
 800821c:	f04f 0100 	mov.w	r1, #0
 8008220:	e73e      	b.n	80080a0 <__adddf3+0x138>
 8008222:	bf00      	nop

08008224 <__aeabi_f2d>:
 8008224:	0042      	lsls	r2, r0, #1
 8008226:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800822a:	ea4f 0131 	mov.w	r1, r1, rrx
 800822e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008232:	bf1f      	itttt	ne
 8008234:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008238:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800823c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008240:	4770      	bxne	lr
 8008242:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8008246:	bf08      	it	eq
 8008248:	4770      	bxeq	lr
 800824a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800824e:	bf04      	itt	eq
 8008250:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008254:	4770      	bxeq	lr
 8008256:	b530      	push	{r4, r5, lr}
 8008258:	f44f 7460 	mov.w	r4, #896	; 0x380
 800825c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008260:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008264:	e71c      	b.n	80080a0 <__adddf3+0x138>
 8008266:	bf00      	nop

08008268 <__aeabi_ul2d>:
 8008268:	ea50 0201 	orrs.w	r2, r0, r1
 800826c:	bf08      	it	eq
 800826e:	4770      	bxeq	lr
 8008270:	b530      	push	{r4, r5, lr}
 8008272:	f04f 0500 	mov.w	r5, #0
 8008276:	e00a      	b.n	800828e <__aeabi_l2d+0x16>

08008278 <__aeabi_l2d>:
 8008278:	ea50 0201 	orrs.w	r2, r0, r1
 800827c:	bf08      	it	eq
 800827e:	4770      	bxeq	lr
 8008280:	b530      	push	{r4, r5, lr}
 8008282:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008286:	d502      	bpl.n	800828e <__aeabi_l2d+0x16>
 8008288:	4240      	negs	r0, r0
 800828a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800828e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008292:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008296:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800829a:	f43f aed8 	beq.w	800804e <__adddf3+0xe6>
 800829e:	f04f 0203 	mov.w	r2, #3
 80082a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80082a6:	bf18      	it	ne
 80082a8:	3203      	addne	r2, #3
 80082aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80082ae:	bf18      	it	ne
 80082b0:	3203      	addne	r2, #3
 80082b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80082b6:	f1c2 0320 	rsb	r3, r2, #32
 80082ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80082c6:	ea40 000e 	orr.w	r0, r0, lr
 80082ca:	fa21 f102 	lsr.w	r1, r1, r2
 80082ce:	4414      	add	r4, r2
 80082d0:	e6bd      	b.n	800804e <__adddf3+0xe6>
 80082d2:	bf00      	nop

080082d4 <__aeabi_dmul>:
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80082da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80082de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80082e2:	bf1d      	ittte	ne
 80082e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80082e8:	ea94 0f0c 	teqne	r4, ip
 80082ec:	ea95 0f0c 	teqne	r5, ip
 80082f0:	f000 f8de 	bleq	80084b0 <__aeabi_dmul+0x1dc>
 80082f4:	442c      	add	r4, r5
 80082f6:	ea81 0603 	eor.w	r6, r1, r3
 80082fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80082fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008302:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008306:	bf18      	it	ne
 8008308:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800830c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008314:	d038      	beq.n	8008388 <__aeabi_dmul+0xb4>
 8008316:	fba0 ce02 	umull	ip, lr, r0, r2
 800831a:	f04f 0500 	mov.w	r5, #0
 800831e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008322:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008326:	fbe0 e503 	umlal	lr, r5, r0, r3
 800832a:	f04f 0600 	mov.w	r6, #0
 800832e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008332:	f09c 0f00 	teq	ip, #0
 8008336:	bf18      	it	ne
 8008338:	f04e 0e01 	orrne.w	lr, lr, #1
 800833c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008340:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008344:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008348:	d204      	bcs.n	8008354 <__aeabi_dmul+0x80>
 800834a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800834e:	416d      	adcs	r5, r5
 8008350:	eb46 0606 	adc.w	r6, r6, r6
 8008354:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008358:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800835c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008360:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008364:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008368:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800836c:	bf88      	it	hi
 800836e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008372:	d81e      	bhi.n	80083b2 <__aeabi_dmul+0xde>
 8008374:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008378:	bf08      	it	eq
 800837a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800837e:	f150 0000 	adcs.w	r0, r0, #0
 8008382:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008386:	bd70      	pop	{r4, r5, r6, pc}
 8008388:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800838c:	ea46 0101 	orr.w	r1, r6, r1
 8008390:	ea40 0002 	orr.w	r0, r0, r2
 8008394:	ea81 0103 	eor.w	r1, r1, r3
 8008398:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800839c:	bfc2      	ittt	gt
 800839e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80083a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80083a6:	bd70      	popgt	{r4, r5, r6, pc}
 80083a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80083ac:	f04f 0e00 	mov.w	lr, #0
 80083b0:	3c01      	subs	r4, #1
 80083b2:	f300 80ab 	bgt.w	800850c <__aeabi_dmul+0x238>
 80083b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80083ba:	bfde      	ittt	le
 80083bc:	2000      	movle	r0, #0
 80083be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80083c2:	bd70      	pople	{r4, r5, r6, pc}
 80083c4:	f1c4 0400 	rsb	r4, r4, #0
 80083c8:	3c20      	subs	r4, #32
 80083ca:	da35      	bge.n	8008438 <__aeabi_dmul+0x164>
 80083cc:	340c      	adds	r4, #12
 80083ce:	dc1b      	bgt.n	8008408 <__aeabi_dmul+0x134>
 80083d0:	f104 0414 	add.w	r4, r4, #20
 80083d4:	f1c4 0520 	rsb	r5, r4, #32
 80083d8:	fa00 f305 	lsl.w	r3, r0, r5
 80083dc:	fa20 f004 	lsr.w	r0, r0, r4
 80083e0:	fa01 f205 	lsl.w	r2, r1, r5
 80083e4:	ea40 0002 	orr.w	r0, r0, r2
 80083e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80083ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80083f4:	fa21 f604 	lsr.w	r6, r1, r4
 80083f8:	eb42 0106 	adc.w	r1, r2, r6
 80083fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008400:	bf08      	it	eq
 8008402:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	f1c4 040c 	rsb	r4, r4, #12
 800840c:	f1c4 0520 	rsb	r5, r4, #32
 8008410:	fa00 f304 	lsl.w	r3, r0, r4
 8008414:	fa20 f005 	lsr.w	r0, r0, r5
 8008418:	fa01 f204 	lsl.w	r2, r1, r4
 800841c:	ea40 0002 	orr.w	r0, r0, r2
 8008420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008424:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008428:	f141 0100 	adc.w	r1, r1, #0
 800842c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008430:	bf08      	it	eq
 8008432:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008436:	bd70      	pop	{r4, r5, r6, pc}
 8008438:	f1c4 0520 	rsb	r5, r4, #32
 800843c:	fa00 f205 	lsl.w	r2, r0, r5
 8008440:	ea4e 0e02 	orr.w	lr, lr, r2
 8008444:	fa20 f304 	lsr.w	r3, r0, r4
 8008448:	fa01 f205 	lsl.w	r2, r1, r5
 800844c:	ea43 0302 	orr.w	r3, r3, r2
 8008450:	fa21 f004 	lsr.w	r0, r1, r4
 8008454:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008458:	fa21 f204 	lsr.w	r2, r1, r4
 800845c:	ea20 0002 	bic.w	r0, r0, r2
 8008460:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008464:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008468:	bf08      	it	eq
 800846a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800846e:	bd70      	pop	{r4, r5, r6, pc}
 8008470:	f094 0f00 	teq	r4, #0
 8008474:	d10f      	bne.n	8008496 <__aeabi_dmul+0x1c2>
 8008476:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800847a:	0040      	lsls	r0, r0, #1
 800847c:	eb41 0101 	adc.w	r1, r1, r1
 8008480:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008484:	bf08      	it	eq
 8008486:	3c01      	subeq	r4, #1
 8008488:	d0f7      	beq.n	800847a <__aeabi_dmul+0x1a6>
 800848a:	ea41 0106 	orr.w	r1, r1, r6
 800848e:	f095 0f00 	teq	r5, #0
 8008492:	bf18      	it	ne
 8008494:	4770      	bxne	lr
 8008496:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800849a:	0052      	lsls	r2, r2, #1
 800849c:	eb43 0303 	adc.w	r3, r3, r3
 80084a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80084a4:	bf08      	it	eq
 80084a6:	3d01      	subeq	r5, #1
 80084a8:	d0f7      	beq.n	800849a <__aeabi_dmul+0x1c6>
 80084aa:	ea43 0306 	orr.w	r3, r3, r6
 80084ae:	4770      	bx	lr
 80084b0:	ea94 0f0c 	teq	r4, ip
 80084b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80084b8:	bf18      	it	ne
 80084ba:	ea95 0f0c 	teqne	r5, ip
 80084be:	d00c      	beq.n	80084da <__aeabi_dmul+0x206>
 80084c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80084c4:	bf18      	it	ne
 80084c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80084ca:	d1d1      	bne.n	8008470 <__aeabi_dmul+0x19c>
 80084cc:	ea81 0103 	eor.w	r1, r1, r3
 80084d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80084d4:	f04f 0000 	mov.w	r0, #0
 80084d8:	bd70      	pop	{r4, r5, r6, pc}
 80084da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80084de:	bf06      	itte	eq
 80084e0:	4610      	moveq	r0, r2
 80084e2:	4619      	moveq	r1, r3
 80084e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80084e8:	d019      	beq.n	800851e <__aeabi_dmul+0x24a>
 80084ea:	ea94 0f0c 	teq	r4, ip
 80084ee:	d102      	bne.n	80084f6 <__aeabi_dmul+0x222>
 80084f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80084f4:	d113      	bne.n	800851e <__aeabi_dmul+0x24a>
 80084f6:	ea95 0f0c 	teq	r5, ip
 80084fa:	d105      	bne.n	8008508 <__aeabi_dmul+0x234>
 80084fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008500:	bf1c      	itt	ne
 8008502:	4610      	movne	r0, r2
 8008504:	4619      	movne	r1, r3
 8008506:	d10a      	bne.n	800851e <__aeabi_dmul+0x24a>
 8008508:	ea81 0103 	eor.w	r1, r1, r3
 800850c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008510:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008514:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008518:	f04f 0000 	mov.w	r0, #0
 800851c:	bd70      	pop	{r4, r5, r6, pc}
 800851e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008522:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008526:	bd70      	pop	{r4, r5, r6, pc}

08008528 <__aeabi_ddiv>:
 8008528:	b570      	push	{r4, r5, r6, lr}
 800852a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800852e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008532:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008536:	bf1d      	ittte	ne
 8008538:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800853c:	ea94 0f0c 	teqne	r4, ip
 8008540:	ea95 0f0c 	teqne	r5, ip
 8008544:	f000 f8a7 	bleq	8008696 <__aeabi_ddiv+0x16e>
 8008548:	eba4 0405 	sub.w	r4, r4, r5
 800854c:	ea81 0e03 	eor.w	lr, r1, r3
 8008550:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008554:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008558:	f000 8088 	beq.w	800866c <__aeabi_ddiv+0x144>
 800855c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008560:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008564:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008568:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800856c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008570:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008574:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008578:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800857c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008580:	429d      	cmp	r5, r3
 8008582:	bf08      	it	eq
 8008584:	4296      	cmpeq	r6, r2
 8008586:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800858a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800858e:	d202      	bcs.n	8008596 <__aeabi_ddiv+0x6e>
 8008590:	085b      	lsrs	r3, r3, #1
 8008592:	ea4f 0232 	mov.w	r2, r2, rrx
 8008596:	1ab6      	subs	r6, r6, r2
 8008598:	eb65 0503 	sbc.w	r5, r5, r3
 800859c:	085b      	lsrs	r3, r3, #1
 800859e:	ea4f 0232 	mov.w	r2, r2, rrx
 80085a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80085a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80085aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80085ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80085b2:	bf22      	ittt	cs
 80085b4:	1ab6      	subcs	r6, r6, r2
 80085b6:	4675      	movcs	r5, lr
 80085b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80085bc:	085b      	lsrs	r3, r3, #1
 80085be:	ea4f 0232 	mov.w	r2, r2, rrx
 80085c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80085c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80085ca:	bf22      	ittt	cs
 80085cc:	1ab6      	subcs	r6, r6, r2
 80085ce:	4675      	movcs	r5, lr
 80085d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80085d4:	085b      	lsrs	r3, r3, #1
 80085d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80085da:	ebb6 0e02 	subs.w	lr, r6, r2
 80085de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80085e2:	bf22      	ittt	cs
 80085e4:	1ab6      	subcs	r6, r6, r2
 80085e6:	4675      	movcs	r5, lr
 80085e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80085ec:	085b      	lsrs	r3, r3, #1
 80085ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80085f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80085f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80085fa:	bf22      	ittt	cs
 80085fc:	1ab6      	subcs	r6, r6, r2
 80085fe:	4675      	movcs	r5, lr
 8008600:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008604:	ea55 0e06 	orrs.w	lr, r5, r6
 8008608:	d018      	beq.n	800863c <__aeabi_ddiv+0x114>
 800860a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800860e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008612:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008616:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800861a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800861e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008622:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008626:	d1c0      	bne.n	80085aa <__aeabi_ddiv+0x82>
 8008628:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800862c:	d10b      	bne.n	8008646 <__aeabi_ddiv+0x11e>
 800862e:	ea41 0100 	orr.w	r1, r1, r0
 8008632:	f04f 0000 	mov.w	r0, #0
 8008636:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800863a:	e7b6      	b.n	80085aa <__aeabi_ddiv+0x82>
 800863c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008640:	bf04      	itt	eq
 8008642:	4301      	orreq	r1, r0
 8008644:	2000      	moveq	r0, #0
 8008646:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800864a:	bf88      	it	hi
 800864c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008650:	f63f aeaf 	bhi.w	80083b2 <__aeabi_dmul+0xde>
 8008654:	ebb5 0c03 	subs.w	ip, r5, r3
 8008658:	bf04      	itt	eq
 800865a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800865e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008662:	f150 0000 	adcs.w	r0, r0, #0
 8008666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008670:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008674:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008678:	bfc2      	ittt	gt
 800867a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800867e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008682:	bd70      	popgt	{r4, r5, r6, pc}
 8008684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008688:	f04f 0e00 	mov.w	lr, #0
 800868c:	3c01      	subs	r4, #1
 800868e:	e690      	b.n	80083b2 <__aeabi_dmul+0xde>
 8008690:	ea45 0e06 	orr.w	lr, r5, r6
 8008694:	e68d      	b.n	80083b2 <__aeabi_dmul+0xde>
 8008696:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800869a:	ea94 0f0c 	teq	r4, ip
 800869e:	bf08      	it	eq
 80086a0:	ea95 0f0c 	teqeq	r5, ip
 80086a4:	f43f af3b 	beq.w	800851e <__aeabi_dmul+0x24a>
 80086a8:	ea94 0f0c 	teq	r4, ip
 80086ac:	d10a      	bne.n	80086c4 <__aeabi_ddiv+0x19c>
 80086ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80086b2:	f47f af34 	bne.w	800851e <__aeabi_dmul+0x24a>
 80086b6:	ea95 0f0c 	teq	r5, ip
 80086ba:	f47f af25 	bne.w	8008508 <__aeabi_dmul+0x234>
 80086be:	4610      	mov	r0, r2
 80086c0:	4619      	mov	r1, r3
 80086c2:	e72c      	b.n	800851e <__aeabi_dmul+0x24a>
 80086c4:	ea95 0f0c 	teq	r5, ip
 80086c8:	d106      	bne.n	80086d8 <__aeabi_ddiv+0x1b0>
 80086ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086ce:	f43f aefd 	beq.w	80084cc <__aeabi_dmul+0x1f8>
 80086d2:	4610      	mov	r0, r2
 80086d4:	4619      	mov	r1, r3
 80086d6:	e722      	b.n	800851e <__aeabi_dmul+0x24a>
 80086d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80086dc:	bf18      	it	ne
 80086de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80086e2:	f47f aec5 	bne.w	8008470 <__aeabi_dmul+0x19c>
 80086e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80086ea:	f47f af0d 	bne.w	8008508 <__aeabi_dmul+0x234>
 80086ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80086f2:	f47f aeeb 	bne.w	80084cc <__aeabi_dmul+0x1f8>
 80086f6:	e712      	b.n	800851e <__aeabi_dmul+0x24a>

080086f8 <__gedf2>:
 80086f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80086fc:	e006      	b.n	800870c <__cmpdf2+0x4>
 80086fe:	bf00      	nop

08008700 <__ledf2>:
 8008700:	f04f 0c01 	mov.w	ip, #1
 8008704:	e002      	b.n	800870c <__cmpdf2+0x4>
 8008706:	bf00      	nop

08008708 <__cmpdf2>:
 8008708:	f04f 0c01 	mov.w	ip, #1
 800870c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008710:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008714:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008718:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800871c:	bf18      	it	ne
 800871e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008722:	d01b      	beq.n	800875c <__cmpdf2+0x54>
 8008724:	b001      	add	sp, #4
 8008726:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800872a:	bf0c      	ite	eq
 800872c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008730:	ea91 0f03 	teqne	r1, r3
 8008734:	bf02      	ittt	eq
 8008736:	ea90 0f02 	teqeq	r0, r2
 800873a:	2000      	moveq	r0, #0
 800873c:	4770      	bxeq	lr
 800873e:	f110 0f00 	cmn.w	r0, #0
 8008742:	ea91 0f03 	teq	r1, r3
 8008746:	bf58      	it	pl
 8008748:	4299      	cmppl	r1, r3
 800874a:	bf08      	it	eq
 800874c:	4290      	cmpeq	r0, r2
 800874e:	bf2c      	ite	cs
 8008750:	17d8      	asrcs	r0, r3, #31
 8008752:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008756:	f040 0001 	orr.w	r0, r0, #1
 800875a:	4770      	bx	lr
 800875c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008760:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008764:	d102      	bne.n	800876c <__cmpdf2+0x64>
 8008766:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800876a:	d107      	bne.n	800877c <__cmpdf2+0x74>
 800876c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008770:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008774:	d1d6      	bne.n	8008724 <__cmpdf2+0x1c>
 8008776:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800877a:	d0d3      	beq.n	8008724 <__cmpdf2+0x1c>
 800877c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop

08008784 <__aeabi_cdrcmple>:
 8008784:	4684      	mov	ip, r0
 8008786:	4610      	mov	r0, r2
 8008788:	4662      	mov	r2, ip
 800878a:	468c      	mov	ip, r1
 800878c:	4619      	mov	r1, r3
 800878e:	4663      	mov	r3, ip
 8008790:	e000      	b.n	8008794 <__aeabi_cdcmpeq>
 8008792:	bf00      	nop

08008794 <__aeabi_cdcmpeq>:
 8008794:	b501      	push	{r0, lr}
 8008796:	f7ff ffb7 	bl	8008708 <__cmpdf2>
 800879a:	2800      	cmp	r0, #0
 800879c:	bf48      	it	mi
 800879e:	f110 0f00 	cmnmi.w	r0, #0
 80087a2:	bd01      	pop	{r0, pc}

080087a4 <__aeabi_dcmpeq>:
 80087a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80087a8:	f7ff fff4 	bl	8008794 <__aeabi_cdcmpeq>
 80087ac:	bf0c      	ite	eq
 80087ae:	2001      	moveq	r0, #1
 80087b0:	2000      	movne	r0, #0
 80087b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80087b6:	bf00      	nop

080087b8 <__aeabi_dcmplt>:
 80087b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80087bc:	f7ff ffea 	bl	8008794 <__aeabi_cdcmpeq>
 80087c0:	bf34      	ite	cc
 80087c2:	2001      	movcc	r0, #1
 80087c4:	2000      	movcs	r0, #0
 80087c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80087ca:	bf00      	nop

080087cc <__aeabi_dcmple>:
 80087cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80087d0:	f7ff ffe0 	bl	8008794 <__aeabi_cdcmpeq>
 80087d4:	bf94      	ite	ls
 80087d6:	2001      	movls	r0, #1
 80087d8:	2000      	movhi	r0, #0
 80087da:	f85d fb08 	ldr.w	pc, [sp], #8
 80087de:	bf00      	nop

080087e0 <__aeabi_dcmpge>:
 80087e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80087e4:	f7ff ffce 	bl	8008784 <__aeabi_cdrcmple>
 80087e8:	bf94      	ite	ls
 80087ea:	2001      	movls	r0, #1
 80087ec:	2000      	movhi	r0, #0
 80087ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80087f2:	bf00      	nop

080087f4 <__aeabi_dcmpgt>:
 80087f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80087f8:	f7ff ffc4 	bl	8008784 <__aeabi_cdrcmple>
 80087fc:	bf34      	ite	cc
 80087fe:	2001      	movcc	r0, #1
 8008800:	2000      	movcs	r0, #0
 8008802:	f85d fb08 	ldr.w	pc, [sp], #8
 8008806:	bf00      	nop

08008808 <__aeabi_dcmpun>:
 8008808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800880c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008810:	d102      	bne.n	8008818 <__aeabi_dcmpun+0x10>
 8008812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008816:	d10a      	bne.n	800882e <__aeabi_dcmpun+0x26>
 8008818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800881c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008820:	d102      	bne.n	8008828 <__aeabi_dcmpun+0x20>
 8008822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008826:	d102      	bne.n	800882e <__aeabi_dcmpun+0x26>
 8008828:	f04f 0000 	mov.w	r0, #0
 800882c:	4770      	bx	lr
 800882e:	f04f 0001 	mov.w	r0, #1
 8008832:	4770      	bx	lr

08008834 <__aeabi_d2iz>:
 8008834:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008838:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800883c:	d215      	bcs.n	800886a <__aeabi_d2iz+0x36>
 800883e:	d511      	bpl.n	8008864 <__aeabi_d2iz+0x30>
 8008840:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008844:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008848:	d912      	bls.n	8008870 <__aeabi_d2iz+0x3c>
 800884a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800884e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008852:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008856:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800885a:	fa23 f002 	lsr.w	r0, r3, r2
 800885e:	bf18      	it	ne
 8008860:	4240      	negne	r0, r0
 8008862:	4770      	bx	lr
 8008864:	f04f 0000 	mov.w	r0, #0
 8008868:	4770      	bx	lr
 800886a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800886e:	d105      	bne.n	800887c <__aeabi_d2iz+0x48>
 8008870:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008874:	bf08      	it	eq
 8008876:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800887a:	4770      	bx	lr
 800887c:	f04f 0000 	mov.w	r0, #0
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop

08008884 <__aeabi_uldivmod>:
 8008884:	b953      	cbnz	r3, 800889c <__aeabi_uldivmod+0x18>
 8008886:	b94a      	cbnz	r2, 800889c <__aeabi_uldivmod+0x18>
 8008888:	2900      	cmp	r1, #0
 800888a:	bf08      	it	eq
 800888c:	2800      	cmpeq	r0, #0
 800888e:	bf1c      	itt	ne
 8008890:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008894:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008898:	f000 b972 	b.w	8008b80 <__aeabi_idiv0>
 800889c:	f1ad 0c08 	sub.w	ip, sp, #8
 80088a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80088a4:	f000 f806 	bl	80088b4 <__udivmoddi4>
 80088a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80088ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088b0:	b004      	add	sp, #16
 80088b2:	4770      	bx	lr

080088b4 <__udivmoddi4>:
 80088b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b8:	9e08      	ldr	r6, [sp, #32]
 80088ba:	4604      	mov	r4, r0
 80088bc:	4688      	mov	r8, r1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d14b      	bne.n	800895a <__udivmoddi4+0xa6>
 80088c2:	428a      	cmp	r2, r1
 80088c4:	4615      	mov	r5, r2
 80088c6:	d967      	bls.n	8008998 <__udivmoddi4+0xe4>
 80088c8:	fab2 f282 	clz	r2, r2
 80088cc:	b14a      	cbz	r2, 80088e2 <__udivmoddi4+0x2e>
 80088ce:	f1c2 0720 	rsb	r7, r2, #32
 80088d2:	fa01 f302 	lsl.w	r3, r1, r2
 80088d6:	fa20 f707 	lsr.w	r7, r0, r7
 80088da:	4095      	lsls	r5, r2
 80088dc:	ea47 0803 	orr.w	r8, r7, r3
 80088e0:	4094      	lsls	r4, r2
 80088e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80088e6:	0c23      	lsrs	r3, r4, #16
 80088e8:	fbb8 f7fe 	udiv	r7, r8, lr
 80088ec:	fa1f fc85 	uxth.w	ip, r5
 80088f0:	fb0e 8817 	mls	r8, lr, r7, r8
 80088f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80088f8:	fb07 f10c 	mul.w	r1, r7, ip
 80088fc:	4299      	cmp	r1, r3
 80088fe:	d909      	bls.n	8008914 <__udivmoddi4+0x60>
 8008900:	18eb      	adds	r3, r5, r3
 8008902:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8008906:	f080 811b 	bcs.w	8008b40 <__udivmoddi4+0x28c>
 800890a:	4299      	cmp	r1, r3
 800890c:	f240 8118 	bls.w	8008b40 <__udivmoddi4+0x28c>
 8008910:	3f02      	subs	r7, #2
 8008912:	442b      	add	r3, r5
 8008914:	1a5b      	subs	r3, r3, r1
 8008916:	b2a4      	uxth	r4, r4
 8008918:	fbb3 f0fe 	udiv	r0, r3, lr
 800891c:	fb0e 3310 	mls	r3, lr, r0, r3
 8008920:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008924:	fb00 fc0c 	mul.w	ip, r0, ip
 8008928:	45a4      	cmp	ip, r4
 800892a:	d909      	bls.n	8008940 <__udivmoddi4+0x8c>
 800892c:	192c      	adds	r4, r5, r4
 800892e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008932:	f080 8107 	bcs.w	8008b44 <__udivmoddi4+0x290>
 8008936:	45a4      	cmp	ip, r4
 8008938:	f240 8104 	bls.w	8008b44 <__udivmoddi4+0x290>
 800893c:	3802      	subs	r0, #2
 800893e:	442c      	add	r4, r5
 8008940:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008944:	eba4 040c 	sub.w	r4, r4, ip
 8008948:	2700      	movs	r7, #0
 800894a:	b11e      	cbz	r6, 8008954 <__udivmoddi4+0xa0>
 800894c:	40d4      	lsrs	r4, r2
 800894e:	2300      	movs	r3, #0
 8008950:	e9c6 4300 	strd	r4, r3, [r6]
 8008954:	4639      	mov	r1, r7
 8008956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800895a:	428b      	cmp	r3, r1
 800895c:	d909      	bls.n	8008972 <__udivmoddi4+0xbe>
 800895e:	2e00      	cmp	r6, #0
 8008960:	f000 80eb 	beq.w	8008b3a <__udivmoddi4+0x286>
 8008964:	2700      	movs	r7, #0
 8008966:	e9c6 0100 	strd	r0, r1, [r6]
 800896a:	4638      	mov	r0, r7
 800896c:	4639      	mov	r1, r7
 800896e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008972:	fab3 f783 	clz	r7, r3
 8008976:	2f00      	cmp	r7, #0
 8008978:	d147      	bne.n	8008a0a <__udivmoddi4+0x156>
 800897a:	428b      	cmp	r3, r1
 800897c:	d302      	bcc.n	8008984 <__udivmoddi4+0xd0>
 800897e:	4282      	cmp	r2, r0
 8008980:	f200 80fa 	bhi.w	8008b78 <__udivmoddi4+0x2c4>
 8008984:	1a84      	subs	r4, r0, r2
 8008986:	eb61 0303 	sbc.w	r3, r1, r3
 800898a:	2001      	movs	r0, #1
 800898c:	4698      	mov	r8, r3
 800898e:	2e00      	cmp	r6, #0
 8008990:	d0e0      	beq.n	8008954 <__udivmoddi4+0xa0>
 8008992:	e9c6 4800 	strd	r4, r8, [r6]
 8008996:	e7dd      	b.n	8008954 <__udivmoddi4+0xa0>
 8008998:	b902      	cbnz	r2, 800899c <__udivmoddi4+0xe8>
 800899a:	deff      	udf	#255	; 0xff
 800899c:	fab2 f282 	clz	r2, r2
 80089a0:	2a00      	cmp	r2, #0
 80089a2:	f040 808f 	bne.w	8008ac4 <__udivmoddi4+0x210>
 80089a6:	1b49      	subs	r1, r1, r5
 80089a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80089ac:	fa1f f885 	uxth.w	r8, r5
 80089b0:	2701      	movs	r7, #1
 80089b2:	fbb1 fcfe 	udiv	ip, r1, lr
 80089b6:	0c23      	lsrs	r3, r4, #16
 80089b8:	fb0e 111c 	mls	r1, lr, ip, r1
 80089bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80089c0:	fb08 f10c 	mul.w	r1, r8, ip
 80089c4:	4299      	cmp	r1, r3
 80089c6:	d907      	bls.n	80089d8 <__udivmoddi4+0x124>
 80089c8:	18eb      	adds	r3, r5, r3
 80089ca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80089ce:	d202      	bcs.n	80089d6 <__udivmoddi4+0x122>
 80089d0:	4299      	cmp	r1, r3
 80089d2:	f200 80cd 	bhi.w	8008b70 <__udivmoddi4+0x2bc>
 80089d6:	4684      	mov	ip, r0
 80089d8:	1a59      	subs	r1, r3, r1
 80089da:	b2a3      	uxth	r3, r4
 80089dc:	fbb1 f0fe 	udiv	r0, r1, lr
 80089e0:	fb0e 1410 	mls	r4, lr, r0, r1
 80089e4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80089e8:	fb08 f800 	mul.w	r8, r8, r0
 80089ec:	45a0      	cmp	r8, r4
 80089ee:	d907      	bls.n	8008a00 <__udivmoddi4+0x14c>
 80089f0:	192c      	adds	r4, r5, r4
 80089f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80089f6:	d202      	bcs.n	80089fe <__udivmoddi4+0x14a>
 80089f8:	45a0      	cmp	r8, r4
 80089fa:	f200 80b6 	bhi.w	8008b6a <__udivmoddi4+0x2b6>
 80089fe:	4618      	mov	r0, r3
 8008a00:	eba4 0408 	sub.w	r4, r4, r8
 8008a04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008a08:	e79f      	b.n	800894a <__udivmoddi4+0x96>
 8008a0a:	f1c7 0c20 	rsb	ip, r7, #32
 8008a0e:	40bb      	lsls	r3, r7
 8008a10:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008a14:	ea4e 0e03 	orr.w	lr, lr, r3
 8008a18:	fa01 f407 	lsl.w	r4, r1, r7
 8008a1c:	fa20 f50c 	lsr.w	r5, r0, ip
 8008a20:	fa21 f30c 	lsr.w	r3, r1, ip
 8008a24:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008a28:	4325      	orrs	r5, r4
 8008a2a:	fbb3 f9f8 	udiv	r9, r3, r8
 8008a2e:	0c2c      	lsrs	r4, r5, #16
 8008a30:	fb08 3319 	mls	r3, r8, r9, r3
 8008a34:	fa1f fa8e 	uxth.w	sl, lr
 8008a38:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008a3c:	fb09 f40a 	mul.w	r4, r9, sl
 8008a40:	429c      	cmp	r4, r3
 8008a42:	fa02 f207 	lsl.w	r2, r2, r7
 8008a46:	fa00 f107 	lsl.w	r1, r0, r7
 8008a4a:	d90b      	bls.n	8008a64 <__udivmoddi4+0x1b0>
 8008a4c:	eb1e 0303 	adds.w	r3, lr, r3
 8008a50:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8008a54:	f080 8087 	bcs.w	8008b66 <__udivmoddi4+0x2b2>
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	f240 8084 	bls.w	8008b66 <__udivmoddi4+0x2b2>
 8008a5e:	f1a9 0902 	sub.w	r9, r9, #2
 8008a62:	4473      	add	r3, lr
 8008a64:	1b1b      	subs	r3, r3, r4
 8008a66:	b2ad      	uxth	r5, r5
 8008a68:	fbb3 f0f8 	udiv	r0, r3, r8
 8008a6c:	fb08 3310 	mls	r3, r8, r0, r3
 8008a70:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008a74:	fb00 fa0a 	mul.w	sl, r0, sl
 8008a78:	45a2      	cmp	sl, r4
 8008a7a:	d908      	bls.n	8008a8e <__udivmoddi4+0x1da>
 8008a7c:	eb1e 0404 	adds.w	r4, lr, r4
 8008a80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008a84:	d26b      	bcs.n	8008b5e <__udivmoddi4+0x2aa>
 8008a86:	45a2      	cmp	sl, r4
 8008a88:	d969      	bls.n	8008b5e <__udivmoddi4+0x2aa>
 8008a8a:	3802      	subs	r0, #2
 8008a8c:	4474      	add	r4, lr
 8008a8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008a92:	fba0 8902 	umull	r8, r9, r0, r2
 8008a96:	eba4 040a 	sub.w	r4, r4, sl
 8008a9a:	454c      	cmp	r4, r9
 8008a9c:	46c2      	mov	sl, r8
 8008a9e:	464b      	mov	r3, r9
 8008aa0:	d354      	bcc.n	8008b4c <__udivmoddi4+0x298>
 8008aa2:	d051      	beq.n	8008b48 <__udivmoddi4+0x294>
 8008aa4:	2e00      	cmp	r6, #0
 8008aa6:	d069      	beq.n	8008b7c <__udivmoddi4+0x2c8>
 8008aa8:	ebb1 050a 	subs.w	r5, r1, sl
 8008aac:	eb64 0403 	sbc.w	r4, r4, r3
 8008ab0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ab4:	40fd      	lsrs	r5, r7
 8008ab6:	40fc      	lsrs	r4, r7
 8008ab8:	ea4c 0505 	orr.w	r5, ip, r5
 8008abc:	e9c6 5400 	strd	r5, r4, [r6]
 8008ac0:	2700      	movs	r7, #0
 8008ac2:	e747      	b.n	8008954 <__udivmoddi4+0xa0>
 8008ac4:	f1c2 0320 	rsb	r3, r2, #32
 8008ac8:	fa20 f703 	lsr.w	r7, r0, r3
 8008acc:	4095      	lsls	r5, r2
 8008ace:	fa01 f002 	lsl.w	r0, r1, r2
 8008ad2:	fa21 f303 	lsr.w	r3, r1, r3
 8008ad6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008ada:	4338      	orrs	r0, r7
 8008adc:	0c01      	lsrs	r1, r0, #16
 8008ade:	fbb3 f7fe 	udiv	r7, r3, lr
 8008ae2:	fa1f f885 	uxth.w	r8, r5
 8008ae6:	fb0e 3317 	mls	r3, lr, r7, r3
 8008aea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008aee:	fb07 f308 	mul.w	r3, r7, r8
 8008af2:	428b      	cmp	r3, r1
 8008af4:	fa04 f402 	lsl.w	r4, r4, r2
 8008af8:	d907      	bls.n	8008b0a <__udivmoddi4+0x256>
 8008afa:	1869      	adds	r1, r5, r1
 8008afc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8008b00:	d22f      	bcs.n	8008b62 <__udivmoddi4+0x2ae>
 8008b02:	428b      	cmp	r3, r1
 8008b04:	d92d      	bls.n	8008b62 <__udivmoddi4+0x2ae>
 8008b06:	3f02      	subs	r7, #2
 8008b08:	4429      	add	r1, r5
 8008b0a:	1acb      	subs	r3, r1, r3
 8008b0c:	b281      	uxth	r1, r0
 8008b0e:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b12:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008b1a:	fb00 f308 	mul.w	r3, r0, r8
 8008b1e:	428b      	cmp	r3, r1
 8008b20:	d907      	bls.n	8008b32 <__udivmoddi4+0x27e>
 8008b22:	1869      	adds	r1, r5, r1
 8008b24:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8008b28:	d217      	bcs.n	8008b5a <__udivmoddi4+0x2a6>
 8008b2a:	428b      	cmp	r3, r1
 8008b2c:	d915      	bls.n	8008b5a <__udivmoddi4+0x2a6>
 8008b2e:	3802      	subs	r0, #2
 8008b30:	4429      	add	r1, r5
 8008b32:	1ac9      	subs	r1, r1, r3
 8008b34:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008b38:	e73b      	b.n	80089b2 <__udivmoddi4+0xfe>
 8008b3a:	4637      	mov	r7, r6
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	e709      	b.n	8008954 <__udivmoddi4+0xa0>
 8008b40:	4607      	mov	r7, r0
 8008b42:	e6e7      	b.n	8008914 <__udivmoddi4+0x60>
 8008b44:	4618      	mov	r0, r3
 8008b46:	e6fb      	b.n	8008940 <__udivmoddi4+0x8c>
 8008b48:	4541      	cmp	r1, r8
 8008b4a:	d2ab      	bcs.n	8008aa4 <__udivmoddi4+0x1f0>
 8008b4c:	ebb8 0a02 	subs.w	sl, r8, r2
 8008b50:	eb69 020e 	sbc.w	r2, r9, lr
 8008b54:	3801      	subs	r0, #1
 8008b56:	4613      	mov	r3, r2
 8008b58:	e7a4      	b.n	8008aa4 <__udivmoddi4+0x1f0>
 8008b5a:	4660      	mov	r0, ip
 8008b5c:	e7e9      	b.n	8008b32 <__udivmoddi4+0x27e>
 8008b5e:	4618      	mov	r0, r3
 8008b60:	e795      	b.n	8008a8e <__udivmoddi4+0x1da>
 8008b62:	4667      	mov	r7, ip
 8008b64:	e7d1      	b.n	8008b0a <__udivmoddi4+0x256>
 8008b66:	4681      	mov	r9, r0
 8008b68:	e77c      	b.n	8008a64 <__udivmoddi4+0x1b0>
 8008b6a:	3802      	subs	r0, #2
 8008b6c:	442c      	add	r4, r5
 8008b6e:	e747      	b.n	8008a00 <__udivmoddi4+0x14c>
 8008b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8008b74:	442b      	add	r3, r5
 8008b76:	e72f      	b.n	80089d8 <__udivmoddi4+0x124>
 8008b78:	4638      	mov	r0, r7
 8008b7a:	e708      	b.n	800898e <__udivmoddi4+0xda>
 8008b7c:	4637      	mov	r7, r6
 8008b7e:	e6e9      	b.n	8008954 <__udivmoddi4+0xa0>

08008b80 <__aeabi_idiv0>:
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop

08008b84 <led_config>:
 8008b84:	0080 0000 0000 0001 0000 0000               ............

08008b90 <BUTTON_1_config>:
 8008b90:	0008 0000 0000 0000 0000 0000               ............

08008b9c <BUTTON_2_config>:
 8008b9c:	0008 0000 0000 0000 0000 0000 2049 4143     ............I CA
 8008bac:	204e 4f4d 5352 0045 0030 0000 6c25 0075     N MORSE.0...%lu.

08008bbc <_global_impure_ptr>:
 8008bbc:	0008 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
 8008bcc:	616e 006e 3130 3332 3534 3736 3938 6261     nan.0123456789ab
 8008bdc:	6463 6665 0000 0000 3130 3332 3534 3736     cdef....01234567
 8008bec:	3938 4241 4443 4645 0000 0000 6e28 6c75     89ABCDEF....(nul
 8008bfc:	296c 0000 0030 0000                         l)..0...

08008c04 <blanks.7315>:
 8008c04:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008c14 <zeroes.7316>:
 8008c14:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 8008c24:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
 8008c34:	0000 0000                                   ....

08008c38 <__mprec_bigtens>:
 8008c38:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8008c48:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8008c58:	bf3c 7f73 4fdd 7515                         <.s..O.u

08008c60 <__mprec_tens>:
 8008c60:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8008c70:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8008c80:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8008c90:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8008ca0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8008cb0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8008cc0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8008cd0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8008ce0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8008cf0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8008d00:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8008d10:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8008d20:	9db4 79d9 7843 44ea                         ...yCx.D

08008d28 <__mprec_tinytens>:
 8008d28:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8008d38:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8008d48:	6f43 64ac 0628 0ac8                         Co.d(...

08008d50 <p05.6092>:
 8008d50:	0005 0000 0019 0000 007d 0000               ........}...

08008d5c <blanks.7294>:
 8008d5c:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008d6c <zeroes.7295>:
 8008d6c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 8008d7c:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

08008d8c <_ctype_>:
 8008d8c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8008d9c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8008dac:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8008dbc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8008dcc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8008ddc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8008dec:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8008dfc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8008e0c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
